// Code generated by go-swagger; DO NOT EDIT.

package passwords

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPasswordParams creates a new GetPasswordParams object
// with the default values initialized.
func NewGetPasswordParams() *GetPasswordParams {
	var ()
	return &GetPasswordParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPasswordParamsWithTimeout creates a new GetPasswordParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPasswordParamsWithTimeout(timeout time.Duration) *GetPasswordParams {
	var ()
	return &GetPasswordParams{

		timeout: timeout,
	}
}

// NewGetPasswordParamsWithContext creates a new GetPasswordParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPasswordParamsWithContext(ctx context.Context) *GetPasswordParams {
	var ()
	return &GetPasswordParams{

		Context: ctx,
	}
}

// NewGetPasswordParamsWithHTTPClient creates a new GetPasswordParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPasswordParamsWithHTTPClient(client *http.Client) *GetPasswordParams {
	var ()
	return &GetPasswordParams{
		HTTPClient: client,
	}
}

/*GetPasswordParams contains all the parameters to send to the API endpoint
for the get password operation typically these are written to a http.Request
*/
type GetPasswordParams struct {

	/*Appcomp
	  The application component that depends on this service

	*/
	Appcomp *string
	/*Category
	  name of the category

	*/
	Category *string
	/*Device
	  Device name

	*/
	Device *string
	/*ID
	  The ID of the software, required if not using NAME

	*/
	ID *string
	/*Label*/
	Label *string
	/*PlainText
	  Decrypt the password and return the plain text version. ?plain_text=yes will decrypt and display the password.

	*/
	PlainText *string
	/*Username
	  Retrieve all the passwords for a specified username. ?username=

	*/
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get password params
func (o *GetPasswordParams) WithTimeout(timeout time.Duration) *GetPasswordParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get password params
func (o *GetPasswordParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get password params
func (o *GetPasswordParams) WithContext(ctx context.Context) *GetPasswordParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get password params
func (o *GetPasswordParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get password params
func (o *GetPasswordParams) WithHTTPClient(client *http.Client) *GetPasswordParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get password params
func (o *GetPasswordParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppcomp adds the appcomp to the get password params
func (o *GetPasswordParams) WithAppcomp(appcomp *string) *GetPasswordParams {
	o.SetAppcomp(appcomp)
	return o
}

// SetAppcomp adds the appcomp to the get password params
func (o *GetPasswordParams) SetAppcomp(appcomp *string) {
	o.Appcomp = appcomp
}

// WithCategory adds the category to the get password params
func (o *GetPasswordParams) WithCategory(category *string) *GetPasswordParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the get password params
func (o *GetPasswordParams) SetCategory(category *string) {
	o.Category = category
}

// WithDevice adds the device to the get password params
func (o *GetPasswordParams) WithDevice(device *string) *GetPasswordParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the get password params
func (o *GetPasswordParams) SetDevice(device *string) {
	o.Device = device
}

// WithID adds the id to the get password params
func (o *GetPasswordParams) WithID(id *string) *GetPasswordParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get password params
func (o *GetPasswordParams) SetID(id *string) {
	o.ID = id
}

// WithLabel adds the label to the get password params
func (o *GetPasswordParams) WithLabel(label *string) *GetPasswordParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the get password params
func (o *GetPasswordParams) SetLabel(label *string) {
	o.Label = label
}

// WithPlainText adds the plainText to the get password params
func (o *GetPasswordParams) WithPlainText(plainText *string) *GetPasswordParams {
	o.SetPlainText(plainText)
	return o
}

// SetPlainText adds the plainText to the get password params
func (o *GetPasswordParams) SetPlainText(plainText *string) {
	o.PlainText = plainText
}

// WithUsername adds the username to the get password params
func (o *GetPasswordParams) WithUsername(username *string) *GetPasswordParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get password params
func (o *GetPasswordParams) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetPasswordParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Appcomp != nil {

		// query param appcomp
		var qrAppcomp string
		if o.Appcomp != nil {
			qrAppcomp = *o.Appcomp
		}
		qAppcomp := qrAppcomp
		if qAppcomp != "" {
			if err := r.SetQueryParam("appcomp", qAppcomp); err != nil {
				return err
			}
		}

	}

	if o.Category != nil {

		// query param category
		var qrCategory string
		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {
			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// query param device
		var qrDevice string
		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {
			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Label != nil {

		// query param label
		var qrLabel string
		if o.Label != nil {
			qrLabel = *o.Label
		}
		qLabel := qrLabel
		if qLabel != "" {
			if err := r.SetQueryParam("label", qLabel); err != nil {
				return err
			}
		}

	}

	if o.PlainText != nil {

		// query param plain_text
		var qrPlainText string
		if o.PlainText != nil {
			qrPlainText = *o.PlainText
		}
		qPlainText := qrPlainText
		if qPlainText != "" {
			if err := r.SetQueryParam("plain_text", qPlainText); err != nil {
				return err
			}
		}

	}

	if o.Username != nil {

		// query param username
		var qrUsername string
		if o.Username != nil {
			qrUsername = *o.Username
		}
		qUsername := qrUsername
		if qUsername != "" {
			if err := r.SetQueryParam("username", qUsername); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
