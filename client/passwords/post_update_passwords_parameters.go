// Code generated by go-swagger; DO NOT EDIT.

package passwords

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostUpdatePasswordsParams creates a new PostUpdatePasswordsParams object
// with the default values initialized.
func NewPostUpdatePasswordsParams() *PostUpdatePasswordsParams {
	var ()
	return &PostUpdatePasswordsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostUpdatePasswordsParamsWithTimeout creates a new PostUpdatePasswordsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostUpdatePasswordsParamsWithTimeout(timeout time.Duration) *PostUpdatePasswordsParams {
	var ()
	return &PostUpdatePasswordsParams{

		timeout: timeout,
	}
}

// NewPostUpdatePasswordsParamsWithContext creates a new PostUpdatePasswordsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostUpdatePasswordsParamsWithContext(ctx context.Context) *PostUpdatePasswordsParams {
	var ()
	return &PostUpdatePasswordsParams{

		Context: ctx,
	}
}

// NewPostUpdatePasswordsParamsWithHTTPClient creates a new PostUpdatePasswordsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostUpdatePasswordsParamsWithHTTPClient(client *http.Client) *PostUpdatePasswordsParams {
	var ()
	return &PostUpdatePasswordsParams{
		HTTPClient: client,
	}
}

/*PostUpdatePasswordsParams contains all the parameters to send to the API endpoint
for the post update passwords operation typically these are written to a http.Request
*/
type PostUpdatePasswordsParams struct {

	/*Appcomps
	  A comma separated list of application component names.

	*/
	Appcomps *string
	/*Category
	  A password category. If it doesn't exist a new one will be created.

	*/
	Category *string
	/*DaysBeforeExpiry
	  number of days before password is set as expired

	*/
	DaysBeforeExpiry *string
	/*Devices
	  A comma separated list of device names.

	*/
	Devices *string
	/*ID
	  Required to modify existing password

	*/
	ID *string
	/*Label*/
	Label *string
	/*Notes
	  Any additional notes

	*/
	Notes *string
	/*Password
	  The password.

	*/
	Password *string
	/*UseOnlyGroupsRemove
	  A comma separated list of user groups to remove use permissions.

	*/
	UseOnlyGroupsRemove *string
	/*UseOnlyUsersRemove
	  A comma separated list of users to remove use only permissions.

	*/
	UseOnlyUsersRemove *string
	/*Username*/
	Username *string
	/*ViewEditGroupsRemove
	  A comma separated list of user groups to remove view and edit permissions.

	*/
	ViewEditGroupsRemove *string
	/*ViewEditUsers
	  A comma separated list of users that have permission to view and edit this password.

	*/
	ViewEditUsers *string
	/*ViewEditUsersRemove
	  A comma separated list of users to remove view and edit permissions.

	*/
	ViewEditUsersRemove *string
	/*ViewGroups
	  A comma separated list of user groups that have permission to view this password.

	*/
	ViewGroups *string
	/*ViewGroupsRemove
	  A comma separated list of user groups to remove use permissions.

	*/
	ViewGroupsRemove *string
	/*ViewUsers
	  A comma separated list of users that have permission to view this password.

	*/
	ViewUsers *string
	/*ViewUsersRemove
	  A comma separated list of users to remove view permissions.

	*/
	ViewUsersRemove *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post update passwords params
func (o *PostUpdatePasswordsParams) WithTimeout(timeout time.Duration) *PostUpdatePasswordsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post update passwords params
func (o *PostUpdatePasswordsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post update passwords params
func (o *PostUpdatePasswordsParams) WithContext(ctx context.Context) *PostUpdatePasswordsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post update passwords params
func (o *PostUpdatePasswordsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post update passwords params
func (o *PostUpdatePasswordsParams) WithHTTPClient(client *http.Client) *PostUpdatePasswordsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post update passwords params
func (o *PostUpdatePasswordsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppcomps adds the appcomps to the post update passwords params
func (o *PostUpdatePasswordsParams) WithAppcomps(appcomps *string) *PostUpdatePasswordsParams {
	o.SetAppcomps(appcomps)
	return o
}

// SetAppcomps adds the appcomps to the post update passwords params
func (o *PostUpdatePasswordsParams) SetAppcomps(appcomps *string) {
	o.Appcomps = appcomps
}

// WithCategory adds the category to the post update passwords params
func (o *PostUpdatePasswordsParams) WithCategory(category *string) *PostUpdatePasswordsParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the post update passwords params
func (o *PostUpdatePasswordsParams) SetCategory(category *string) {
	o.Category = category
}

// WithDaysBeforeExpiry adds the daysBeforeExpiry to the post update passwords params
func (o *PostUpdatePasswordsParams) WithDaysBeforeExpiry(daysBeforeExpiry *string) *PostUpdatePasswordsParams {
	o.SetDaysBeforeExpiry(daysBeforeExpiry)
	return o
}

// SetDaysBeforeExpiry adds the daysBeforeExpiry to the post update passwords params
func (o *PostUpdatePasswordsParams) SetDaysBeforeExpiry(daysBeforeExpiry *string) {
	o.DaysBeforeExpiry = daysBeforeExpiry
}

// WithDevices adds the devices to the post update passwords params
func (o *PostUpdatePasswordsParams) WithDevices(devices *string) *PostUpdatePasswordsParams {
	o.SetDevices(devices)
	return o
}

// SetDevices adds the devices to the post update passwords params
func (o *PostUpdatePasswordsParams) SetDevices(devices *string) {
	o.Devices = devices
}

// WithID adds the id to the post update passwords params
func (o *PostUpdatePasswordsParams) WithID(id *string) *PostUpdatePasswordsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the post update passwords params
func (o *PostUpdatePasswordsParams) SetID(id *string) {
	o.ID = id
}

// WithLabel adds the label to the post update passwords params
func (o *PostUpdatePasswordsParams) WithLabel(label *string) *PostUpdatePasswordsParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the post update passwords params
func (o *PostUpdatePasswordsParams) SetLabel(label *string) {
	o.Label = label
}

// WithNotes adds the notes to the post update passwords params
func (o *PostUpdatePasswordsParams) WithNotes(notes *string) *PostUpdatePasswordsParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the post update passwords params
func (o *PostUpdatePasswordsParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithPassword adds the password to the post update passwords params
func (o *PostUpdatePasswordsParams) WithPassword(password *string) *PostUpdatePasswordsParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the post update passwords params
func (o *PostUpdatePasswordsParams) SetPassword(password *string) {
	o.Password = password
}

// WithUseOnlyGroupsRemove adds the useOnlyGroupsRemove to the post update passwords params
func (o *PostUpdatePasswordsParams) WithUseOnlyGroupsRemove(useOnlyGroupsRemove *string) *PostUpdatePasswordsParams {
	o.SetUseOnlyGroupsRemove(useOnlyGroupsRemove)
	return o
}

// SetUseOnlyGroupsRemove adds the useOnlyGroupsRemove to the post update passwords params
func (o *PostUpdatePasswordsParams) SetUseOnlyGroupsRemove(useOnlyGroupsRemove *string) {
	o.UseOnlyGroupsRemove = useOnlyGroupsRemove
}

// WithUseOnlyUsersRemove adds the useOnlyUsersRemove to the post update passwords params
func (o *PostUpdatePasswordsParams) WithUseOnlyUsersRemove(useOnlyUsersRemove *string) *PostUpdatePasswordsParams {
	o.SetUseOnlyUsersRemove(useOnlyUsersRemove)
	return o
}

// SetUseOnlyUsersRemove adds the useOnlyUsersRemove to the post update passwords params
func (o *PostUpdatePasswordsParams) SetUseOnlyUsersRemove(useOnlyUsersRemove *string) {
	o.UseOnlyUsersRemove = useOnlyUsersRemove
}

// WithUsername adds the username to the post update passwords params
func (o *PostUpdatePasswordsParams) WithUsername(username *string) *PostUpdatePasswordsParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the post update passwords params
func (o *PostUpdatePasswordsParams) SetUsername(username *string) {
	o.Username = username
}

// WithViewEditGroupsRemove adds the viewEditGroupsRemove to the post update passwords params
func (o *PostUpdatePasswordsParams) WithViewEditGroupsRemove(viewEditGroupsRemove *string) *PostUpdatePasswordsParams {
	o.SetViewEditGroupsRemove(viewEditGroupsRemove)
	return o
}

// SetViewEditGroupsRemove adds the viewEditGroupsRemove to the post update passwords params
func (o *PostUpdatePasswordsParams) SetViewEditGroupsRemove(viewEditGroupsRemove *string) {
	o.ViewEditGroupsRemove = viewEditGroupsRemove
}

// WithViewEditUsers adds the viewEditUsers to the post update passwords params
func (o *PostUpdatePasswordsParams) WithViewEditUsers(viewEditUsers *string) *PostUpdatePasswordsParams {
	o.SetViewEditUsers(viewEditUsers)
	return o
}

// SetViewEditUsers adds the viewEditUsers to the post update passwords params
func (o *PostUpdatePasswordsParams) SetViewEditUsers(viewEditUsers *string) {
	o.ViewEditUsers = viewEditUsers
}

// WithViewEditUsersRemove adds the viewEditUsersRemove to the post update passwords params
func (o *PostUpdatePasswordsParams) WithViewEditUsersRemove(viewEditUsersRemove *string) *PostUpdatePasswordsParams {
	o.SetViewEditUsersRemove(viewEditUsersRemove)
	return o
}

// SetViewEditUsersRemove adds the viewEditUsersRemove to the post update passwords params
func (o *PostUpdatePasswordsParams) SetViewEditUsersRemove(viewEditUsersRemove *string) {
	o.ViewEditUsersRemove = viewEditUsersRemove
}

// WithViewGroups adds the viewGroups to the post update passwords params
func (o *PostUpdatePasswordsParams) WithViewGroups(viewGroups *string) *PostUpdatePasswordsParams {
	o.SetViewGroups(viewGroups)
	return o
}

// SetViewGroups adds the viewGroups to the post update passwords params
func (o *PostUpdatePasswordsParams) SetViewGroups(viewGroups *string) {
	o.ViewGroups = viewGroups
}

// WithViewGroupsRemove adds the viewGroupsRemove to the post update passwords params
func (o *PostUpdatePasswordsParams) WithViewGroupsRemove(viewGroupsRemove *string) *PostUpdatePasswordsParams {
	o.SetViewGroupsRemove(viewGroupsRemove)
	return o
}

// SetViewGroupsRemove adds the viewGroupsRemove to the post update passwords params
func (o *PostUpdatePasswordsParams) SetViewGroupsRemove(viewGroupsRemove *string) {
	o.ViewGroupsRemove = viewGroupsRemove
}

// WithViewUsers adds the viewUsers to the post update passwords params
func (o *PostUpdatePasswordsParams) WithViewUsers(viewUsers *string) *PostUpdatePasswordsParams {
	o.SetViewUsers(viewUsers)
	return o
}

// SetViewUsers adds the viewUsers to the post update passwords params
func (o *PostUpdatePasswordsParams) SetViewUsers(viewUsers *string) {
	o.ViewUsers = viewUsers
}

// WithViewUsersRemove adds the viewUsersRemove to the post update passwords params
func (o *PostUpdatePasswordsParams) WithViewUsersRemove(viewUsersRemove *string) *PostUpdatePasswordsParams {
	o.SetViewUsersRemove(viewUsersRemove)
	return o
}

// SetViewUsersRemove adds the viewUsersRemove to the post update passwords params
func (o *PostUpdatePasswordsParams) SetViewUsersRemove(viewUsersRemove *string) {
	o.ViewUsersRemove = viewUsersRemove
}

// WriteToRequest writes these params to a swagger request
func (o *PostUpdatePasswordsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Appcomps != nil {

		// form param appcomps
		var frAppcomps string
		if o.Appcomps != nil {
			frAppcomps = *o.Appcomps
		}
		fAppcomps := frAppcomps
		if fAppcomps != "" {
			if err := r.SetFormParam("appcomps", fAppcomps); err != nil {
				return err
			}
		}

	}

	if o.Category != nil {

		// form param category
		var frCategory string
		if o.Category != nil {
			frCategory = *o.Category
		}
		fCategory := frCategory
		if fCategory != "" {
			if err := r.SetFormParam("category", fCategory); err != nil {
				return err
			}
		}

	}

	if o.DaysBeforeExpiry != nil {

		// form param days_before_expiry
		var frDaysBeforeExpiry string
		if o.DaysBeforeExpiry != nil {
			frDaysBeforeExpiry = *o.DaysBeforeExpiry
		}
		fDaysBeforeExpiry := frDaysBeforeExpiry
		if fDaysBeforeExpiry != "" {
			if err := r.SetFormParam("days_before_expiry", fDaysBeforeExpiry); err != nil {
				return err
			}
		}

	}

	if o.Devices != nil {

		// form param devices
		var frDevices string
		if o.Devices != nil {
			frDevices = *o.Devices
		}
		fDevices := frDevices
		if fDevices != "" {
			if err := r.SetFormParam("devices", fDevices); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// form param id
		var frID string
		if o.ID != nil {
			frID = *o.ID
		}
		fID := frID
		if fID != "" {
			if err := r.SetFormParam("id", fID); err != nil {
				return err
			}
		}

	}

	if o.Label != nil {

		// form param label
		var frLabel string
		if o.Label != nil {
			frLabel = *o.Label
		}
		fLabel := frLabel
		if fLabel != "" {
			if err := r.SetFormParam("label", fLabel); err != nil {
				return err
			}
		}

	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if o.Password != nil {

		// form param password
		var frPassword string
		if o.Password != nil {
			frPassword = *o.Password
		}
		fPassword := frPassword
		if fPassword != "" {
			if err := r.SetFormParam("password", fPassword); err != nil {
				return err
			}
		}

	}

	if o.UseOnlyGroupsRemove != nil {

		// form param use_only_groups_remove
		var frUseOnlyGroupsRemove string
		if o.UseOnlyGroupsRemove != nil {
			frUseOnlyGroupsRemove = *o.UseOnlyGroupsRemove
		}
		fUseOnlyGroupsRemove := frUseOnlyGroupsRemove
		if fUseOnlyGroupsRemove != "" {
			if err := r.SetFormParam("use_only_groups_remove", fUseOnlyGroupsRemove); err != nil {
				return err
			}
		}

	}

	if o.UseOnlyUsersRemove != nil {

		// form param use_only_users_remove
		var frUseOnlyUsersRemove string
		if o.UseOnlyUsersRemove != nil {
			frUseOnlyUsersRemove = *o.UseOnlyUsersRemove
		}
		fUseOnlyUsersRemove := frUseOnlyUsersRemove
		if fUseOnlyUsersRemove != "" {
			if err := r.SetFormParam("use_only_users_remove", fUseOnlyUsersRemove); err != nil {
				return err
			}
		}

	}

	if o.Username != nil {

		// form param username
		var frUsername string
		if o.Username != nil {
			frUsername = *o.Username
		}
		fUsername := frUsername
		if fUsername != "" {
			if err := r.SetFormParam("username", fUsername); err != nil {
				return err
			}
		}

	}

	if o.ViewEditGroupsRemove != nil {

		// form param view_edit_groups_remove
		var frViewEditGroupsRemove string
		if o.ViewEditGroupsRemove != nil {
			frViewEditGroupsRemove = *o.ViewEditGroupsRemove
		}
		fViewEditGroupsRemove := frViewEditGroupsRemove
		if fViewEditGroupsRemove != "" {
			if err := r.SetFormParam("view_edit_groups_remove", fViewEditGroupsRemove); err != nil {
				return err
			}
		}

	}

	if o.ViewEditUsers != nil {

		// form param view_edit_users
		var frViewEditUsers string
		if o.ViewEditUsers != nil {
			frViewEditUsers = *o.ViewEditUsers
		}
		fViewEditUsers := frViewEditUsers
		if fViewEditUsers != "" {
			if err := r.SetFormParam("view_edit_users", fViewEditUsers); err != nil {
				return err
			}
		}

	}

	if o.ViewEditUsersRemove != nil {

		// form param view_edit_users_remove
		var frViewEditUsersRemove string
		if o.ViewEditUsersRemove != nil {
			frViewEditUsersRemove = *o.ViewEditUsersRemove
		}
		fViewEditUsersRemove := frViewEditUsersRemove
		if fViewEditUsersRemove != "" {
			if err := r.SetFormParam("view_edit_users_remove", fViewEditUsersRemove); err != nil {
				return err
			}
		}

	}

	if o.ViewGroups != nil {

		// form param view_groups
		var frViewGroups string
		if o.ViewGroups != nil {
			frViewGroups = *o.ViewGroups
		}
		fViewGroups := frViewGroups
		if fViewGroups != "" {
			if err := r.SetFormParam("view_groups", fViewGroups); err != nil {
				return err
			}
		}

	}

	if o.ViewGroupsRemove != nil {

		// form param view_groups_remove
		var frViewGroupsRemove string
		if o.ViewGroupsRemove != nil {
			frViewGroupsRemove = *o.ViewGroupsRemove
		}
		fViewGroupsRemove := frViewGroupsRemove
		if fViewGroupsRemove != "" {
			if err := r.SetFormParam("view_groups_remove", fViewGroupsRemove); err != nil {
				return err
			}
		}

	}

	if o.ViewUsers != nil {

		// form param view_users
		var frViewUsers string
		if o.ViewUsers != nil {
			frViewUsers = *o.ViewUsers
		}
		fViewUsers := frViewUsers
		if fViewUsers != "" {
			if err := r.SetFormParam("view_users", fViewUsers); err != nil {
				return err
			}
		}

	}

	if o.ViewUsersRemove != nil {

		// form param view_users_remove
		var frViewUsersRemove string
		if o.ViewUsersRemove != nil {
			frViewUsersRemove = *o.ViewUsersRemove
		}
		fViewUsersRemove := frViewUsersRemove
		if fViewUsersRemove != "" {
			if err := r.SetFormParam("view_users_remove", fViewUsersRemove); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
