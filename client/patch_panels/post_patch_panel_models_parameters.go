// Code generated by go-swagger; DO NOT EDIT.

package patch_panels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostPatchPanelModelsParams creates a new PostPatchPanelModelsParams object
// with the default values initialized.
func NewPostPatchPanelModelsParams() *PostPatchPanelModelsParams {
	var (
		typeVarDefault = string("singluar")
	)
	return &PostPatchPanelModelsParams{
		Type: &typeVarDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPostPatchPanelModelsParamsWithTimeout creates a new PostPatchPanelModelsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostPatchPanelModelsParamsWithTimeout(timeout time.Duration) *PostPatchPanelModelsParams {
	var (
		typeVarDefault = string("singluar")
	)
	return &PostPatchPanelModelsParams{
		Type: &typeVarDefault,

		timeout: timeout,
	}
}

// NewPostPatchPanelModelsParamsWithContext creates a new PostPatchPanelModelsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostPatchPanelModelsParamsWithContext(ctx context.Context) *PostPatchPanelModelsParams {
	var (
		typeDefault = string("singluar")
	)
	return &PostPatchPanelModelsParams{
		Type: &typeDefault,

		Context: ctx,
	}
}

// NewPostPatchPanelModelsParamsWithHTTPClient creates a new PostPatchPanelModelsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostPatchPanelModelsParamsWithHTTPClient(client *http.Client) *PostPatchPanelModelsParams {
	var (
		typeDefault = string("singluar")
	)
	return &PostPatchPanelModelsParams{
		Type:       &typeDefault,
		HTTPClient: client,
	}
}

/*PostPatchPanelModelsParams contains all the parameters to send to the API endpoint
for the post patch panel models operation typically these are written to a http.Request
*/
type PostPatchPanelModelsParams struct {

	/*Imgfile
	  name of the image file (Added in v5.8.2). Use instead of imgfile_id

	*/
	Imgfile *string
	/*ImgfileID
	  image file id. You can see these from Tools > Import > Hardware Import for now.

	*/
	ImgfileID *string
	/*Manufacturer
	  name of the hardware/software manufacturer.

	*/
	Manufacturer *string
	/*ModulePosition
	  for Modular Patch Panel Models. Possible values are horizontal or vertical (Added in v5.8.2)

	*/
	ModulePosition *string
	/*Name
	  Name of the patch panel model you want to edit or create.

	*/
	Name *string
	/*NumberOfPorts
	  number of ports. required for creating a new patch panel type singular. Ignored for patch panel type modular

	*/
	NumberOfPorts *string
	/*NumberOfPortsInRow
	  number of ports in a row. required for creating a new patch panel type singular. Ignored for patch panel type modular

	*/
	NumberOfPortsInRow *string
	/*PairedPorts*/
	PairedPorts *string
	/*PatchPanelModelID
	  Patch Panel Model ID or UI Tools > Export > Patch Panel Model

	*/
	PatchPanelModelID *string
	/*PortType
	  name of the port type. created if it doesn't exist already

	*/
	PortType *string
	/*Type*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithTimeout(timeout time.Duration) *PostPatchPanelModelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithContext(ctx context.Context) *PostPatchPanelModelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithHTTPClient(client *http.Client) *PostPatchPanelModelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithImgfile adds the imgfile to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithImgfile(imgfile *string) *PostPatchPanelModelsParams {
	o.SetImgfile(imgfile)
	return o
}

// SetImgfile adds the imgfile to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetImgfile(imgfile *string) {
	o.Imgfile = imgfile
}

// WithImgfileID adds the imgfileID to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithImgfileID(imgfileID *string) *PostPatchPanelModelsParams {
	o.SetImgfileID(imgfileID)
	return o
}

// SetImgfileID adds the imgfileId to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetImgfileID(imgfileID *string) {
	o.ImgfileID = imgfileID
}

// WithManufacturer adds the manufacturer to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithManufacturer(manufacturer *string) *PostPatchPanelModelsParams {
	o.SetManufacturer(manufacturer)
	return o
}

// SetManufacturer adds the manufacturer to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetManufacturer(manufacturer *string) {
	o.Manufacturer = manufacturer
}

// WithModulePosition adds the modulePosition to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithModulePosition(modulePosition *string) *PostPatchPanelModelsParams {
	o.SetModulePosition(modulePosition)
	return o
}

// SetModulePosition adds the modulePosition to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetModulePosition(modulePosition *string) {
	o.ModulePosition = modulePosition
}

// WithName adds the name to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithName(name *string) *PostPatchPanelModelsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetName(name *string) {
	o.Name = name
}

// WithNumberOfPorts adds the numberOfPorts to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithNumberOfPorts(numberOfPorts *string) *PostPatchPanelModelsParams {
	o.SetNumberOfPorts(numberOfPorts)
	return o
}

// SetNumberOfPorts adds the numberOfPorts to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetNumberOfPorts(numberOfPorts *string) {
	o.NumberOfPorts = numberOfPorts
}

// WithNumberOfPortsInRow adds the numberOfPortsInRow to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithNumberOfPortsInRow(numberOfPortsInRow *string) *PostPatchPanelModelsParams {
	o.SetNumberOfPortsInRow(numberOfPortsInRow)
	return o
}

// SetNumberOfPortsInRow adds the numberOfPortsInRow to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetNumberOfPortsInRow(numberOfPortsInRow *string) {
	o.NumberOfPortsInRow = numberOfPortsInRow
}

// WithPairedPorts adds the pairedPorts to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithPairedPorts(pairedPorts *string) *PostPatchPanelModelsParams {
	o.SetPairedPorts(pairedPorts)
	return o
}

// SetPairedPorts adds the pairedPorts to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetPairedPorts(pairedPorts *string) {
	o.PairedPorts = pairedPorts
}

// WithPatchPanelModelID adds the patchPanelModelID to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithPatchPanelModelID(patchPanelModelID *string) *PostPatchPanelModelsParams {
	o.SetPatchPanelModelID(patchPanelModelID)
	return o
}

// SetPatchPanelModelID adds the patchPanelModelId to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetPatchPanelModelID(patchPanelModelID *string) {
	o.PatchPanelModelID = patchPanelModelID
}

// WithPortType adds the portType to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithPortType(portType *string) *PostPatchPanelModelsParams {
	o.SetPortType(portType)
	return o
}

// SetPortType adds the portType to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetPortType(portType *string) {
	o.PortType = portType
}

// WithType adds the typeVar to the post patch panel models params
func (o *PostPatchPanelModelsParams) WithType(typeVar *string) *PostPatchPanelModelsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the post patch panel models params
func (o *PostPatchPanelModelsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *PostPatchPanelModelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Imgfile != nil {

		// form param imgfile
		var frImgfile string
		if o.Imgfile != nil {
			frImgfile = *o.Imgfile
		}
		fImgfile := frImgfile
		if fImgfile != "" {
			if err := r.SetFormParam("imgfile", fImgfile); err != nil {
				return err
			}
		}

	}

	if o.ImgfileID != nil {

		// form param imgfile_id
		var frImgfileID string
		if o.ImgfileID != nil {
			frImgfileID = *o.ImgfileID
		}
		fImgfileID := frImgfileID
		if fImgfileID != "" {
			if err := r.SetFormParam("imgfile_id", fImgfileID); err != nil {
				return err
			}
		}

	}

	if o.Manufacturer != nil {

		// form param manufacturer
		var frManufacturer string
		if o.Manufacturer != nil {
			frManufacturer = *o.Manufacturer
		}
		fManufacturer := frManufacturer
		if fManufacturer != "" {
			if err := r.SetFormParam("manufacturer", fManufacturer); err != nil {
				return err
			}
		}

	}

	if o.ModulePosition != nil {

		// form param module_position
		var frModulePosition string
		if o.ModulePosition != nil {
			frModulePosition = *o.ModulePosition
		}
		fModulePosition := frModulePosition
		if fModulePosition != "" {
			if err := r.SetFormParam("module_position", fModulePosition); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}

	}

	if o.NumberOfPorts != nil {

		// form param number_of_ports
		var frNumberOfPorts string
		if o.NumberOfPorts != nil {
			frNumberOfPorts = *o.NumberOfPorts
		}
		fNumberOfPorts := frNumberOfPorts
		if fNumberOfPorts != "" {
			if err := r.SetFormParam("number_of_ports", fNumberOfPorts); err != nil {
				return err
			}
		}

	}

	if o.NumberOfPortsInRow != nil {

		// form param number_of_ports_in_row
		var frNumberOfPortsInRow string
		if o.NumberOfPortsInRow != nil {
			frNumberOfPortsInRow = *o.NumberOfPortsInRow
		}
		fNumberOfPortsInRow := frNumberOfPortsInRow
		if fNumberOfPortsInRow != "" {
			if err := r.SetFormParam("number_of_ports_in_row", fNumberOfPortsInRow); err != nil {
				return err
			}
		}

	}

	if o.PairedPorts != nil {

		// form param paired_ports
		var frPairedPorts string
		if o.PairedPorts != nil {
			frPairedPorts = *o.PairedPorts
		}
		fPairedPorts := frPairedPorts
		if fPairedPorts != "" {
			if err := r.SetFormParam("paired_ports", fPairedPorts); err != nil {
				return err
			}
		}

	}

	if o.PatchPanelModelID != nil {

		// form param patch_panel_model_id
		var frPatchPanelModelID string
		if o.PatchPanelModelID != nil {
			frPatchPanelModelID = *o.PatchPanelModelID
		}
		fPatchPanelModelID := frPatchPanelModelID
		if fPatchPanelModelID != "" {
			if err := r.SetFormParam("patch_panel_model_id", fPatchPanelModelID); err != nil {
				return err
			}
		}

	}

	if o.PortType != nil {

		// form param port_type
		var frPortType string
		if o.PortType != nil {
			frPortType = *o.PortType
		}
		fPortType := frPortType
		if fPortType != "" {
			if err := r.SetFormParam("port_type", fPortType); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// form param type
		var frType string
		if o.Type != nil {
			frType = *o.Type
		}
		fType := frType
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
