// Code generated by go-swagger; DO NOT EDIT.

package patch_panels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new patch panels API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for patch panels API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPatchPanelID(params *GetPatchPanelIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPatchPanelIDOK, error)

	GetPatchPanelModels(params *GetPatchPanelModelsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPatchPanelModelsOK, error)

	GetPatchPanelModuleModels(params *GetPatchPanelModuleModelsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPatchPanelModuleModelsOK, error)

	GetPatchPanelPortsPatchPanelID(params *GetPatchPanelPortsPatchPanelIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPatchPanelPortsPatchPanelIDOK, error)

	PostPatchPanelModels(params *PostPatchPanelModelsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPatchPanelModelsOK, error)

	PostPatchPanelModuleModels(params *PostPatchPanelModuleModelsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPatchPanelModuleModelsOK, error)

	PostPatchPanelPortsPatchPanelID(params *PostPatchPanelPortsPatchPanelIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostPatchPanelPortsPatchPanelIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPatchPanelID gets patch panel details by ID

  Retrieve detailed information about a specific Patch Panel by Patch Panel ID. This also includes end point connections.
*/
func (a *Client) GetPatchPanelID(params *GetPatchPanelIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPatchPanelIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatchPanelIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPatch_panelID",
		Method:             "GET",
		PathPattern:        "/api/1.0/patch_panel/{ID}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPatchPanelIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatchPanelIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPatch_panelID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPatchPanelModels retrieves all patch panel models

  Get all Patch Panel Models
*/
func (a *Client) GetPatchPanelModels(params *GetPatchPanelModelsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPatchPanelModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatchPanelModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPatch_panel_models",
		Method:             "GET",
		PathPattern:        "/api/1.0/patch_panel_models/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPatchPanelModelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatchPanelModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPatch_panel_models: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPatchPanelModuleModels retrieves all patch panel module models

  Get all Patch Panel Module Models
*/
func (a *Client) GetPatchPanelModuleModels(params *GetPatchPanelModuleModelsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPatchPanelModuleModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatchPanelModuleModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPatch_panel_module_models",
		Method:             "GET",
		PathPattern:        "/api/1.0/patch_panel_module_models/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPatchPanelModuleModelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatchPanelModuleModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPatch_panel_module_models: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPatchPanelPortsPatchPanelID retrieves patch panel ports for specified patch panel

  Get all Patch Panel Ports
*/
func (a *Client) GetPatchPanelPortsPatchPanelID(params *GetPatchPanelPortsPatchPanelIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPatchPanelPortsPatchPanelIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatchPanelPortsPatchPanelIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPatch_panel_portsPatch_panel_id",
		Method:             "GET",
		PathPattern:        "/api/1.0/patch_panel_ports/{patch_panel_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPatchPanelPortsPatchPanelIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPatchPanelPortsPatchPanelIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPatch_panel_portsPatch_panel_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPatchPanelModels creates patch panel model

  Create/Update Patch Panel Model. Required parameters: <ul><li>patch_panel_model_id <b>OR</b> name</li>
*/
func (a *Client) PostPatchPanelModels(params *PostPatchPanelModelsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPatchPanelModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatchPanelModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPatch_panel_models",
		Method:             "POST",
		PathPattern:        "/api/1.0/patch_panel_models/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPatchPanelModelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPatchPanelModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postPatch_panel_models: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPatchPanelModuleModels creates update patch panel module model

  Create/Update Patch Panel Module Model. Required parameters: <ul><li>patch_panel_module_model_id <b>OR</b> name</li>
*/
func (a *Client) PostPatchPanelModuleModels(params *PostPatchPanelModuleModelsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPatchPanelModuleModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatchPanelModuleModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPatch_panel_module_models",
		Method:             "POST",
		PathPattern:        "/api/1.0/patch_panel_module_models/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPatchPanelModuleModelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPatchPanelModuleModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postPatch_panel_module_models: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPatchPanelPortsPatchPanelID updates patch panel ports

  Update Patch Panel Ports. Requires the following parameters: <ul><li>patch_panel_id <b>OR</b> patch_panel</li> <li>number</li>
*/
func (a *Client) PostPatchPanelPortsPatchPanelID(params *PostPatchPanelPortsPatchPanelIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostPatchPanelPortsPatchPanelIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatchPanelPortsPatchPanelIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPatch_panel_portsPatch_panel_id",
		Method:             "POST",
		PathPattern:        "/api/1.0/patch_panel_ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPatchPanelPortsPatchPanelIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPatchPanelPortsPatchPanelIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postPatch_panel_portsPatch_panel_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
