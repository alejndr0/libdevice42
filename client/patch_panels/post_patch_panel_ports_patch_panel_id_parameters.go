// Code generated by go-swagger; DO NOT EDIT.

package patch_panels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostPatchPanelPortsPatchPanelIDParams creates a new PostPatchPanelPortsPatchPanelIDParams object
// with the default values initialized.
func NewPostPatchPanelPortsPatchPanelIDParams() *PostPatchPanelPortsPatchPanelIDParams {
	var ()
	return &PostPatchPanelPortsPatchPanelIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostPatchPanelPortsPatchPanelIDParamsWithTimeout creates a new PostPatchPanelPortsPatchPanelIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostPatchPanelPortsPatchPanelIDParamsWithTimeout(timeout time.Duration) *PostPatchPanelPortsPatchPanelIDParams {
	var ()
	return &PostPatchPanelPortsPatchPanelIDParams{

		timeout: timeout,
	}
}

// NewPostPatchPanelPortsPatchPanelIDParamsWithContext creates a new PostPatchPanelPortsPatchPanelIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostPatchPanelPortsPatchPanelIDParamsWithContext(ctx context.Context) *PostPatchPanelPortsPatchPanelIDParams {
	var ()
	return &PostPatchPanelPortsPatchPanelIDParams{

		Context: ctx,
	}
}

// NewPostPatchPanelPortsPatchPanelIDParamsWithHTTPClient creates a new PostPatchPanelPortsPatchPanelIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostPatchPanelPortsPatchPanelIDParamsWithHTTPClient(client *http.Client) *PostPatchPanelPortsPatchPanelIDParams {
	var ()
	return &PostPatchPanelPortsPatchPanelIDParams{
		HTTPClient: client,
	}
}

/*PostPatchPanelPortsPatchPanelIDParams contains all the parameters to send to the API endpoint
for the post patch panel ports patch panel id operation typically these are written to a http.Request
*/
type PostPatchPanelPortsPatchPanelIDParams struct {

	/*BackConnectionID
	  ID for the back connection port. Available via GET at /api/api/1.0/patch_panel_ports// or Tools > Export > Patch Panel Port

	*/
	BackConnectionID *string
	/*BackPatchPanel
	  Name of the back patch panel - if a patch panel port is connected in back (Added in v5.8.2)

	*/
	BackPatchPanel *string
	/*BackPatchPanelID
	  ID of the back patch panel - if a patch panel port is connected in back (Added in v5.8.2)

	*/
	BackPatchPanelID *string
	/*BackPort
	  Number of the port on the back patch panel - if a patch panel port is connected in back (Added in v5.8.2)

	*/
	BackPort *string
	/*BackSwitch
	  If back connection type is switch, use switch and switchport names in combination.

	*/
	BackSwitch *string
	/*BackSwitchport
	  Use if back connection type is switch - use in combination with back_switch.

	*/
	BackSwitchport *string
	/*BackSwitchportID
	  Used if back connection type is switch.

	*/
	BackSwitchportID *string
	/*CableType
	  named value of the cable type. Must already exist.

	*/
	CableType *string
	/*ClearBack
	  “yes” will clear back connection on port

	*/
	ClearBack *string
	/*ClearFront
	  “yes” will clear front connection for port

	*/
	ClearFront *string
	/*FrontPatchPanel
	  Name of the front patch panel - if a patch panel port is connected in front (Added in v5.8.2)

	*/
	FrontPatchPanel *string
	/*FrontPatchPanelID
	  Name of the front patch panel - if a patch panel port is connected in front (Added in v5.8.2)

	*/
	FrontPatchPanelID *string
	/*FrontPort
	  Number of the port on the front patch panel - if a patch panel port is connected in front (Added in v5.8.2)

	*/
	FrontPort *string
	/*Label*/
	Label *string
	/*MacAddress
	  mac_address or hwaddress

	*/
	MacAddress *string
	/*MacID
	  mac_id references port_id value. mac_id available via GET at /api/api/1.0/macs/ or Tools > Export > MAC Address * Please see note below

	*/
	MacID *string
	/*ModuleSlot
	  change patch panel port for a certain module slot # (Added in v5.8.2)

	*/
	ModuleSlot *string
	/*Number
	  Port number for the patch panel

	*/
	Number string
	/*ObjLabel1
	  object label 1

	*/
	ObjLabel1 *string
	/*ObjLabel2
	  object label 2

	*/
	ObjLabel2 *string
	/*PatchPanel
	  Must be a unique asset name for this to work (Added in v5.8.2)

	*/
	PatchPanel *string
	/*PatchPanelID
	  Patch panel id

	*/
	PatchPanelID *string
	/*PatchPanelPortID
	  Or use front_patch_panel and front_port combination

	*/
	PatchPanelPortID *string
	/*Switch
	  Must be used with switchport if switchport_id is not used.

	*/
	Switch *string
	/*Switchport
	  Must be used with switch if switchport_id is not used.

	*/
	Switchport *string
	/*SwitchportID
	  ID for the switch port. Available via GET at /api/api/1.0/switchports/ or Tools > Export > Switch Port

	*/
	SwitchportID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithTimeout(timeout time.Duration) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithContext(ctx context.Context) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithHTTPClient(client *http.Client) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBackConnectionID adds the backConnectionID to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithBackConnectionID(backConnectionID *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetBackConnectionID(backConnectionID)
	return o
}

// SetBackConnectionID adds the backConnectionId to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetBackConnectionID(backConnectionID *string) {
	o.BackConnectionID = backConnectionID
}

// WithBackPatchPanel adds the backPatchPanel to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithBackPatchPanel(backPatchPanel *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetBackPatchPanel(backPatchPanel)
	return o
}

// SetBackPatchPanel adds the backPatchPanel to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetBackPatchPanel(backPatchPanel *string) {
	o.BackPatchPanel = backPatchPanel
}

// WithBackPatchPanelID adds the backPatchPanelID to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithBackPatchPanelID(backPatchPanelID *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetBackPatchPanelID(backPatchPanelID)
	return o
}

// SetBackPatchPanelID adds the backPatchPanelId to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetBackPatchPanelID(backPatchPanelID *string) {
	o.BackPatchPanelID = backPatchPanelID
}

// WithBackPort adds the backPort to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithBackPort(backPort *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetBackPort(backPort)
	return o
}

// SetBackPort adds the backPort to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetBackPort(backPort *string) {
	o.BackPort = backPort
}

// WithBackSwitch adds the backSwitch to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithBackSwitch(backSwitch *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetBackSwitch(backSwitch)
	return o
}

// SetBackSwitch adds the backSwitch to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetBackSwitch(backSwitch *string) {
	o.BackSwitch = backSwitch
}

// WithBackSwitchport adds the backSwitchport to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithBackSwitchport(backSwitchport *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetBackSwitchport(backSwitchport)
	return o
}

// SetBackSwitchport adds the backSwitchport to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetBackSwitchport(backSwitchport *string) {
	o.BackSwitchport = backSwitchport
}

// WithBackSwitchportID adds the backSwitchportID to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithBackSwitchportID(backSwitchportID *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetBackSwitchportID(backSwitchportID)
	return o
}

// SetBackSwitchportID adds the backSwitchportId to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetBackSwitchportID(backSwitchportID *string) {
	o.BackSwitchportID = backSwitchportID
}

// WithCableType adds the cableType to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithCableType(cableType *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetCableType(cableType)
	return o
}

// SetCableType adds the cableType to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetCableType(cableType *string) {
	o.CableType = cableType
}

// WithClearBack adds the clearBack to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithClearBack(clearBack *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetClearBack(clearBack)
	return o
}

// SetClearBack adds the clearBack to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetClearBack(clearBack *string) {
	o.ClearBack = clearBack
}

// WithClearFront adds the clearFront to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithClearFront(clearFront *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetClearFront(clearFront)
	return o
}

// SetClearFront adds the clearFront to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetClearFront(clearFront *string) {
	o.ClearFront = clearFront
}

// WithFrontPatchPanel adds the frontPatchPanel to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithFrontPatchPanel(frontPatchPanel *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetFrontPatchPanel(frontPatchPanel)
	return o
}

// SetFrontPatchPanel adds the frontPatchPanel to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetFrontPatchPanel(frontPatchPanel *string) {
	o.FrontPatchPanel = frontPatchPanel
}

// WithFrontPatchPanelID adds the frontPatchPanelID to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithFrontPatchPanelID(frontPatchPanelID *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetFrontPatchPanelID(frontPatchPanelID)
	return o
}

// SetFrontPatchPanelID adds the frontPatchPanelId to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetFrontPatchPanelID(frontPatchPanelID *string) {
	o.FrontPatchPanelID = frontPatchPanelID
}

// WithFrontPort adds the frontPort to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithFrontPort(frontPort *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetFrontPort(frontPort)
	return o
}

// SetFrontPort adds the frontPort to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetFrontPort(frontPort *string) {
	o.FrontPort = frontPort
}

// WithLabel adds the label to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithLabel(label *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetLabel(label *string) {
	o.Label = label
}

// WithMacAddress adds the macAddress to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithMacAddress(macAddress *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetMacAddress(macAddress)
	return o
}

// SetMacAddress adds the macAddress to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetMacAddress(macAddress *string) {
	o.MacAddress = macAddress
}

// WithMacID adds the macID to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithMacID(macID *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetMacID(macID)
	return o
}

// SetMacID adds the macId to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetMacID(macID *string) {
	o.MacID = macID
}

// WithModuleSlot adds the moduleSlot to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithModuleSlot(moduleSlot *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetModuleSlot(moduleSlot)
	return o
}

// SetModuleSlot adds the moduleSlot to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetModuleSlot(moduleSlot *string) {
	o.ModuleSlot = moduleSlot
}

// WithNumber adds the number to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithNumber(number string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetNumber(number string) {
	o.Number = number
}

// WithObjLabel1 adds the objLabel1 to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithObjLabel1(objLabel1 *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetObjLabel1(objLabel1)
	return o
}

// SetObjLabel1 adds the objLabel1 to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetObjLabel1(objLabel1 *string) {
	o.ObjLabel1 = objLabel1
}

// WithObjLabel2 adds the objLabel2 to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithObjLabel2(objLabel2 *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetObjLabel2(objLabel2)
	return o
}

// SetObjLabel2 adds the objLabel2 to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetObjLabel2(objLabel2 *string) {
	o.ObjLabel2 = objLabel2
}

// WithPatchPanel adds the patchPanel to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithPatchPanel(patchPanel *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetPatchPanel(patchPanel)
	return o
}

// SetPatchPanel adds the patchPanel to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetPatchPanel(patchPanel *string) {
	o.PatchPanel = patchPanel
}

// WithPatchPanelID adds the patchPanelID to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithPatchPanelID(patchPanelID *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetPatchPanelID(patchPanelID)
	return o
}

// SetPatchPanelID adds the patchPanelId to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetPatchPanelID(patchPanelID *string) {
	o.PatchPanelID = patchPanelID
}

// WithPatchPanelPortID adds the patchPanelPortID to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithPatchPanelPortID(patchPanelPortID *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetPatchPanelPortID(patchPanelPortID)
	return o
}

// SetPatchPanelPortID adds the patchPanelPortId to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetPatchPanelPortID(patchPanelPortID *string) {
	o.PatchPanelPortID = patchPanelPortID
}

// WithSwitch adds the switchVar to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithSwitch(switchVar *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetSwitch(switchVar)
	return o
}

// SetSwitch adds the switch to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetSwitch(switchVar *string) {
	o.Switch = switchVar
}

// WithSwitchport adds the switchport to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithSwitchport(switchport *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetSwitchport(switchport)
	return o
}

// SetSwitchport adds the switchport to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetSwitchport(switchport *string) {
	o.Switchport = switchport
}

// WithSwitchportID adds the switchportID to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) WithSwitchportID(switchportID *string) *PostPatchPanelPortsPatchPanelIDParams {
	o.SetSwitchportID(switchportID)
	return o
}

// SetSwitchportID adds the switchportId to the post patch panel ports patch panel id params
func (o *PostPatchPanelPortsPatchPanelIDParams) SetSwitchportID(switchportID *string) {
	o.SwitchportID = switchportID
}

// WriteToRequest writes these params to a swagger request
func (o *PostPatchPanelPortsPatchPanelIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BackConnectionID != nil {

		// query param back_connection_id
		var qrBackConnectionID string
		if o.BackConnectionID != nil {
			qrBackConnectionID = *o.BackConnectionID
		}
		qBackConnectionID := qrBackConnectionID
		if qBackConnectionID != "" {
			if err := r.SetQueryParam("back_connection_id", qBackConnectionID); err != nil {
				return err
			}
		}

	}

	if o.BackPatchPanel != nil {

		// form param back_patch_panel
		var frBackPatchPanel string
		if o.BackPatchPanel != nil {
			frBackPatchPanel = *o.BackPatchPanel
		}
		fBackPatchPanel := frBackPatchPanel
		if fBackPatchPanel != "" {
			if err := r.SetFormParam("back_patch_panel", fBackPatchPanel); err != nil {
				return err
			}
		}

	}

	if o.BackPatchPanelID != nil {

		// form param back_patch_panel_id
		var frBackPatchPanelID string
		if o.BackPatchPanelID != nil {
			frBackPatchPanelID = *o.BackPatchPanelID
		}
		fBackPatchPanelID := frBackPatchPanelID
		if fBackPatchPanelID != "" {
			if err := r.SetFormParam("back_patch_panel_id", fBackPatchPanelID); err != nil {
				return err
			}
		}

	}

	if o.BackPort != nil {

		// form param back_port
		var frBackPort string
		if o.BackPort != nil {
			frBackPort = *o.BackPort
		}
		fBackPort := frBackPort
		if fBackPort != "" {
			if err := r.SetFormParam("back_port", fBackPort); err != nil {
				return err
			}
		}

	}

	if o.BackSwitch != nil {

		// form param back_switch
		var frBackSwitch string
		if o.BackSwitch != nil {
			frBackSwitch = *o.BackSwitch
		}
		fBackSwitch := frBackSwitch
		if fBackSwitch != "" {
			if err := r.SetFormParam("back_switch", fBackSwitch); err != nil {
				return err
			}
		}

	}

	if o.BackSwitchport != nil {

		// form param back_switchport
		var frBackSwitchport string
		if o.BackSwitchport != nil {
			frBackSwitchport = *o.BackSwitchport
		}
		fBackSwitchport := frBackSwitchport
		if fBackSwitchport != "" {
			if err := r.SetFormParam("back_switchport", fBackSwitchport); err != nil {
				return err
			}
		}

	}

	if o.BackSwitchportID != nil {

		// form param back_switchport_id
		var frBackSwitchportID string
		if o.BackSwitchportID != nil {
			frBackSwitchportID = *o.BackSwitchportID
		}
		fBackSwitchportID := frBackSwitchportID
		if fBackSwitchportID != "" {
			if err := r.SetFormParam("back_switchport_id", fBackSwitchportID); err != nil {
				return err
			}
		}

	}

	if o.CableType != nil {

		// form param cable_type
		var frCableType string
		if o.CableType != nil {
			frCableType = *o.CableType
		}
		fCableType := frCableType
		if fCableType != "" {
			if err := r.SetFormParam("cable_type", fCableType); err != nil {
				return err
			}
		}

	}

	if o.ClearBack != nil {

		// form param clear_back
		var frClearBack string
		if o.ClearBack != nil {
			frClearBack = *o.ClearBack
		}
		fClearBack := frClearBack
		if fClearBack != "" {
			if err := r.SetFormParam("clear_back", fClearBack); err != nil {
				return err
			}
		}

	}

	if o.ClearFront != nil {

		// form param clear_front
		var frClearFront string
		if o.ClearFront != nil {
			frClearFront = *o.ClearFront
		}
		fClearFront := frClearFront
		if fClearFront != "" {
			if err := r.SetFormParam("clear_front", fClearFront); err != nil {
				return err
			}
		}

	}

	if o.FrontPatchPanel != nil {

		// form param front_patch_panel
		var frFrontPatchPanel string
		if o.FrontPatchPanel != nil {
			frFrontPatchPanel = *o.FrontPatchPanel
		}
		fFrontPatchPanel := frFrontPatchPanel
		if fFrontPatchPanel != "" {
			if err := r.SetFormParam("front_patch_panel", fFrontPatchPanel); err != nil {
				return err
			}
		}

	}

	if o.FrontPatchPanelID != nil {

		// form param front_patch_panel_id
		var frFrontPatchPanelID string
		if o.FrontPatchPanelID != nil {
			frFrontPatchPanelID = *o.FrontPatchPanelID
		}
		fFrontPatchPanelID := frFrontPatchPanelID
		if fFrontPatchPanelID != "" {
			if err := r.SetFormParam("front_patch_panel_id", fFrontPatchPanelID); err != nil {
				return err
			}
		}

	}

	if o.FrontPort != nil {

		// form param front_port
		var frFrontPort string
		if o.FrontPort != nil {
			frFrontPort = *o.FrontPort
		}
		fFrontPort := frFrontPort
		if fFrontPort != "" {
			if err := r.SetFormParam("front_port", fFrontPort); err != nil {
				return err
			}
		}

	}

	if o.Label != nil {

		// form param label
		var frLabel string
		if o.Label != nil {
			frLabel = *o.Label
		}
		fLabel := frLabel
		if fLabel != "" {
			if err := r.SetFormParam("label", fLabel); err != nil {
				return err
			}
		}

	}

	if o.MacAddress != nil {

		// form param mac_address
		var frMacAddress string
		if o.MacAddress != nil {
			frMacAddress = *o.MacAddress
		}
		fMacAddress := frMacAddress
		if fMacAddress != "" {
			if err := r.SetFormParam("mac_address", fMacAddress); err != nil {
				return err
			}
		}

	}

	if o.MacID != nil {

		// form param mac_id
		var frMacID string
		if o.MacID != nil {
			frMacID = *o.MacID
		}
		fMacID := frMacID
		if fMacID != "" {
			if err := r.SetFormParam("mac_id", fMacID); err != nil {
				return err
			}
		}

	}

	if o.ModuleSlot != nil {

		// form param module_slot
		var frModuleSlot string
		if o.ModuleSlot != nil {
			frModuleSlot = *o.ModuleSlot
		}
		fModuleSlot := frModuleSlot
		if fModuleSlot != "" {
			if err := r.SetFormParam("module_slot", fModuleSlot); err != nil {
				return err
			}
		}

	}

	// form param number
	frNumber := o.Number
	fNumber := frNumber
	if fNumber != "" {
		if err := r.SetFormParam("number", fNumber); err != nil {
			return err
		}
	}

	if o.ObjLabel1 != nil {

		// form param obj_label1
		var frObjLabel1 string
		if o.ObjLabel1 != nil {
			frObjLabel1 = *o.ObjLabel1
		}
		fObjLabel1 := frObjLabel1
		if fObjLabel1 != "" {
			if err := r.SetFormParam("obj_label1", fObjLabel1); err != nil {
				return err
			}
		}

	}

	if o.ObjLabel2 != nil {

		// form param obj_label2
		var frObjLabel2 string
		if o.ObjLabel2 != nil {
			frObjLabel2 = *o.ObjLabel2
		}
		fObjLabel2 := frObjLabel2
		if fObjLabel2 != "" {
			if err := r.SetFormParam("obj_label2", fObjLabel2); err != nil {
				return err
			}
		}

	}

	if o.PatchPanel != nil {

		// form param patch_panel
		var frPatchPanel string
		if o.PatchPanel != nil {
			frPatchPanel = *o.PatchPanel
		}
		fPatchPanel := frPatchPanel
		if fPatchPanel != "" {
			if err := r.SetFormParam("patch_panel", fPatchPanel); err != nil {
				return err
			}
		}

	}

	if o.PatchPanelID != nil {

		// form param patch_panel_id
		var frPatchPanelID string
		if o.PatchPanelID != nil {
			frPatchPanelID = *o.PatchPanelID
		}
		fPatchPanelID := frPatchPanelID
		if fPatchPanelID != "" {
			if err := r.SetFormParam("patch_panel_id", fPatchPanelID); err != nil {
				return err
			}
		}

	}

	if o.PatchPanelPortID != nil {

		// form param patch_panel_port_id
		var frPatchPanelPortID string
		if o.PatchPanelPortID != nil {
			frPatchPanelPortID = *o.PatchPanelPortID
		}
		fPatchPanelPortID := frPatchPanelPortID
		if fPatchPanelPortID != "" {
			if err := r.SetFormParam("patch_panel_port_id", fPatchPanelPortID); err != nil {
				return err
			}
		}

	}

	if o.Switch != nil {

		// form param switch
		var frSwitch string
		if o.Switch != nil {
			frSwitch = *o.Switch
		}
		fSwitch := frSwitch
		if fSwitch != "" {
			if err := r.SetFormParam("switch", fSwitch); err != nil {
				return err
			}
		}

	}

	if o.Switchport != nil {

		// form param switchport
		var frSwitchport string
		if o.Switchport != nil {
			frSwitchport = *o.Switchport
		}
		fSwitchport := frSwitchport
		if fSwitchport != "" {
			if err := r.SetFormParam("switchport", fSwitchport); err != nil {
				return err
			}
		}

	}

	if o.SwitchportID != nil {

		// form param switchport_id
		var frSwitchportID string
		if o.SwitchportID != nil {
			frSwitchportID = *o.SwitchportID
		}
		fSwitchportID := frSwitchportID
		if fSwitchportID != "" {
			if err := r.SetFormParam("switchport_id", fSwitchportID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
