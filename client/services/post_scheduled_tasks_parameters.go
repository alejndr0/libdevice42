// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostScheduledTasksParams creates a new PostScheduledTasksParams object
// with the default values initialized.
func NewPostScheduledTasksParams() *PostScheduledTasksParams {
	var ()
	return &PostScheduledTasksParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostScheduledTasksParamsWithTimeout creates a new PostScheduledTasksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostScheduledTasksParamsWithTimeout(timeout time.Duration) *PostScheduledTasksParams {
	var ()
	return &PostScheduledTasksParams{

		timeout: timeout,
	}
}

// NewPostScheduledTasksParamsWithContext creates a new PostScheduledTasksParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostScheduledTasksParamsWithContext(ctx context.Context) *PostScheduledTasksParams {
	var ()
	return &PostScheduledTasksParams{

		Context: ctx,
	}
}

// NewPostScheduledTasksParamsWithHTTPClient creates a new PostScheduledTasksParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostScheduledTasksParamsWithHTTPClient(client *http.Client) *PostScheduledTasksParams {
	var ()
	return &PostScheduledTasksParams{
		HTTPClient: client,
	}
}

/*PostScheduledTasksParams contains all the parameters to send to the API endpoint
for the post scheduled tasks operation typically these are written to a http.Request
*/
type PostScheduledTasksParams struct {

	/*Arguments
	  arguments

	*/
	Arguments *string
	/*AtLogon
	  only for schedule based services where startmode = 'Scheduled'

	*/
	AtLogon *string
	/*AtStartup
	  only for schedule based services where startmode = 'Scheduled'

	*/
	AtStartup *string
	/*Caption
	  caption

	*/
	Caption string
	/*DayOfMonth
	  only for schedule based services where startmode = 'Scheduled'

	*/
	DayOfMonth *string
	/*DayOfWeek
	  only for schedule based services where startmode = 'Scheduled'

	*/
	DayOfWeek *string
	/*Days
	  only for schedule based services where startmode = 'Scheduled'

	*/
	Days *string
	/*Device
	  The device that this service runs on

	*/
	Device *string
	/*DeviceID
	  The ID of the device that this service runs on

	*/
	DeviceID *int64
	/*EventBased
	  only for schedule based services where startmode = 'Scheduled'

	*/
	EventBased *string
	/*Hours
	  only for schedule based services where startmode = 'Scheduled'

	*/
	Hours *string
	/*IdleTime
	  only for schedule based services where startmode = 'Scheduled'

	*/
	IdleTime *string
	/*InstallDate
	  (note capital D for schedules) only for schedule based services where startmode = 'Scheduled'

	*/
	InstallDate *string
	/*Minutes
	  only for schedule based services where startmode = 'Scheduled'

	*/
	Minutes *string
	/*MonthOfYear
	  only for schedule based services where startmode = 'Scheduled'

	*/
	MonthOfYear *string
	/*Name
	  name

	*/
	Name *string
	/*OtherTrigger
	  only for schedule based services where startmode = 'Scheduled'

	*/
	OtherTrigger *string
	/*OtherType
	  only for schedule based services where startmode = 'Scheduled'

	*/
	OtherType *string
	/*SchedDescription
	  schedule description

	*/
	SchedDescription *string
	/*ScheduleID
	  schedule id

	*/
	ScheduleID *int64
	/*ScheduleName
	  schedule name

	*/
	ScheduleName *string
	/*ServiceDetailID
	  filter by id of the service in use

	*/
	ServiceDetailID *int64
	/*ServiceName
	  The executable name of the service

	*/
	ServiceName *string
	/*Status
	  status

	*/
	Status *string
	/*UserID
	  end user id

	*/
	UserID *string
	/*Weeks
	  only for schedule based services where startmode = 'Scheduled'

	*/
	Weeks *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithTimeout(timeout time.Duration) *PostScheduledTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithContext(ctx context.Context) *PostScheduledTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithHTTPClient(client *http.Client) *PostScheduledTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArguments adds the arguments to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithArguments(arguments *string) *PostScheduledTasksParams {
	o.SetArguments(arguments)
	return o
}

// SetArguments adds the arguments to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetArguments(arguments *string) {
	o.Arguments = arguments
}

// WithAtLogon adds the atLogon to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithAtLogon(atLogon *string) *PostScheduledTasksParams {
	o.SetAtLogon(atLogon)
	return o
}

// SetAtLogon adds the atLogon to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetAtLogon(atLogon *string) {
	o.AtLogon = atLogon
}

// WithAtStartup adds the atStartup to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithAtStartup(atStartup *string) *PostScheduledTasksParams {
	o.SetAtStartup(atStartup)
	return o
}

// SetAtStartup adds the atStartup to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetAtStartup(atStartup *string) {
	o.AtStartup = atStartup
}

// WithCaption adds the caption to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithCaption(caption string) *PostScheduledTasksParams {
	o.SetCaption(caption)
	return o
}

// SetCaption adds the caption to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetCaption(caption string) {
	o.Caption = caption
}

// WithDayOfMonth adds the dayOfMonth to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithDayOfMonth(dayOfMonth *string) *PostScheduledTasksParams {
	o.SetDayOfMonth(dayOfMonth)
	return o
}

// SetDayOfMonth adds the dayOfMonth to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetDayOfMonth(dayOfMonth *string) {
	o.DayOfMonth = dayOfMonth
}

// WithDayOfWeek adds the dayOfWeek to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithDayOfWeek(dayOfWeek *string) *PostScheduledTasksParams {
	o.SetDayOfWeek(dayOfWeek)
	return o
}

// SetDayOfWeek adds the dayOfWeek to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetDayOfWeek(dayOfWeek *string) {
	o.DayOfWeek = dayOfWeek
}

// WithDays adds the days to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithDays(days *string) *PostScheduledTasksParams {
	o.SetDays(days)
	return o
}

// SetDays adds the days to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetDays(days *string) {
	o.Days = days
}

// WithDevice adds the device to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithDevice(device *string) *PostScheduledTasksParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetDevice(device *string) {
	o.Device = device
}

// WithDeviceID adds the deviceID to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithDeviceID(deviceID *int64) *PostScheduledTasksParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetDeviceID(deviceID *int64) {
	o.DeviceID = deviceID
}

// WithEventBased adds the eventBased to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithEventBased(eventBased *string) *PostScheduledTasksParams {
	o.SetEventBased(eventBased)
	return o
}

// SetEventBased adds the eventBased to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetEventBased(eventBased *string) {
	o.EventBased = eventBased
}

// WithHours adds the hours to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithHours(hours *string) *PostScheduledTasksParams {
	o.SetHours(hours)
	return o
}

// SetHours adds the hours to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetHours(hours *string) {
	o.Hours = hours
}

// WithIdleTime adds the idleTime to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithIdleTime(idleTime *string) *PostScheduledTasksParams {
	o.SetIdleTime(idleTime)
	return o
}

// SetIdleTime adds the idleTime to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetIdleTime(idleTime *string) {
	o.IdleTime = idleTime
}

// WithInstallDate adds the installDate to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithInstallDate(installDate *string) *PostScheduledTasksParams {
	o.SetInstallDate(installDate)
	return o
}

// SetInstallDate adds the installDate to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetInstallDate(installDate *string) {
	o.InstallDate = installDate
}

// WithMinutes adds the minutes to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithMinutes(minutes *string) *PostScheduledTasksParams {
	o.SetMinutes(minutes)
	return o
}

// SetMinutes adds the minutes to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetMinutes(minutes *string) {
	o.Minutes = minutes
}

// WithMonthOfYear adds the monthOfYear to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithMonthOfYear(monthOfYear *string) *PostScheduledTasksParams {
	o.SetMonthOfYear(monthOfYear)
	return o
}

// SetMonthOfYear adds the monthOfYear to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetMonthOfYear(monthOfYear *string) {
	o.MonthOfYear = monthOfYear
}

// WithName adds the name to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithName(name *string) *PostScheduledTasksParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetName(name *string) {
	o.Name = name
}

// WithOtherTrigger adds the otherTrigger to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithOtherTrigger(otherTrigger *string) *PostScheduledTasksParams {
	o.SetOtherTrigger(otherTrigger)
	return o
}

// SetOtherTrigger adds the otherTrigger to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetOtherTrigger(otherTrigger *string) {
	o.OtherTrigger = otherTrigger
}

// WithOtherType adds the otherType to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithOtherType(otherType *string) *PostScheduledTasksParams {
	o.SetOtherType(otherType)
	return o
}

// SetOtherType adds the otherType to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetOtherType(otherType *string) {
	o.OtherType = otherType
}

// WithSchedDescription adds the schedDescription to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithSchedDescription(schedDescription *string) *PostScheduledTasksParams {
	o.SetSchedDescription(schedDescription)
	return o
}

// SetSchedDescription adds the schedDescription to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetSchedDescription(schedDescription *string) {
	o.SchedDescription = schedDescription
}

// WithScheduleID adds the scheduleID to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithScheduleID(scheduleID *int64) *PostScheduledTasksParams {
	o.SetScheduleID(scheduleID)
	return o
}

// SetScheduleID adds the scheduleId to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetScheduleID(scheduleID *int64) {
	o.ScheduleID = scheduleID
}

// WithScheduleName adds the scheduleName to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithScheduleName(scheduleName *string) *PostScheduledTasksParams {
	o.SetScheduleName(scheduleName)
	return o
}

// SetScheduleName adds the scheduleName to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetScheduleName(scheduleName *string) {
	o.ScheduleName = scheduleName
}

// WithServiceDetailID adds the serviceDetailID to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithServiceDetailID(serviceDetailID *int64) *PostScheduledTasksParams {
	o.SetServiceDetailID(serviceDetailID)
	return o
}

// SetServiceDetailID adds the serviceDetailId to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetServiceDetailID(serviceDetailID *int64) {
	o.ServiceDetailID = serviceDetailID
}

// WithServiceName adds the serviceName to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithServiceName(serviceName *string) *PostScheduledTasksParams {
	o.SetServiceName(serviceName)
	return o
}

// SetServiceName adds the serviceName to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetServiceName(serviceName *string) {
	o.ServiceName = serviceName
}

// WithStatus adds the status to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithStatus(status *string) *PostScheduledTasksParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetStatus(status *string) {
	o.Status = status
}

// WithUserID adds the userID to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithUserID(userID *string) *PostScheduledTasksParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithWeeks adds the weeks to the post scheduled tasks params
func (o *PostScheduledTasksParams) WithWeeks(weeks *string) *PostScheduledTasksParams {
	o.SetWeeks(weeks)
	return o
}

// SetWeeks adds the weeks to the post scheduled tasks params
func (o *PostScheduledTasksParams) SetWeeks(weeks *string) {
	o.Weeks = weeks
}

// WriteToRequest writes these params to a swagger request
func (o *PostScheduledTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Arguments != nil {

		// form param arguments
		var frArguments string
		if o.Arguments != nil {
			frArguments = *o.Arguments
		}
		fArguments := frArguments
		if fArguments != "" {
			if err := r.SetFormParam("arguments", fArguments); err != nil {
				return err
			}
		}

	}

	if o.AtLogon != nil {

		// form param at_logon
		var frAtLogon string
		if o.AtLogon != nil {
			frAtLogon = *o.AtLogon
		}
		fAtLogon := frAtLogon
		if fAtLogon != "" {
			if err := r.SetFormParam("at_logon", fAtLogon); err != nil {
				return err
			}
		}

	}

	if o.AtStartup != nil {

		// form param at_startup
		var frAtStartup string
		if o.AtStartup != nil {
			frAtStartup = *o.AtStartup
		}
		fAtStartup := frAtStartup
		if fAtStartup != "" {
			if err := r.SetFormParam("at_startup", fAtStartup); err != nil {
				return err
			}
		}

	}

	// form param caption
	frCaption := o.Caption
	fCaption := frCaption
	if fCaption != "" {
		if err := r.SetFormParam("caption", fCaption); err != nil {
			return err
		}
	}

	if o.DayOfMonth != nil {

		// form param day_of_month
		var frDayOfMonth string
		if o.DayOfMonth != nil {
			frDayOfMonth = *o.DayOfMonth
		}
		fDayOfMonth := frDayOfMonth
		if fDayOfMonth != "" {
			if err := r.SetFormParam("day_of_month", fDayOfMonth); err != nil {
				return err
			}
		}

	}

	if o.DayOfWeek != nil {

		// form param day_of_week
		var frDayOfWeek string
		if o.DayOfWeek != nil {
			frDayOfWeek = *o.DayOfWeek
		}
		fDayOfWeek := frDayOfWeek
		if fDayOfWeek != "" {
			if err := r.SetFormParam("day_of_week", fDayOfWeek); err != nil {
				return err
			}
		}

	}

	if o.Days != nil {

		// form param days
		var frDays string
		if o.Days != nil {
			frDays = *o.Days
		}
		fDays := frDays
		if fDays != "" {
			if err := r.SetFormParam("days", fDays); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// form param device
		var frDevice string
		if o.Device != nil {
			frDevice = *o.Device
		}
		fDevice := frDevice
		if fDevice != "" {
			if err := r.SetFormParam("device", fDevice); err != nil {
				return err
			}
		}

	}

	if o.DeviceID != nil {

		// form param device_id
		var frDeviceID int64
		if o.DeviceID != nil {
			frDeviceID = *o.DeviceID
		}
		fDeviceID := swag.FormatInt64(frDeviceID)
		if fDeviceID != "" {
			if err := r.SetFormParam("device_id", fDeviceID); err != nil {
				return err
			}
		}

	}

	if o.EventBased != nil {

		// form param event_based
		var frEventBased string
		if o.EventBased != nil {
			frEventBased = *o.EventBased
		}
		fEventBased := frEventBased
		if fEventBased != "" {
			if err := r.SetFormParam("event_based", fEventBased); err != nil {
				return err
			}
		}

	}

	if o.Hours != nil {

		// form param hours
		var frHours string
		if o.Hours != nil {
			frHours = *o.Hours
		}
		fHours := frHours
		if fHours != "" {
			if err := r.SetFormParam("hours", fHours); err != nil {
				return err
			}
		}

	}

	if o.IdleTime != nil {

		// form param idle_time
		var frIdleTime string
		if o.IdleTime != nil {
			frIdleTime = *o.IdleTime
		}
		fIdleTime := frIdleTime
		if fIdleTime != "" {
			if err := r.SetFormParam("idle_time", fIdleTime); err != nil {
				return err
			}
		}

	}

	if o.InstallDate != nil {

		// form param install_Date
		var frInstallDate string
		if o.InstallDate != nil {
			frInstallDate = *o.InstallDate
		}
		fInstallDate := frInstallDate
		if fInstallDate != "" {
			if err := r.SetFormParam("install_Date", fInstallDate); err != nil {
				return err
			}
		}

	}

	if o.Minutes != nil {

		// form param minutes
		var frMinutes string
		if o.Minutes != nil {
			frMinutes = *o.Minutes
		}
		fMinutes := frMinutes
		if fMinutes != "" {
			if err := r.SetFormParam("minutes", fMinutes); err != nil {
				return err
			}
		}

	}

	if o.MonthOfYear != nil {

		// form param month_of_year
		var frMonthOfYear string
		if o.MonthOfYear != nil {
			frMonthOfYear = *o.MonthOfYear
		}
		fMonthOfYear := frMonthOfYear
		if fMonthOfYear != "" {
			if err := r.SetFormParam("month_of_year", fMonthOfYear); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}

	}

	if o.OtherTrigger != nil {

		// form param other_trigger
		var frOtherTrigger string
		if o.OtherTrigger != nil {
			frOtherTrigger = *o.OtherTrigger
		}
		fOtherTrigger := frOtherTrigger
		if fOtherTrigger != "" {
			if err := r.SetFormParam("other_trigger", fOtherTrigger); err != nil {
				return err
			}
		}

	}

	if o.OtherType != nil {

		// form param other_type
		var frOtherType string
		if o.OtherType != nil {
			frOtherType = *o.OtherType
		}
		fOtherType := frOtherType
		if fOtherType != "" {
			if err := r.SetFormParam("other_type", fOtherType); err != nil {
				return err
			}
		}

	}

	if o.SchedDescription != nil {

		// form param sched_description
		var frSchedDescription string
		if o.SchedDescription != nil {
			frSchedDescription = *o.SchedDescription
		}
		fSchedDescription := frSchedDescription
		if fSchedDescription != "" {
			if err := r.SetFormParam("sched_description", fSchedDescription); err != nil {
				return err
			}
		}

	}

	if o.ScheduleID != nil {

		// form param schedule_id
		var frScheduleID int64
		if o.ScheduleID != nil {
			frScheduleID = *o.ScheduleID
		}
		fScheduleID := swag.FormatInt64(frScheduleID)
		if fScheduleID != "" {
			if err := r.SetFormParam("schedule_id", fScheduleID); err != nil {
				return err
			}
		}

	}

	if o.ScheduleName != nil {

		// form param schedule_name
		var frScheduleName string
		if o.ScheduleName != nil {
			frScheduleName = *o.ScheduleName
		}
		fScheduleName := frScheduleName
		if fScheduleName != "" {
			if err := r.SetFormParam("schedule_name", fScheduleName); err != nil {
				return err
			}
		}

	}

	if o.ServiceDetailID != nil {

		// form param service_detail_id
		var frServiceDetailID int64
		if o.ServiceDetailID != nil {
			frServiceDetailID = *o.ServiceDetailID
		}
		fServiceDetailID := swag.FormatInt64(frServiceDetailID)
		if fServiceDetailID != "" {
			if err := r.SetFormParam("service_detail_id", fServiceDetailID); err != nil {
				return err
			}
		}

	}

	if o.ServiceName != nil {

		// form param service_name
		var frServiceName string
		if o.ServiceName != nil {
			frServiceName = *o.ServiceName
		}
		fServiceName := frServiceName
		if fServiceName != "" {
			if err := r.SetFormParam("service_name", fServiceName); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// form param status
		var frStatus string
		if o.Status != nil {
			frStatus = *o.Status
		}
		fStatus := frStatus
		if fStatus != "" {
			if err := r.SetFormParam("status", fStatus); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// form param user_id
		var frUserID string
		if o.UserID != nil {
			frUserID = *o.UserID
		}
		fUserID := frUserID
		if fUserID != "" {
			if err := r.SetFormParam("user_id", fUserID); err != nil {
				return err
			}
		}

	}

	if o.Weeks != nil {

		// form param weeks
		var frWeeks string
		if o.Weeks != nil {
			frWeeks = *o.Weeks
		}
		fWeeks := frWeeks
		if fWeeks != "" {
			if err := r.SetFormParam("weeks", fWeeks); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
