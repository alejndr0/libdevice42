// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetListenerConnectionStatsV2Params creates a new GetListenerConnectionStatsV2Params object
// with the default values initialized.
func NewGetListenerConnectionStatsV2Params() *GetListenerConnectionStatsV2Params {
	var ()
	return &GetListenerConnectionStatsV2Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetListenerConnectionStatsV2ParamsWithTimeout creates a new GetListenerConnectionStatsV2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetListenerConnectionStatsV2ParamsWithTimeout(timeout time.Duration) *GetListenerConnectionStatsV2Params {
	var ()
	return &GetListenerConnectionStatsV2Params{

		timeout: timeout,
	}
}

// NewGetListenerConnectionStatsV2ParamsWithContext creates a new GetListenerConnectionStatsV2Params object
// with the default values initialized, and the ability to set a context for a request
func NewGetListenerConnectionStatsV2ParamsWithContext(ctx context.Context) *GetListenerConnectionStatsV2Params {
	var ()
	return &GetListenerConnectionStatsV2Params{

		Context: ctx,
	}
}

// NewGetListenerConnectionStatsV2ParamsWithHTTPClient creates a new GetListenerConnectionStatsV2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetListenerConnectionStatsV2ParamsWithHTTPClient(client *http.Client) *GetListenerConnectionStatsV2Params {
	var ()
	return &GetListenerConnectionStatsV2Params{
		HTTPClient: client,
	}
}

/*GetListenerConnectionStatsV2Params contains all the parameters to send to the API endpoint
for the get listener connection stats v2 operation typically these are written to a http.Request
*/
type GetListenerConnectionStatsV2Params struct {

	/*DeviceName
	  the name of the device

	*/
	DeviceName *string
	/*DiscoveredService
	  the name of the discovered service listening on this IP/port

	*/
	DiscoveredService *string
	/*ListenerDeviceName
	  Name of device with listening services

	*/
	ListenerDeviceName *string
	/*MappedService
	  the name of the mapped service listening on this IP/port

	*/
	MappedService *string
	/*Port
	  child is optional assuming you have a parent created (see examples)

	*/
	Port *string
	/*ServiceInstanceID
	  filter by id of the service instance in use

	*/
	ServiceInstanceID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) WithTimeout(timeout time.Duration) *GetListenerConnectionStatsV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) WithContext(ctx context.Context) *GetListenerConnectionStatsV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) WithHTTPClient(client *http.Client) *GetListenerConnectionStatsV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceName adds the deviceName to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) WithDeviceName(deviceName *string) *GetListenerConnectionStatsV2Params {
	o.SetDeviceName(deviceName)
	return o
}

// SetDeviceName adds the deviceName to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) SetDeviceName(deviceName *string) {
	o.DeviceName = deviceName
}

// WithDiscoveredService adds the discoveredService to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) WithDiscoveredService(discoveredService *string) *GetListenerConnectionStatsV2Params {
	o.SetDiscoveredService(discoveredService)
	return o
}

// SetDiscoveredService adds the discoveredService to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) SetDiscoveredService(discoveredService *string) {
	o.DiscoveredService = discoveredService
}

// WithListenerDeviceName adds the listenerDeviceName to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) WithListenerDeviceName(listenerDeviceName *string) *GetListenerConnectionStatsV2Params {
	o.SetListenerDeviceName(listenerDeviceName)
	return o
}

// SetListenerDeviceName adds the listenerDeviceName to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) SetListenerDeviceName(listenerDeviceName *string) {
	o.ListenerDeviceName = listenerDeviceName
}

// WithMappedService adds the mappedService to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) WithMappedService(mappedService *string) *GetListenerConnectionStatsV2Params {
	o.SetMappedService(mappedService)
	return o
}

// SetMappedService adds the mappedService to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) SetMappedService(mappedService *string) {
	o.MappedService = mappedService
}

// WithPort adds the port to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) WithPort(port *string) *GetListenerConnectionStatsV2Params {
	o.SetPort(port)
	return o
}

// SetPort adds the port to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) SetPort(port *string) {
	o.Port = port
}

// WithServiceInstanceID adds the serviceInstanceID to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) WithServiceInstanceID(serviceInstanceID *int64) *GetListenerConnectionStatsV2Params {
	o.SetServiceInstanceID(serviceInstanceID)
	return o
}

// SetServiceInstanceID adds the serviceInstanceId to the get listener connection stats v2 params
func (o *GetListenerConnectionStatsV2Params) SetServiceInstanceID(serviceInstanceID *int64) {
	o.ServiceInstanceID = serviceInstanceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetListenerConnectionStatsV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DeviceName != nil {

		// query param device_name
		var qrDeviceName string
		if o.DeviceName != nil {
			qrDeviceName = *o.DeviceName
		}
		qDeviceName := qrDeviceName
		if qDeviceName != "" {
			if err := r.SetQueryParam("device_name", qDeviceName); err != nil {
				return err
			}
		}

	}

	if o.DiscoveredService != nil {

		// query param discovered_service
		var qrDiscoveredService string
		if o.DiscoveredService != nil {
			qrDiscoveredService = *o.DiscoveredService
		}
		qDiscoveredService := qrDiscoveredService
		if qDiscoveredService != "" {
			if err := r.SetQueryParam("discovered_service", qDiscoveredService); err != nil {
				return err
			}
		}

	}

	if o.ListenerDeviceName != nil {

		// query param listener_device_name
		var qrListenerDeviceName string
		if o.ListenerDeviceName != nil {
			qrListenerDeviceName = *o.ListenerDeviceName
		}
		qListenerDeviceName := qrListenerDeviceName
		if qListenerDeviceName != "" {
			if err := r.SetQueryParam("listener_device_name", qListenerDeviceName); err != nil {
				return err
			}
		}

	}

	if o.MappedService != nil {

		// query param mapped_service
		var qrMappedService string
		if o.MappedService != nil {
			qrMappedService = *o.MappedService
		}
		qMappedService := qrMappedService
		if qMappedService != "" {
			if err := r.SetQueryParam("mapped_service", qMappedService); err != nil {
				return err
			}
		}

	}

	if o.Port != nil {

		// query param port
		var qrPort string
		if o.Port != nil {
			qrPort = *o.Port
		}
		qPort := qrPort
		if qPort != "" {
			if err := r.SetQueryParam("port", qPort); err != nil {
				return err
			}
		}

	}

	if o.ServiceInstanceID != nil {

		// query param service_instance_id
		var qrServiceInstanceID int64
		if o.ServiceInstanceID != nil {
			qrServiceInstanceID = *o.ServiceInstanceID
		}
		qServiceInstanceID := swag.FormatInt64(qrServiceInstanceID)
		if qServiceInstanceID != "" {
			if err := r.SetQueryParam("service_instance_id", qServiceInstanceID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
