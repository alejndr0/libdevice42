// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostServiceInstancesParams creates a new PostServiceInstancesParams object
// with the default values initialized.
func NewPostServiceInstancesParams() *PostServiceInstancesParams {
	var ()
	return &PostServiceInstancesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostServiceInstancesParamsWithTimeout creates a new PostServiceInstancesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostServiceInstancesParamsWithTimeout(timeout time.Duration) *PostServiceInstancesParams {
	var ()
	return &PostServiceInstancesParams{

		timeout: timeout,
	}
}

// NewPostServiceInstancesParamsWithContext creates a new PostServiceInstancesParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostServiceInstancesParamsWithContext(ctx context.Context) *PostServiceInstancesParams {
	var ()
	return &PostServiceInstancesParams{

		Context: ctx,
	}
}

// NewPostServiceInstancesParamsWithHTTPClient creates a new PostServiceInstancesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostServiceInstancesParamsWithHTTPClient(client *http.Client) *PostServiceInstancesParams {
	var ()
	return &PostServiceInstancesParams{
		HTTPClient: client,
	}
}

/*PostServiceInstancesParams contains all the parameters to send to the API endpoint
for the post service instances operation typically these are written to a http.Request
*/
type PostServiceInstancesParams struct {

	/*Appcomps
	  comma separated list of application components to associated with service instance

	*/
	Appcomps *string
	/*ClearAppcomps
	  Set to 'yes' to clear associated application components

	*/
	ClearAppcomps *string
	/*Device
	  The device that this service runs on

	*/
	Device *string
	/*DeviceID
	  id of the device

	*/
	DeviceID *int64
	/*IgnoreClientConnections*/
	IgnoreClientConnections *string
	/*InstallDate
	  install date

	*/
	InstallDate *string
	/*ListeningIP
	  the local IP address that listening on this port

	*/
	ListeningIP *string
	/*Loadbalancer
	  loadbalancer

	*/
	Loadbalancer *string
	/*Pinned
	  pinned

	*/
	Pinned *string
	/*Port
	  the listening port on this device

	*/
	Port *int64
	/*RemoveAppcompIds
	  comma separated list of application components IDs to remove

	*/
	RemoveAppcompIds *int64
	/*ServiceDetailID
	  service detail id

	*/
	ServiceDetailID *int64
	/*ServiceDisplayName
	  The user freindly display name of the service

	*/
	ServiceDisplayName *string
	/*ServiceID
	  service id

	*/
	ServiceID *int64
	/*ServiceName
	  The executable name of the service

	*/
	ServiceName *string
	/*ServicePath
	  service path

	*/
	ServicePath *string
	/*Startmode
	  The start mode of this service - valid values are 'Automatic', 'Manual', 'Disabled' and 'Unknown'

	*/
	Startmode *string
	/*State
	  The current running state of this service. Valid values are 'Running', 'Started', 'Paused', 'Stopped' and 'Unknown'

	*/
	State *string
	/*TopologyStatus
	  topology status

	*/
	TopologyStatus *string
	/*UserID
	  id of the user

	*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post service instances params
func (o *PostServiceInstancesParams) WithTimeout(timeout time.Duration) *PostServiceInstancesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post service instances params
func (o *PostServiceInstancesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post service instances params
func (o *PostServiceInstancesParams) WithContext(ctx context.Context) *PostServiceInstancesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post service instances params
func (o *PostServiceInstancesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post service instances params
func (o *PostServiceInstancesParams) WithHTTPClient(client *http.Client) *PostServiceInstancesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post service instances params
func (o *PostServiceInstancesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppcomps adds the appcomps to the post service instances params
func (o *PostServiceInstancesParams) WithAppcomps(appcomps *string) *PostServiceInstancesParams {
	o.SetAppcomps(appcomps)
	return o
}

// SetAppcomps adds the appcomps to the post service instances params
func (o *PostServiceInstancesParams) SetAppcomps(appcomps *string) {
	o.Appcomps = appcomps
}

// WithClearAppcomps adds the clearAppcomps to the post service instances params
func (o *PostServiceInstancesParams) WithClearAppcomps(clearAppcomps *string) *PostServiceInstancesParams {
	o.SetClearAppcomps(clearAppcomps)
	return o
}

// SetClearAppcomps adds the clearAppcomps to the post service instances params
func (o *PostServiceInstancesParams) SetClearAppcomps(clearAppcomps *string) {
	o.ClearAppcomps = clearAppcomps
}

// WithDevice adds the device to the post service instances params
func (o *PostServiceInstancesParams) WithDevice(device *string) *PostServiceInstancesParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the post service instances params
func (o *PostServiceInstancesParams) SetDevice(device *string) {
	o.Device = device
}

// WithDeviceID adds the deviceID to the post service instances params
func (o *PostServiceInstancesParams) WithDeviceID(deviceID *int64) *PostServiceInstancesParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the post service instances params
func (o *PostServiceInstancesParams) SetDeviceID(deviceID *int64) {
	o.DeviceID = deviceID
}

// WithIgnoreClientConnections adds the ignoreClientConnections to the post service instances params
func (o *PostServiceInstancesParams) WithIgnoreClientConnections(ignoreClientConnections *string) *PostServiceInstancesParams {
	o.SetIgnoreClientConnections(ignoreClientConnections)
	return o
}

// SetIgnoreClientConnections adds the ignoreClientConnections to the post service instances params
func (o *PostServiceInstancesParams) SetIgnoreClientConnections(ignoreClientConnections *string) {
	o.IgnoreClientConnections = ignoreClientConnections
}

// WithInstallDate adds the installDate to the post service instances params
func (o *PostServiceInstancesParams) WithInstallDate(installDate *string) *PostServiceInstancesParams {
	o.SetInstallDate(installDate)
	return o
}

// SetInstallDate adds the installDate to the post service instances params
func (o *PostServiceInstancesParams) SetInstallDate(installDate *string) {
	o.InstallDate = installDate
}

// WithListeningIP adds the listeningIP to the post service instances params
func (o *PostServiceInstancesParams) WithListeningIP(listeningIP *string) *PostServiceInstancesParams {
	o.SetListeningIP(listeningIP)
	return o
}

// SetListeningIP adds the listeningIp to the post service instances params
func (o *PostServiceInstancesParams) SetListeningIP(listeningIP *string) {
	o.ListeningIP = listeningIP
}

// WithLoadbalancer adds the loadbalancer to the post service instances params
func (o *PostServiceInstancesParams) WithLoadbalancer(loadbalancer *string) *PostServiceInstancesParams {
	o.SetLoadbalancer(loadbalancer)
	return o
}

// SetLoadbalancer adds the loadbalancer to the post service instances params
func (o *PostServiceInstancesParams) SetLoadbalancer(loadbalancer *string) {
	o.Loadbalancer = loadbalancer
}

// WithPinned adds the pinned to the post service instances params
func (o *PostServiceInstancesParams) WithPinned(pinned *string) *PostServiceInstancesParams {
	o.SetPinned(pinned)
	return o
}

// SetPinned adds the pinned to the post service instances params
func (o *PostServiceInstancesParams) SetPinned(pinned *string) {
	o.Pinned = pinned
}

// WithPort adds the port to the post service instances params
func (o *PostServiceInstancesParams) WithPort(port *int64) *PostServiceInstancesParams {
	o.SetPort(port)
	return o
}

// SetPort adds the port to the post service instances params
func (o *PostServiceInstancesParams) SetPort(port *int64) {
	o.Port = port
}

// WithRemoveAppcompIds adds the removeAppcompIds to the post service instances params
func (o *PostServiceInstancesParams) WithRemoveAppcompIds(removeAppcompIds *int64) *PostServiceInstancesParams {
	o.SetRemoveAppcompIds(removeAppcompIds)
	return o
}

// SetRemoveAppcompIds adds the removeAppcompIds to the post service instances params
func (o *PostServiceInstancesParams) SetRemoveAppcompIds(removeAppcompIds *int64) {
	o.RemoveAppcompIds = removeAppcompIds
}

// WithServiceDetailID adds the serviceDetailID to the post service instances params
func (o *PostServiceInstancesParams) WithServiceDetailID(serviceDetailID *int64) *PostServiceInstancesParams {
	o.SetServiceDetailID(serviceDetailID)
	return o
}

// SetServiceDetailID adds the serviceDetailId to the post service instances params
func (o *PostServiceInstancesParams) SetServiceDetailID(serviceDetailID *int64) {
	o.ServiceDetailID = serviceDetailID
}

// WithServiceDisplayName adds the serviceDisplayName to the post service instances params
func (o *PostServiceInstancesParams) WithServiceDisplayName(serviceDisplayName *string) *PostServiceInstancesParams {
	o.SetServiceDisplayName(serviceDisplayName)
	return o
}

// SetServiceDisplayName adds the serviceDisplayName to the post service instances params
func (o *PostServiceInstancesParams) SetServiceDisplayName(serviceDisplayName *string) {
	o.ServiceDisplayName = serviceDisplayName
}

// WithServiceID adds the serviceID to the post service instances params
func (o *PostServiceInstancesParams) WithServiceID(serviceID *int64) *PostServiceInstancesParams {
	o.SetServiceID(serviceID)
	return o
}

// SetServiceID adds the serviceId to the post service instances params
func (o *PostServiceInstancesParams) SetServiceID(serviceID *int64) {
	o.ServiceID = serviceID
}

// WithServiceName adds the serviceName to the post service instances params
func (o *PostServiceInstancesParams) WithServiceName(serviceName *string) *PostServiceInstancesParams {
	o.SetServiceName(serviceName)
	return o
}

// SetServiceName adds the serviceName to the post service instances params
func (o *PostServiceInstancesParams) SetServiceName(serviceName *string) {
	o.ServiceName = serviceName
}

// WithServicePath adds the servicePath to the post service instances params
func (o *PostServiceInstancesParams) WithServicePath(servicePath *string) *PostServiceInstancesParams {
	o.SetServicePath(servicePath)
	return o
}

// SetServicePath adds the servicePath to the post service instances params
func (o *PostServiceInstancesParams) SetServicePath(servicePath *string) {
	o.ServicePath = servicePath
}

// WithStartmode adds the startmode to the post service instances params
func (o *PostServiceInstancesParams) WithStartmode(startmode *string) *PostServiceInstancesParams {
	o.SetStartmode(startmode)
	return o
}

// SetStartmode adds the startmode to the post service instances params
func (o *PostServiceInstancesParams) SetStartmode(startmode *string) {
	o.Startmode = startmode
}

// WithState adds the state to the post service instances params
func (o *PostServiceInstancesParams) WithState(state *string) *PostServiceInstancesParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the post service instances params
func (o *PostServiceInstancesParams) SetState(state *string) {
	o.State = state
}

// WithTopologyStatus adds the topologyStatus to the post service instances params
func (o *PostServiceInstancesParams) WithTopologyStatus(topologyStatus *string) *PostServiceInstancesParams {
	o.SetTopologyStatus(topologyStatus)
	return o
}

// SetTopologyStatus adds the topologyStatus to the post service instances params
func (o *PostServiceInstancesParams) SetTopologyStatus(topologyStatus *string) {
	o.TopologyStatus = topologyStatus
}

// WithUserID adds the userID to the post service instances params
func (o *PostServiceInstancesParams) WithUserID(userID *string) *PostServiceInstancesParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the post service instances params
func (o *PostServiceInstancesParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *PostServiceInstancesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Appcomps != nil {

		// form param appcomps
		var frAppcomps string
		if o.Appcomps != nil {
			frAppcomps = *o.Appcomps
		}
		fAppcomps := frAppcomps
		if fAppcomps != "" {
			if err := r.SetFormParam("appcomps", fAppcomps); err != nil {
				return err
			}
		}

	}

	if o.ClearAppcomps != nil {

		// form param clear_appcomps
		var frClearAppcomps string
		if o.ClearAppcomps != nil {
			frClearAppcomps = *o.ClearAppcomps
		}
		fClearAppcomps := frClearAppcomps
		if fClearAppcomps != "" {
			if err := r.SetFormParam("clear_appcomps", fClearAppcomps); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// form param device
		var frDevice string
		if o.Device != nil {
			frDevice = *o.Device
		}
		fDevice := frDevice
		if fDevice != "" {
			if err := r.SetFormParam("device", fDevice); err != nil {
				return err
			}
		}

	}

	if o.DeviceID != nil {

		// form param device_id
		var frDeviceID int64
		if o.DeviceID != nil {
			frDeviceID = *o.DeviceID
		}
		fDeviceID := swag.FormatInt64(frDeviceID)
		if fDeviceID != "" {
			if err := r.SetFormParam("device_id", fDeviceID); err != nil {
				return err
			}
		}

	}

	if o.IgnoreClientConnections != nil {

		// form param ignore_client_connections
		var frIgnoreClientConnections string
		if o.IgnoreClientConnections != nil {
			frIgnoreClientConnections = *o.IgnoreClientConnections
		}
		fIgnoreClientConnections := frIgnoreClientConnections
		if fIgnoreClientConnections != "" {
			if err := r.SetFormParam("ignore_client_connections", fIgnoreClientConnections); err != nil {
				return err
			}
		}

	}

	if o.InstallDate != nil {

		// form param install_date
		var frInstallDate string
		if o.InstallDate != nil {
			frInstallDate = *o.InstallDate
		}
		fInstallDate := frInstallDate
		if fInstallDate != "" {
			if err := r.SetFormParam("install_date", fInstallDate); err != nil {
				return err
			}
		}

	}

	if o.ListeningIP != nil {

		// form param listening_ip
		var frListeningIP string
		if o.ListeningIP != nil {
			frListeningIP = *o.ListeningIP
		}
		fListeningIP := frListeningIP
		if fListeningIP != "" {
			if err := r.SetFormParam("listening_ip", fListeningIP); err != nil {
				return err
			}
		}

	}

	if o.Loadbalancer != nil {

		// form param loadbalancer
		var frLoadbalancer string
		if o.Loadbalancer != nil {
			frLoadbalancer = *o.Loadbalancer
		}
		fLoadbalancer := frLoadbalancer
		if fLoadbalancer != "" {
			if err := r.SetFormParam("loadbalancer", fLoadbalancer); err != nil {
				return err
			}
		}

	}

	if o.Pinned != nil {

		// form param pinned
		var frPinned string
		if o.Pinned != nil {
			frPinned = *o.Pinned
		}
		fPinned := frPinned
		if fPinned != "" {
			if err := r.SetFormParam("pinned", fPinned); err != nil {
				return err
			}
		}

	}

	if o.Port != nil {

		// form param port
		var frPort int64
		if o.Port != nil {
			frPort = *o.Port
		}
		fPort := swag.FormatInt64(frPort)
		if fPort != "" {
			if err := r.SetFormParam("port", fPort); err != nil {
				return err
			}
		}

	}

	if o.RemoveAppcompIds != nil {

		// form param remove_appcomp_ids
		var frRemoveAppcompIds int64
		if o.RemoveAppcompIds != nil {
			frRemoveAppcompIds = *o.RemoveAppcompIds
		}
		fRemoveAppcompIds := swag.FormatInt64(frRemoveAppcompIds)
		if fRemoveAppcompIds != "" {
			if err := r.SetFormParam("remove_appcomp_ids", fRemoveAppcompIds); err != nil {
				return err
			}
		}

	}

	if o.ServiceDetailID != nil {

		// form param service_detail_id
		var frServiceDetailID int64
		if o.ServiceDetailID != nil {
			frServiceDetailID = *o.ServiceDetailID
		}
		fServiceDetailID := swag.FormatInt64(frServiceDetailID)
		if fServiceDetailID != "" {
			if err := r.SetFormParam("service_detail_id", fServiceDetailID); err != nil {
				return err
			}
		}

	}

	if o.ServiceDisplayName != nil {

		// form param service_display_name
		var frServiceDisplayName string
		if o.ServiceDisplayName != nil {
			frServiceDisplayName = *o.ServiceDisplayName
		}
		fServiceDisplayName := frServiceDisplayName
		if fServiceDisplayName != "" {
			if err := r.SetFormParam("service_display_name", fServiceDisplayName); err != nil {
				return err
			}
		}

	}

	if o.ServiceID != nil {

		// form param service_id
		var frServiceID int64
		if o.ServiceID != nil {
			frServiceID = *o.ServiceID
		}
		fServiceID := swag.FormatInt64(frServiceID)
		if fServiceID != "" {
			if err := r.SetFormParam("service_id", fServiceID); err != nil {
				return err
			}
		}

	}

	if o.ServiceName != nil {

		// form param service_name
		var frServiceName string
		if o.ServiceName != nil {
			frServiceName = *o.ServiceName
		}
		fServiceName := frServiceName
		if fServiceName != "" {
			if err := r.SetFormParam("service_name", fServiceName); err != nil {
				return err
			}
		}

	}

	if o.ServicePath != nil {

		// form param service_path
		var frServicePath string
		if o.ServicePath != nil {
			frServicePath = *o.ServicePath
		}
		fServicePath := frServicePath
		if fServicePath != "" {
			if err := r.SetFormParam("service_path", fServicePath); err != nil {
				return err
			}
		}

	}

	if o.Startmode != nil {

		// form param startmode
		var frStartmode string
		if o.Startmode != nil {
			frStartmode = *o.Startmode
		}
		fStartmode := frStartmode
		if fStartmode != "" {
			if err := r.SetFormParam("startmode", fStartmode); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// form param state
		var frState string
		if o.State != nil {
			frState = *o.State
		}
		fState := frState
		if fState != "" {
			if err := r.SetFormParam("state", fState); err != nil {
				return err
			}
		}

	}

	if o.TopologyStatus != nil {

		// form param topology_status
		var frTopologyStatus string
		if o.TopologyStatus != nil {
			frTopologyStatus = *o.TopologyStatus
		}
		fTopologyStatus := frTopologyStatus
		if fTopologyStatus != "" {
			if err := r.SetFormParam("topology_status", fTopologyStatus); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// form param user_id
		var frUserID string
		if o.UserID != nil {
			frUserID = *o.UserID
		}
		fUserID := frUserID
		if fUserID != "" {
			if err := r.SetFormParam("user_id", fUserID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
