// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostServicePortsParams creates a new PostServicePortsParams object
// with the default values initialized.
func NewPostServicePortsParams() *PostServicePortsParams {
	var ()
	return &PostServicePortsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostServicePortsParamsWithTimeout creates a new PostServicePortsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostServicePortsParamsWithTimeout(timeout time.Duration) *PostServicePortsParams {
	var ()
	return &PostServicePortsParams{

		timeout: timeout,
	}
}

// NewPostServicePortsParamsWithContext creates a new PostServicePortsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostServicePortsParamsWithContext(ctx context.Context) *PostServicePortsParams {
	var ()
	return &PostServicePortsParams{

		Context: ctx,
	}
}

// NewPostServicePortsParamsWithHTTPClient creates a new PostServicePortsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostServicePortsParamsWithHTTPClient(client *http.Client) *PostServicePortsParams {
	var ()
	return &PostServicePortsParams{
		HTTPClient: client,
	}
}

/*PostServicePortsParams contains all the parameters to send to the API endpoint
for the post service ports operation typically these are written to a http.Request
*/
type PostServicePortsParams struct {

	/*Description
	  matching description (added in v7.2.0)

	*/
	Description *string
	/*DeviceName
	  required if switchport ID not used

	*/
	DeviceName *string
	/*DiscoveredProcess
	  the process name that has a handle to the port

	*/
	DiscoveredProcess *string
	/*DiscoveredService
	  the name of the discovered service listening on this IP/port

	*/
	DiscoveredService *string
	/*ListeningIP
	  the name of the device

	*/
	ListeningIP *string
	/*MappedService
	  the name of the mapped service listening on this IP/port

	*/
	MappedService *string
	/*Port
	  child is optional assuming you have a parent created (see examples)

	*/
	Port string
	/*RemoteIps
	  the comma separated list of remote IPs that are connected to this listening IP/port

	*/
	RemoteIps *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post service ports params
func (o *PostServicePortsParams) WithTimeout(timeout time.Duration) *PostServicePortsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post service ports params
func (o *PostServicePortsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post service ports params
func (o *PostServicePortsParams) WithContext(ctx context.Context) *PostServicePortsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post service ports params
func (o *PostServicePortsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post service ports params
func (o *PostServicePortsParams) WithHTTPClient(client *http.Client) *PostServicePortsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post service ports params
func (o *PostServicePortsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the post service ports params
func (o *PostServicePortsParams) WithDescription(description *string) *PostServicePortsParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the post service ports params
func (o *PostServicePortsParams) SetDescription(description *string) {
	o.Description = description
}

// WithDeviceName adds the deviceName to the post service ports params
func (o *PostServicePortsParams) WithDeviceName(deviceName *string) *PostServicePortsParams {
	o.SetDeviceName(deviceName)
	return o
}

// SetDeviceName adds the deviceName to the post service ports params
func (o *PostServicePortsParams) SetDeviceName(deviceName *string) {
	o.DeviceName = deviceName
}

// WithDiscoveredProcess adds the discoveredProcess to the post service ports params
func (o *PostServicePortsParams) WithDiscoveredProcess(discoveredProcess *string) *PostServicePortsParams {
	o.SetDiscoveredProcess(discoveredProcess)
	return o
}

// SetDiscoveredProcess adds the discoveredProcess to the post service ports params
func (o *PostServicePortsParams) SetDiscoveredProcess(discoveredProcess *string) {
	o.DiscoveredProcess = discoveredProcess
}

// WithDiscoveredService adds the discoveredService to the post service ports params
func (o *PostServicePortsParams) WithDiscoveredService(discoveredService *string) *PostServicePortsParams {
	o.SetDiscoveredService(discoveredService)
	return o
}

// SetDiscoveredService adds the discoveredService to the post service ports params
func (o *PostServicePortsParams) SetDiscoveredService(discoveredService *string) {
	o.DiscoveredService = discoveredService
}

// WithListeningIP adds the listeningIP to the post service ports params
func (o *PostServicePortsParams) WithListeningIP(listeningIP *string) *PostServicePortsParams {
	o.SetListeningIP(listeningIP)
	return o
}

// SetListeningIP adds the listeningIp to the post service ports params
func (o *PostServicePortsParams) SetListeningIP(listeningIP *string) {
	o.ListeningIP = listeningIP
}

// WithMappedService adds the mappedService to the post service ports params
func (o *PostServicePortsParams) WithMappedService(mappedService *string) *PostServicePortsParams {
	o.SetMappedService(mappedService)
	return o
}

// SetMappedService adds the mappedService to the post service ports params
func (o *PostServicePortsParams) SetMappedService(mappedService *string) {
	o.MappedService = mappedService
}

// WithPort adds the port to the post service ports params
func (o *PostServicePortsParams) WithPort(port string) *PostServicePortsParams {
	o.SetPort(port)
	return o
}

// SetPort adds the port to the post service ports params
func (o *PostServicePortsParams) SetPort(port string) {
	o.Port = port
}

// WithRemoteIps adds the remoteIps to the post service ports params
func (o *PostServicePortsParams) WithRemoteIps(remoteIps *string) *PostServicePortsParams {
	o.SetRemoteIps(remoteIps)
	return o
}

// SetRemoteIps adds the remoteIps to the post service ports params
func (o *PostServicePortsParams) SetRemoteIps(remoteIps *string) {
	o.RemoteIps = remoteIps
}

// WriteToRequest writes these params to a swagger request
func (o *PostServicePortsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	if o.DeviceName != nil {

		// form param device_name
		var frDeviceName string
		if o.DeviceName != nil {
			frDeviceName = *o.DeviceName
		}
		fDeviceName := frDeviceName
		if fDeviceName != "" {
			if err := r.SetFormParam("device_name", fDeviceName); err != nil {
				return err
			}
		}

	}

	if o.DiscoveredProcess != nil {

		// form param discovered_process
		var frDiscoveredProcess string
		if o.DiscoveredProcess != nil {
			frDiscoveredProcess = *o.DiscoveredProcess
		}
		fDiscoveredProcess := frDiscoveredProcess
		if fDiscoveredProcess != "" {
			if err := r.SetFormParam("discovered_process", fDiscoveredProcess); err != nil {
				return err
			}
		}

	}

	if o.DiscoveredService != nil {

		// query param discovered_service
		var qrDiscoveredService string
		if o.DiscoveredService != nil {
			qrDiscoveredService = *o.DiscoveredService
		}
		qDiscoveredService := qrDiscoveredService
		if qDiscoveredService != "" {
			if err := r.SetQueryParam("discovered_service", qDiscoveredService); err != nil {
				return err
			}
		}

	}

	if o.ListeningIP != nil {

		// form param listening_ip
		var frListeningIP string
		if o.ListeningIP != nil {
			frListeningIP = *o.ListeningIP
		}
		fListeningIP := frListeningIP
		if fListeningIP != "" {
			if err := r.SetFormParam("listening_ip", fListeningIP); err != nil {
				return err
			}
		}

	}

	if o.MappedService != nil {

		// query param mapped_service
		var qrMappedService string
		if o.MappedService != nil {
			qrMappedService = *o.MappedService
		}
		qMappedService := qrMappedService
		if qMappedService != "" {
			if err := r.SetQueryParam("mapped_service", qMappedService); err != nil {
				return err
			}
		}

	}

	// query param port
	qrPort := o.Port
	qPort := qrPort
	if qPort != "" {
		if err := r.SetQueryParam("port", qPort); err != nil {
			return err
		}
	}

	if o.RemoteIps != nil {

		// form param remote_ips
		var frRemoteIps string
		if o.RemoteIps != nil {
			frRemoteIps = *o.RemoteIps
		}
		fRemoteIps := frRemoteIps
		if fRemoteIps != "" {
			if err := r.SetFormParam("remote_ips", fRemoteIps); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
