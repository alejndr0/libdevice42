// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetListenerConnectionStatsV1Params creates a new GetListenerConnectionStatsV1Params object
// with the default values initialized.
func NewGetListenerConnectionStatsV1Params() *GetListenerConnectionStatsV1Params {
	var ()
	return &GetListenerConnectionStatsV1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetListenerConnectionStatsV1ParamsWithTimeout creates a new GetListenerConnectionStatsV1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetListenerConnectionStatsV1ParamsWithTimeout(timeout time.Duration) *GetListenerConnectionStatsV1Params {
	var ()
	return &GetListenerConnectionStatsV1Params{

		timeout: timeout,
	}
}

// NewGetListenerConnectionStatsV1ParamsWithContext creates a new GetListenerConnectionStatsV1Params object
// with the default values initialized, and the ability to set a context for a request
func NewGetListenerConnectionStatsV1ParamsWithContext(ctx context.Context) *GetListenerConnectionStatsV1Params {
	var ()
	return &GetListenerConnectionStatsV1Params{

		Context: ctx,
	}
}

// NewGetListenerConnectionStatsV1ParamsWithHTTPClient creates a new GetListenerConnectionStatsV1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetListenerConnectionStatsV1ParamsWithHTTPClient(client *http.Client) *GetListenerConnectionStatsV1Params {
	var ()
	return &GetListenerConnectionStatsV1Params{
		HTTPClient: client,
	}
}

/*GetListenerConnectionStatsV1Params contains all the parameters to send to the API endpoint
for the get listener connection stats v1 operation typically these are written to a http.Request
*/
type GetListenerConnectionStatsV1Params struct {

	/*ListenerDeviceName
	  Name of device with listening services

	*/
	ListenerDeviceName *string
	/*Port
	  child is optional assuming you have a parent created (see examples)

	*/
	Port string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get listener connection stats v1 params
func (o *GetListenerConnectionStatsV1Params) WithTimeout(timeout time.Duration) *GetListenerConnectionStatsV1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get listener connection stats v1 params
func (o *GetListenerConnectionStatsV1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get listener connection stats v1 params
func (o *GetListenerConnectionStatsV1Params) WithContext(ctx context.Context) *GetListenerConnectionStatsV1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get listener connection stats v1 params
func (o *GetListenerConnectionStatsV1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get listener connection stats v1 params
func (o *GetListenerConnectionStatsV1Params) WithHTTPClient(client *http.Client) *GetListenerConnectionStatsV1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get listener connection stats v1 params
func (o *GetListenerConnectionStatsV1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithListenerDeviceName adds the listenerDeviceName to the get listener connection stats v1 params
func (o *GetListenerConnectionStatsV1Params) WithListenerDeviceName(listenerDeviceName *string) *GetListenerConnectionStatsV1Params {
	o.SetListenerDeviceName(listenerDeviceName)
	return o
}

// SetListenerDeviceName adds the listenerDeviceName to the get listener connection stats v1 params
func (o *GetListenerConnectionStatsV1Params) SetListenerDeviceName(listenerDeviceName *string) {
	o.ListenerDeviceName = listenerDeviceName
}

// WithPort adds the port to the get listener connection stats v1 params
func (o *GetListenerConnectionStatsV1Params) WithPort(port string) *GetListenerConnectionStatsV1Params {
	o.SetPort(port)
	return o
}

// SetPort adds the port to the get listener connection stats v1 params
func (o *GetListenerConnectionStatsV1Params) SetPort(port string) {
	o.Port = port
}

// WriteToRequest writes these params to a swagger request
func (o *GetListenerConnectionStatsV1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ListenerDeviceName != nil {

		// query param listener_device_name
		var qrListenerDeviceName string
		if o.ListenerDeviceName != nil {
			qrListenerDeviceName = *o.ListenerDeviceName
		}
		qListenerDeviceName := qrListenerDeviceName
		if qListenerDeviceName != "" {
			if err := r.SetQueryParam("listener_device_name", qListenerDeviceName); err != nil {
				return err
			}
		}

	}

	// query param port
	qrPort := o.Port
	qPort := qrPort
	if qPort != "" {
		if err := r.SetQueryParam("port", qPort); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
