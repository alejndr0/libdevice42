// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteIgnoredServiceByID(params *DeleteIgnoredServiceByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIgnoredServiceByIDOK, error)

	DeleteScheduledTasksByID(params *DeleteScheduledTasksByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteScheduledTasksByIDOK, error)

	DeleteServiceInstancesByID(params *DeleteServiceInstancesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceInstancesByIDOK, error)

	DeleteServiceDetails(params *DeleteServiceDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceDetailsOK, error)

	DeleteServicePorts(params *DeleteServicePortsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServicePortsOK, error)

	DeleteServices(params *DeleteServicesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServicesOK, error)

	DeleteServicesByID(params *DeleteServicesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServicesByIDOK, error)

	GetIgnoredService(params *GetIgnoredServiceParams, authInfo runtime.ClientAuthInfoWriter) (*GetIgnoredServiceOK, error)

	GetListenerConnectionStatsByID(params *GetListenerConnectionStatsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetListenerConnectionStatsByIDOK, error)

	GetListenerConnectionStatsV2(params *GetListenerConnectionStatsV2Params, authInfo runtime.ClientAuthInfoWriter) (*GetListenerConnectionStatsV2OK, error)

	GetListenerConnectionStatsV1(params *GetListenerConnectionStatsV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetListenerConnectionStatsV1OK, error)

	GetNetworkShares(params *GetNetworkSharesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSharesOK, error)

	GetScheduledTasks(params *GetScheduledTasksParams, authInfo runtime.ClientAuthInfoWriter) (*GetScheduledTasksOK, error)

	GetScheduledTasksByID(params *GetScheduledTasksByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetScheduledTasksByIDOK, error)

	GetServiceClientConnections(params *GetServiceClientConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceClientConnectionsOK, error)

	GetServiceInstances(params *GetServiceInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceInstancesOK, error)

	GetServiceInstancesByID(params *GetServiceInstancesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceInstancesByIDOK, error)

	GetServiceListenerPorts(params *GetServiceListenerPortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceListenerPortsOK, error)

	GetServiceListenerPortsByID(params *GetServiceListenerPortsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceListenerPortsByIDOK, error)

	GetServiceDetails(params *GetServiceDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceDetailsOK, error)

	GetServicePorts(params *GetServicePortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicePortsOK, error)

	GetServices(params *GetServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesOK, error)

	GetServices2(params *GetServices2Params, authInfo runtime.ClientAuthInfoWriter) (*GetServices2OK, error)

	PostIgnoredService(params *PostIgnoredServiceParams, authInfo runtime.ClientAuthInfoWriter) (*PostIgnoredServiceOK, error)

	PostScheduledTasks(params *PostScheduledTasksParams, authInfo runtime.ClientAuthInfoWriter) (*PostScheduledTasksOK, error)

	PostServiceInstances(params *PostServiceInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*PostServiceInstancesOK, error)

	PostServiceListenerPorts(params *PostServiceListenerPortsParams, authInfo runtime.ClientAuthInfoWriter) (*PostServiceListenerPortsOK, error)

	PostServiceDetails(params *PostServiceDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*PostServiceDetailsOK, error)

	PostServicePorts(params *PostServicePortsParams, authInfo runtime.ClientAuthInfoWriter) (*PostServicePortsOK, error)

	PostServices(params *PostServicesParams, authInfo runtime.ClientAuthInfoWriter) (*PostServicesOK, error)

	PostServices2(params *PostServices2Params, authInfo runtime.ClientAuthInfoWriter) (*PostServices2OK, error)

	PutServiceListenerPorts(params *PutServiceListenerPortsParams, authInfo runtime.ClientAuthInfoWriter) (*PutServiceListenerPortsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteIgnoredServiceByID deletes ignored service by ID

  This API is used to delete the ignored service with the ignored service id supplied as the required argument. Note: You will only be able to delete the service if the supplied username has the correct permissions.
*/
func (a *Client) DeleteIgnoredServiceByID(params *DeleteIgnoredServiceByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIgnoredServiceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIgnoredServiceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIgnoredServiceByID",
		Method:             "DELETE",
		PathPattern:        "/api/2.0/ignored_service/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteIgnoredServiceByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIgnoredServiceByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIgnoredServiceByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteScheduledTasksByID deletes scheduled task by ID

  Used to delete the scheduled task with the service schedule ID as the required argument. Note: You will only be able to delete the scheduled task if the supplied username has the correct permissions.
*/
func (a *Client) DeleteScheduledTasksByID(params *DeleteScheduledTasksByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteScheduledTasksByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScheduledTasksByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteScheduledTasksByID",
		Method:             "DELETE",
		PathPattern:        "/api/2.0/scheduled_tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteScheduledTasksByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScheduledTasksByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteScheduledTasksByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteServiceInstancesByID deletes service instances by ID

  This API is used to delete the service detail with the service detail id supplied as the required argument. Note - You will only be able to delete the service if the supplied username has the correct permissions.
*/
func (a *Client) DeleteServiceInstancesByID(params *DeleteServiceInstancesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceInstancesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceInstancesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServiceInstancesByID",
		Method:             "DELETE",
		PathPattern:        "/api/2.0/service_instances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteServiceInstancesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceInstancesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteServiceInstancesByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteServiceDetails this API is used to delete the service detail with the service detail id supplied as the required argument note you will only be able to delete the service if the supplied username has the correct permissions

  Delete Service detail
*/
func (a *Client) DeleteServiceDetails(params *DeleteServiceDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteService_details",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/service_detail/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteServiceDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteService_details: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteServicePorts this API is used to delete the service port with the service port id supplied as the required argument note you will only be able to delete the service port if the supplied username has the correct permissions

  Delete Service port
*/
func (a *Client) DeleteServicePorts(params *DeleteServicePortsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServicePortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServicePortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteService_ports",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/service_ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteServicePortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServicePortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteService_ports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteServices this API is used to delete the service with the service id supplied as the required argument note you will only be able to delete the service if the supplied username has the correct permissions

  Delete Service
*/
func (a *Client) DeleteServices(params *DeleteServicesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServices",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/services/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteServicesByID deletes services by ID

  This API is used to delete the service with the service id supplied as the required argument. Note: You will only be able to delete the service if the supplied username has the correct permissions. (Added in v6.3.4)
*/
func (a *Client) DeleteServicesByID(params *DeleteServicesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServicesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServicesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServicesByID",
		Method:             "DELETE",
		PathPattern:        "/api/2.0/services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteServicesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServicesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteServicesByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIgnoredService gets ignored service

  Retrieve list of Ignored Services; filter ignored service details by following parameters in query string
*/
func (a *Client) GetIgnoredService(params *GetIgnoredServiceParams, authInfo runtime.ClientAuthInfoWriter) (*GetIgnoredServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIgnoredServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIgnoredService",
		Method:             "GET",
		PathPattern:        "/api/2.0/ignored_service/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIgnoredServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIgnoredServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIgnoredService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListenerConnectionStatsByID retrieves listener connection statistics by service port ID

  Get Listener Connection Statistics By ID
*/
func (a *Client) GetListenerConnectionStatsByID(params *GetListenerConnectionStatsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetListenerConnectionStatsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListenerConnectionStatsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListenerConnectionStatsByID",
		Method:             "GET",
		PathPattern:        "/api/2.0/listener_connection_stats/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetListenerConnectionStatsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListenerConnectionStatsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListenerConnectionStatsByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListenerConnectionStatsV2 retrieves all listener connection statistics

  Get Listener Connection Statistics
*/
func (a *Client) GetListenerConnectionStatsV2(params *GetListenerConnectionStatsV2Params, authInfo runtime.ClientAuthInfoWriter) (*GetListenerConnectionStatsV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListenerConnectionStatsV2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListenerConnectionStatsV2",
		Method:             "GET",
		PathPattern:        "/api/2.0/listener_connection_stats/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetListenerConnectionStatsV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListenerConnectionStatsV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListenerConnectionStatsV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetListenerConnectionStatsV1 Get Listener Connection Statistics
*/
func (a *Client) GetListenerConnectionStatsV1(params *GetListenerConnectionStatsV1Params, authInfo runtime.ClientAuthInfoWriter) (*GetListenerConnectionStatsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListenerConnectionStatsV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListener_connection_stats_v1",
		Method:             "GET",
		PathPattern:        "/api/1.0/listener_connection_stats/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetListenerConnectionStatsV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListenerConnectionStatsV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListener_connection_stats_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkShares Get Network Shares
*/
func (a *Client) GetNetworkShares(params *GetNetworkSharesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSharesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSharesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetwork_shares",
		Method:             "GET",
		PathPattern:        "/api/1.0/network_shares/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworkSharesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSharesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetwork_shares: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScheduledTasks retreives information about all scheduled tasks

  Get Scheduled Tasks
*/
func (a *Client) GetScheduledTasks(params *GetScheduledTasksParams, authInfo runtime.ClientAuthInfoWriter) (*GetScheduledTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduledTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScheduledTasks",
		Method:             "GET",
		PathPattern:        "/api/2.0/scheduled_tasks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetScheduledTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduledTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScheduledTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScheduledTasksByID retrieves scheduled task by service schedule ID

  Get scheduled task By ID
*/
func (a *Client) GetScheduledTasksByID(params *GetScheduledTasksByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetScheduledTasksByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduledTasksByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScheduledTasksByID",
		Method:             "GET",
		PathPattern:        "/api/2.0/scheduled_tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetScheduledTasksByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduledTasksByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScheduledTasksByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceClientConnections gets service client connection information by service detail ID

  Get Service Client Connections
*/
func (a *Client) GetServiceClientConnections(params *GetServiceClientConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceClientConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceClientConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceClientConnections",
		Method:             "GET",
		PathPattern:        "/api/2.0/service_client_connections/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceClientConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceClientConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceClientConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceInstances gets service instances

  You can filter service details by following parameters in the query string
*/
func (a *Client) GetServiceInstances(params *GetServiceInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceInstances",
		Method:             "GET",
		PathPattern:        "/api/2.0/service_instances/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceInstancesByID retrieves service instance information by service instance ID

  Get Service Instances By ID
*/
func (a *Client) GetServiceInstancesByID(params *GetServiceInstancesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceInstancesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceInstancesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceInstancesByID",
		Method:             "GET",
		PathPattern:        "/api/2.0/service_instances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceInstancesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceInstancesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceInstancesByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceListenerPorts gets service listener ports

  You can filter service ports by following parameters in the query string
*/
func (a *Client) GetServiceListenerPorts(params *GetServiceListenerPortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceListenerPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceListenerPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceListenerPorts",
		Method:             "GET",
		PathPattern:        "/api/2.0/service_listener_ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceListenerPortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceListenerPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceListenerPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceListenerPortsByID retrieves service listener port information by service port ID

  Get Service Listener Ports By ID
*/
func (a *Client) GetServiceListenerPortsByID(params *GetServiceListenerPortsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceListenerPortsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceListenerPortsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceListenerPortsByID",
		Method:             "GET",
		PathPattern:        "/api/2.0/service_listener_ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceListenerPortsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceListenerPortsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceListenerPortsByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceDetails Get Service details
*/
func (a *Client) GetServiceDetails(params *GetServiceDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getService_details",
		Method:             "GET",
		PathPattern:        "/api/1.0/service_details/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getService_details: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServicePorts Get Service ports
*/
func (a *Client) GetServicePorts(params *GetServicePortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicePortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicePortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getService_ports",
		Method:             "GET",
		PathPattern:        "/api/1.0/service_ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServicePortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicePortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getService_ports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServices Get Services
*/
func (a *Client) GetServices(params *GetServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServices",
		Method:             "GET",
		PathPattern:        "/api/1.0/services/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServices2 gets list of all services

  You can filter services by following parameters in the query string
*/
func (a *Client) GetServices2(params *GetServices2Params, authInfo runtime.ClientAuthInfoWriter) (*GetServices2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServices2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServices2",
		Method:             "GET",
		PathPattern:        "/api/2.0/services/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServices2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServices2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServices2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIgnoredService creates update ignored service

  Post Ignored Service
*/
func (a *Client) PostIgnoredService(params *PostIgnoredServiceParams, authInfo runtime.ClientAuthInfoWriter) (*PostIgnoredServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIgnoredServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIgnoredService",
		Method:             "POST",
		PathPattern:        "/api/2.0/ignored_service/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIgnoredServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIgnoredServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIgnoredService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostScheduledTasks creates update scheduled tasks

  Post Scheduled Tasks. 3 parameters are required: <ul><li>schedule_name <b>OR</b> service_name <b>OR</b> name</li> <li>device_id <b>OR</b> device</li> <li>caption</li>
*/
func (a *Client) PostScheduledTasks(params *PostScheduledTasksParams, authInfo runtime.ClientAuthInfoWriter) (*PostScheduledTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScheduledTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postScheduledTasks",
		Method:             "POST",
		PathPattern:        "/api/2.0/scheduled_tasks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostScheduledTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScheduledTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postScheduledTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostServiceInstances creates update service instances

  Post Service Instances. Required parameters are either: <li>service_name <b>OR</b> service_display_name <b>OR</b> service_id</li> <li> device <b>OR</b> device_id</li><p>------ OR ------<li>service_detail_id</li></ul>
*/
func (a *Client) PostServiceInstances(params *PostServiceInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*PostServiceInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServiceInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postServiceInstances",
		Method:             "POST",
		PathPattern:        "/api/2.0/service_instances/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostServiceInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostServiceInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postServiceInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostServiceListenerPorts creates update service ports

  Post Service Listener Ports. Required parameters: <ul> <li>id</li></ul> <b>---------- OR ----------</b> <ul> <li>port</li> <li>device_name <b>OR</b> device_id</li> <li>listening_ip <b>OR</b> remote_ips</li> </ul>
*/
func (a *Client) PostServiceListenerPorts(params *PostServiceListenerPortsParams, authInfo runtime.ClientAuthInfoWriter) (*PostServiceListenerPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServiceListenerPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postServiceListenerPorts",
		Method:             "POST",
		PathPattern:        "/api/2.0/service_listener_ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostServiceListenerPortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostServiceListenerPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postServiceListenerPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostServiceDetails Create / Update service details
*/
func (a *Client) PostServiceDetails(params *PostServiceDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*PostServiceDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServiceDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postService_details",
		Method:             "POST",
		PathPattern:        "/api/1.0/service_details/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostServiceDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostServiceDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postService_details: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostServicePorts Create / Update service ports
*/
func (a *Client) PostServicePorts(params *PostServicePortsParams, authInfo runtime.ClientAuthInfoWriter) (*PostServicePortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServicePortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postService_ports",
		Method:             "POST",
		PathPattern:        "/api/1.0/service_ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostServicePortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostServicePortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postService_ports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostServices Create / Update Services
*/
func (a *Client) PostServices(params *PostServicesParams, authInfo runtime.ClientAuthInfoWriter) (*PostServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postServices",
		Method:             "POST",
		PathPattern:        "/api/1.0/services/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostServices2 creates update services

  Post a Service. Required parameters: <ul> <li>name <b>OR</b> display_name</li>
*/
func (a *Client) PostServices2(params *PostServices2Params, authInfo runtime.ClientAuthInfoWriter) (*PostServices2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServices2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postServices2",
		Method:             "POST",
		PathPattern:        "/api/2.0/services/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostServices2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostServices2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postServices2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutServiceListenerPorts creates update service ports

  Currently, in order to update a service port, id (path), device_name/device_id, and listening_ip/remote_ips are needed even if they are staying the same - we use those fields to identify the port.
*/
func (a *Client) PutServiceListenerPorts(params *PutServiceListenerPortsParams, authInfo runtime.ClientAuthInfoWriter) (*PutServiceListenerPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutServiceListenerPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putServiceListenerPorts",
		Method:             "PUT",
		PathPattern:        "/api/2.0/service_listener_ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutServiceListenerPortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutServiceListenerPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putServiceListenerPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
