// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetServices2Params creates a new GetServices2Params object
// with the default values initialized.
func NewGetServices2Params() *GetServices2Params {
	var ()
	return &GetServices2Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetServices2ParamsWithTimeout creates a new GetServices2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetServices2ParamsWithTimeout(timeout time.Duration) *GetServices2Params {
	var ()
	return &GetServices2Params{

		timeout: timeout,
	}
}

// NewGetServices2ParamsWithContext creates a new GetServices2Params object
// with the default values initialized, and the ability to set a context for a request
func NewGetServices2ParamsWithContext(ctx context.Context) *GetServices2Params {
	var ()
	return &GetServices2Params{

		Context: ctx,
	}
}

// NewGetServices2ParamsWithHTTPClient creates a new GetServices2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetServices2ParamsWithHTTPClient(client *http.Client) *GetServices2Params {
	var ()
	return &GetServices2Params{
		HTTPClient: client,
	}
}

/*GetServices2Params contains all the parameters to send to the API endpoint
for the get services2 operation typically these are written to a http.Request
*/
type GetServices2Params struct {

	/*Category
	  name of the category

	*/
	Category *string
	/*Displayname
	  name of the service

	*/
	Displayname *string
	/*ID
	  D42 ID of the service

	*/
	ID *int64
	/*Vendor
	  vendor name

	*/
	Vendor *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get services2 params
func (o *GetServices2Params) WithTimeout(timeout time.Duration) *GetServices2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get services2 params
func (o *GetServices2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get services2 params
func (o *GetServices2Params) WithContext(ctx context.Context) *GetServices2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get services2 params
func (o *GetServices2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get services2 params
func (o *GetServices2Params) WithHTTPClient(client *http.Client) *GetServices2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get services2 params
func (o *GetServices2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the get services2 params
func (o *GetServices2Params) WithCategory(category *string) *GetServices2Params {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the get services2 params
func (o *GetServices2Params) SetCategory(category *string) {
	o.Category = category
}

// WithDisplayname adds the displayname to the get services2 params
func (o *GetServices2Params) WithDisplayname(displayname *string) *GetServices2Params {
	o.SetDisplayname(displayname)
	return o
}

// SetDisplayname adds the displayname to the get services2 params
func (o *GetServices2Params) SetDisplayname(displayname *string) {
	o.Displayname = displayname
}

// WithID adds the id to the get services2 params
func (o *GetServices2Params) WithID(id *int64) *GetServices2Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the get services2 params
func (o *GetServices2Params) SetID(id *int64) {
	o.ID = id
}

// WithVendor adds the vendor to the get services2 params
func (o *GetServices2Params) WithVendor(vendor *string) *GetServices2Params {
	o.SetVendor(vendor)
	return o
}

// SetVendor adds the vendor to the get services2 params
func (o *GetServices2Params) SetVendor(vendor *string) {
	o.Vendor = vendor
}

// WriteToRequest writes these params to a swagger request
func (o *GetServices2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// query param category
		var qrCategory string
		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {
			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}

	}

	if o.Displayname != nil {

		// query param displayname
		var qrDisplayname string
		if o.Displayname != nil {
			qrDisplayname = *o.Displayname
		}
		qDisplayname := qrDisplayname
		if qDisplayname != "" {
			if err := r.SetQueryParam("displayname", qDisplayname); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID int64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Vendor != nil {

		// query param vendor
		var qrVendor string
		if o.Vendor != nil {
			qrVendor = *o.Vendor
		}
		qVendor := qrVendor
		if qVendor != "" {
			if err := r.SetQueryParam("vendor", qVendor); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
