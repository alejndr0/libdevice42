// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetIgnoredServiceReader is a Reader for the GetIgnoredService structure.
type GetIgnoredServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIgnoredServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIgnoredServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetIgnoredServiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetIgnoredServiceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIgnoredServiceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetIgnoredServiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetIgnoredServiceMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetIgnoredServiceGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetIgnoredServiceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetIgnoredServiceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIgnoredServiceOK creates a GetIgnoredServiceOK with default headers values
func NewGetIgnoredServiceOK() *GetIgnoredServiceOK {
	return &GetIgnoredServiceOK{}
}

/*GetIgnoredServiceOK handles this case with default header values.

The above command returns results like this:
*/
type GetIgnoredServiceOK struct {
	Payload *GetIgnoredServiceOKBody
}

func (o *GetIgnoredServiceOK) Error() string {
	return fmt.Sprintf("[GET /api/2.0/ignored_service/][%d] getIgnoredServiceOK  %+v", 200, o.Payload)
}

func (o *GetIgnoredServiceOK) GetPayload() *GetIgnoredServiceOKBody {
	return o.Payload
}

func (o *GetIgnoredServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetIgnoredServiceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIgnoredServiceBadRequest creates a GetIgnoredServiceBadRequest with default headers values
func NewGetIgnoredServiceBadRequest() *GetIgnoredServiceBadRequest {
	return &GetIgnoredServiceBadRequest{}
}

/*GetIgnoredServiceBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type GetIgnoredServiceBadRequest struct {
}

func (o *GetIgnoredServiceBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/2.0/ignored_service/][%d] getIgnoredServiceBadRequest ", 400)
}

func (o *GetIgnoredServiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIgnoredServiceUnauthorized creates a GetIgnoredServiceUnauthorized with default headers values
func NewGetIgnoredServiceUnauthorized() *GetIgnoredServiceUnauthorized {
	return &GetIgnoredServiceUnauthorized{}
}

/*GetIgnoredServiceUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type GetIgnoredServiceUnauthorized struct {
}

func (o *GetIgnoredServiceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/2.0/ignored_service/][%d] getIgnoredServiceUnauthorized ", 401)
}

func (o *GetIgnoredServiceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIgnoredServiceForbidden creates a GetIgnoredServiceForbidden with default headers values
func NewGetIgnoredServiceForbidden() *GetIgnoredServiceForbidden {
	return &GetIgnoredServiceForbidden{}
}

/*GetIgnoredServiceForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type GetIgnoredServiceForbidden struct {
}

func (o *GetIgnoredServiceForbidden) Error() string {
	return fmt.Sprintf("[GET /api/2.0/ignored_service/][%d] getIgnoredServiceForbidden ", 403)
}

func (o *GetIgnoredServiceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIgnoredServiceNotFound creates a GetIgnoredServiceNotFound with default headers values
func NewGetIgnoredServiceNotFound() *GetIgnoredServiceNotFound {
	return &GetIgnoredServiceNotFound{}
}

/*GetIgnoredServiceNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type GetIgnoredServiceNotFound struct {
}

func (o *GetIgnoredServiceNotFound) Error() string {
	return fmt.Sprintf("[GET /api/2.0/ignored_service/][%d] getIgnoredServiceNotFound ", 404)
}

func (o *GetIgnoredServiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIgnoredServiceMethodNotAllowed creates a GetIgnoredServiceMethodNotAllowed with default headers values
func NewGetIgnoredServiceMethodNotAllowed() *GetIgnoredServiceMethodNotAllowed {
	return &GetIgnoredServiceMethodNotAllowed{}
}

/*GetIgnoredServiceMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type GetIgnoredServiceMethodNotAllowed struct {
}

func (o *GetIgnoredServiceMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/2.0/ignored_service/][%d] getIgnoredServiceMethodNotAllowed ", 405)
}

func (o *GetIgnoredServiceMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIgnoredServiceGone creates a GetIgnoredServiceGone with default headers values
func NewGetIgnoredServiceGone() *GetIgnoredServiceGone {
	return &GetIgnoredServiceGone{}
}

/*GetIgnoredServiceGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type GetIgnoredServiceGone struct {
}

func (o *GetIgnoredServiceGone) Error() string {
	return fmt.Sprintf("[GET /api/2.0/ignored_service/][%d] getIgnoredServiceGone ", 410)
}

func (o *GetIgnoredServiceGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIgnoredServiceInternalServerError creates a GetIgnoredServiceInternalServerError with default headers values
func NewGetIgnoredServiceInternalServerError() *GetIgnoredServiceInternalServerError {
	return &GetIgnoredServiceInternalServerError{}
}

/*GetIgnoredServiceInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type GetIgnoredServiceInternalServerError struct {
}

func (o *GetIgnoredServiceInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/2.0/ignored_service/][%d] getIgnoredServiceInternalServerError ", 500)
}

func (o *GetIgnoredServiceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIgnoredServiceServiceUnavailable creates a GetIgnoredServiceServiceUnavailable with default headers values
func NewGetIgnoredServiceServiceUnavailable() *GetIgnoredServiceServiceUnavailable {
	return &GetIgnoredServiceServiceUnavailable{}
}

/*GetIgnoredServiceServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type GetIgnoredServiceServiceUnavailable struct {
}

func (o *GetIgnoredServiceServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/2.0/ignored_service/][%d] getIgnoredServiceServiceUnavailable ", 503)
}

func (o *GetIgnoredServiceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetIgnoredServiceOKBody get ignored service o k body
swagger:model GetIgnoredServiceOKBody
*/
type GetIgnoredServiceOKBody struct {

	// ignored services
	IgnoredServices []*IgnoredServicesItems0 `json:"ignored_services"`

	// limit
	Limit interface{} `json:"limit,omitempty"`

	// offset
	Offset interface{} `json:"offset,omitempty"`

	// total count
	TotalCount interface{} `json:"total_count,omitempty"`
}

// Validate validates this get ignored service o k body
func (o *GetIgnoredServiceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIgnoredServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIgnoredServiceOKBody) validateIgnoredServices(formats strfmt.Registry) error {

	if swag.IsZero(o.IgnoredServices) { // not required
		return nil
	}

	for i := 0; i < len(o.IgnoredServices); i++ {
		if swag.IsZero(o.IgnoredServices[i]) { // not required
			continue
		}

		if o.IgnoredServices[i] != nil {
			if err := o.IgnoredServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getIgnoredServiceOK" + "." + "ignored_services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIgnoredServiceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIgnoredServiceOKBody) UnmarshalBinary(b []byte) error {
	var res GetIgnoredServiceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IgnoredServicesItems0 ignored services items0
swagger:model IgnoredServicesItems0
*/
type IgnoredServicesItems0 struct {

	// active
	Active bool `json:"active,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// ignored level
	IgnoredLevel int64 `json:"ignored_level,omitempty"`

	// ignored text
	IgnoredText string `json:"ignored_text,omitempty"`
}

// Validate validates this ignored services items0
func (o *IgnoredServicesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *IgnoredServicesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IgnoredServicesItems0) UnmarshalBinary(b []byte) error {
	var res IgnoredServicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
