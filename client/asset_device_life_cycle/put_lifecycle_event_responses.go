// Code generated by go-swagger; DO NOT EDIT.

package asset_device_life_cycle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutLifecycleEventReader is a Reader for the PutLifecycleEvent structure.
type PutLifecycleEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutLifecycleEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutLifecycleEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutLifecycleEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutLifecycleEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutLifecycleEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutLifecycleEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPutLifecycleEventMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewPutLifecycleEventGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutLifecycleEventInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutLifecycleEventServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutLifecycleEventOK creates a PutLifecycleEventOK with default headers values
func NewPutLifecycleEventOK() *PutLifecycleEventOK {
	return &PutLifecycleEventOK{}
}

/*PutLifecycleEventOK handles this case with default header values.

The above command returns results like this:
*/
type PutLifecycleEventOK struct {
	Payload *PutLifecycleEventOKBody
}

func (o *PutLifecycleEventOK) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/lifecycle_event/][%d] putLifecycleEventOK  %+v", 200, o.Payload)
}

func (o *PutLifecycleEventOK) GetPayload() *PutLifecycleEventOKBody {
	return o.Payload
}

func (o *PutLifecycleEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutLifecycleEventOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutLifecycleEventBadRequest creates a PutLifecycleEventBadRequest with default headers values
func NewPutLifecycleEventBadRequest() *PutLifecycleEventBadRequest {
	return &PutLifecycleEventBadRequest{}
}

/*PutLifecycleEventBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type PutLifecycleEventBadRequest struct {
}

func (o *PutLifecycleEventBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/lifecycle_event/][%d] putLifecycleEventBadRequest ", 400)
}

func (o *PutLifecycleEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutLifecycleEventUnauthorized creates a PutLifecycleEventUnauthorized with default headers values
func NewPutLifecycleEventUnauthorized() *PutLifecycleEventUnauthorized {
	return &PutLifecycleEventUnauthorized{}
}

/*PutLifecycleEventUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type PutLifecycleEventUnauthorized struct {
}

func (o *PutLifecycleEventUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/lifecycle_event/][%d] putLifecycleEventUnauthorized ", 401)
}

func (o *PutLifecycleEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutLifecycleEventForbidden creates a PutLifecycleEventForbidden with default headers values
func NewPutLifecycleEventForbidden() *PutLifecycleEventForbidden {
	return &PutLifecycleEventForbidden{}
}

/*PutLifecycleEventForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type PutLifecycleEventForbidden struct {
}

func (o *PutLifecycleEventForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/lifecycle_event/][%d] putLifecycleEventForbidden ", 403)
}

func (o *PutLifecycleEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutLifecycleEventNotFound creates a PutLifecycleEventNotFound with default headers values
func NewPutLifecycleEventNotFound() *PutLifecycleEventNotFound {
	return &PutLifecycleEventNotFound{}
}

/*PutLifecycleEventNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type PutLifecycleEventNotFound struct {
}

func (o *PutLifecycleEventNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/lifecycle_event/][%d] putLifecycleEventNotFound ", 404)
}

func (o *PutLifecycleEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutLifecycleEventMethodNotAllowed creates a PutLifecycleEventMethodNotAllowed with default headers values
func NewPutLifecycleEventMethodNotAllowed() *PutLifecycleEventMethodNotAllowed {
	return &PutLifecycleEventMethodNotAllowed{}
}

/*PutLifecycleEventMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type PutLifecycleEventMethodNotAllowed struct {
}

func (o *PutLifecycleEventMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/lifecycle_event/][%d] putLifecycleEventMethodNotAllowed ", 405)
}

func (o *PutLifecycleEventMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutLifecycleEventGone creates a PutLifecycleEventGone with default headers values
func NewPutLifecycleEventGone() *PutLifecycleEventGone {
	return &PutLifecycleEventGone{}
}

/*PutLifecycleEventGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type PutLifecycleEventGone struct {
}

func (o *PutLifecycleEventGone) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/lifecycle_event/][%d] putLifecycleEventGone ", 410)
}

func (o *PutLifecycleEventGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutLifecycleEventInternalServerError creates a PutLifecycleEventInternalServerError with default headers values
func NewPutLifecycleEventInternalServerError() *PutLifecycleEventInternalServerError {
	return &PutLifecycleEventInternalServerError{}
}

/*PutLifecycleEventInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type PutLifecycleEventInternalServerError struct {
}

func (o *PutLifecycleEventInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/lifecycle_event/][%d] putLifecycleEventInternalServerError ", 500)
}

func (o *PutLifecycleEventInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutLifecycleEventServiceUnavailable creates a PutLifecycleEventServiceUnavailable with default headers values
func NewPutLifecycleEventServiceUnavailable() *PutLifecycleEventServiceUnavailable {
	return &PutLifecycleEventServiceUnavailable{}
}

/*PutLifecycleEventServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type PutLifecycleEventServiceUnavailable struct {
}

func (o *PutLifecycleEventServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/lifecycle_event/][%d] putLifecycleEventServiceUnavailable ", 503)
}

func (o *PutLifecycleEventServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PutLifecycleEventOKBody put lifecycle event o k body
swagger:model PutLifecycleEventOKBody
*/
type PutLifecycleEventOKBody struct {

	// code
	Code interface{} `json:"code,omitempty"`

	// msg
	Msg interface{} `json:"msg,omitempty"`
}

// Validate validates this put lifecycle event o k body
func (o *PutLifecycleEventOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutLifecycleEventOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutLifecycleEventOKBody) UnmarshalBinary(b []byte) error {
	var res PutLifecycleEventOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
