// Code generated by go-swagger; DO NOT EDIT.

package asset_device_life_cycle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetLifecycleEventParams creates a new GetLifecycleEventParams object
// with the default values initialized.
func NewGetLifecycleEventParams() *GetLifecycleEventParams {
	var ()
	return &GetLifecycleEventParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLifecycleEventParamsWithTimeout creates a new GetLifecycleEventParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLifecycleEventParamsWithTimeout(timeout time.Duration) *GetLifecycleEventParams {
	var ()
	return &GetLifecycleEventParams{

		timeout: timeout,
	}
}

// NewGetLifecycleEventParamsWithContext creates a new GetLifecycleEventParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLifecycleEventParamsWithContext(ctx context.Context) *GetLifecycleEventParams {
	var ()
	return &GetLifecycleEventParams{

		Context: ctx,
	}
}

// NewGetLifecycleEventParamsWithHTTPClient creates a new GetLifecycleEventParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLifecycleEventParamsWithHTTPClient(client *http.Client) *GetLifecycleEventParams {
	var ()
	return &GetLifecycleEventParams{
		HTTPClient: client,
	}
}

/*GetLifecycleEventParams contains all the parameters to send to the API endpoint
for the get lifecycle event operation typically these are written to a http.Request
*/
type GetLifecycleEventParams struct {

	/*Asset
	  filter by asset name

	*/
	Asset *string
	/*DateGt
	  filter by date greater than (YYYY-MM-DD)

	*/
	DateGt *string
	/*DateLt
	  filter by date less than (YYYY-MM-DD)

	*/
	DateLt *string
	/*Device
	  filter by device name

	*/
	Device *string
	/*Enduser
	  filter by end user name

	*/
	Enduser *string
	/*Type
	  filter by existing event type

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get lifecycle event params
func (o *GetLifecycleEventParams) WithTimeout(timeout time.Duration) *GetLifecycleEventParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get lifecycle event params
func (o *GetLifecycleEventParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get lifecycle event params
func (o *GetLifecycleEventParams) WithContext(ctx context.Context) *GetLifecycleEventParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get lifecycle event params
func (o *GetLifecycleEventParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get lifecycle event params
func (o *GetLifecycleEventParams) WithHTTPClient(client *http.Client) *GetLifecycleEventParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get lifecycle event params
func (o *GetLifecycleEventParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsset adds the asset to the get lifecycle event params
func (o *GetLifecycleEventParams) WithAsset(asset *string) *GetLifecycleEventParams {
	o.SetAsset(asset)
	return o
}

// SetAsset adds the asset to the get lifecycle event params
func (o *GetLifecycleEventParams) SetAsset(asset *string) {
	o.Asset = asset
}

// WithDateGt adds the dateGt to the get lifecycle event params
func (o *GetLifecycleEventParams) WithDateGt(dateGt *string) *GetLifecycleEventParams {
	o.SetDateGt(dateGt)
	return o
}

// SetDateGt adds the dateGt to the get lifecycle event params
func (o *GetLifecycleEventParams) SetDateGt(dateGt *string) {
	o.DateGt = dateGt
}

// WithDateLt adds the dateLt to the get lifecycle event params
func (o *GetLifecycleEventParams) WithDateLt(dateLt *string) *GetLifecycleEventParams {
	o.SetDateLt(dateLt)
	return o
}

// SetDateLt adds the dateLt to the get lifecycle event params
func (o *GetLifecycleEventParams) SetDateLt(dateLt *string) {
	o.DateLt = dateLt
}

// WithDevice adds the device to the get lifecycle event params
func (o *GetLifecycleEventParams) WithDevice(device *string) *GetLifecycleEventParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the get lifecycle event params
func (o *GetLifecycleEventParams) SetDevice(device *string) {
	o.Device = device
}

// WithEnduser adds the enduser to the get lifecycle event params
func (o *GetLifecycleEventParams) WithEnduser(enduser *string) *GetLifecycleEventParams {
	o.SetEnduser(enduser)
	return o
}

// SetEnduser adds the enduser to the get lifecycle event params
func (o *GetLifecycleEventParams) SetEnduser(enduser *string) {
	o.Enduser = enduser
}

// WithType adds the typeVar to the get lifecycle event params
func (o *GetLifecycleEventParams) WithType(typeVar *string) *GetLifecycleEventParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get lifecycle event params
func (o *GetLifecycleEventParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetLifecycleEventParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Asset != nil {

		// query param asset
		var qrAsset string
		if o.Asset != nil {
			qrAsset = *o.Asset
		}
		qAsset := qrAsset
		if qAsset != "" {
			if err := r.SetQueryParam("asset", qAsset); err != nil {
				return err
			}
		}

	}

	if o.DateGt != nil {

		// query param date_gt
		var qrDateGt string
		if o.DateGt != nil {
			qrDateGt = *o.DateGt
		}
		qDateGt := qrDateGt
		if qDateGt != "" {
			if err := r.SetQueryParam("date_gt", qDateGt); err != nil {
				return err
			}
		}

	}

	if o.DateLt != nil {

		// query param date_lt
		var qrDateLt string
		if o.DateLt != nil {
			qrDateLt = *o.DateLt
		}
		qDateLt := qrDateLt
		if qDateLt != "" {
			if err := r.SetQueryParam("date_lt", qDateLt); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// query param device
		var qrDevice string
		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {
			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}

	}

	if o.Enduser != nil {

		// query param enduser
		var qrEnduser string
		if o.Enduser != nil {
			qrEnduser = *o.Enduser
		}
		qEnduser := qrEnduser
		if qEnduser != "" {
			if err := r.SetQueryParam("enduser", qEnduser); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
