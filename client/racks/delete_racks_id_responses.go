// Code generated by go-swagger; DO NOT EDIT.

package racks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteRacksIDReader is a Reader for the DeleteRacksID structure.
type DeleteRacksIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRacksIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRacksIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteRacksIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteRacksIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteRacksIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRacksIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteRacksIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewDeleteRacksIDGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteRacksIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteRacksIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteRacksIDOK creates a DeleteRacksIDOK with default headers values
func NewDeleteRacksIDOK() *DeleteRacksIDOK {
	return &DeleteRacksIDOK{}
}

/*DeleteRacksIDOK handles this case with default header values.

The above command returns results like this:
*/
type DeleteRacksIDOK struct {
	Payload *DeleteRacksIDOKBody
}

func (o *DeleteRacksIDOK) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/racks/{ID}/][%d] deleteRacksIdOK  %+v", 200, o.Payload)
}

func (o *DeleteRacksIDOK) GetPayload() *DeleteRacksIDOKBody {
	return o.Payload
}

func (o *DeleteRacksIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteRacksIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRacksIDBadRequest creates a DeleteRacksIDBadRequest with default headers values
func NewDeleteRacksIDBadRequest() *DeleteRacksIDBadRequest {
	return &DeleteRacksIDBadRequest{}
}

/*DeleteRacksIDBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type DeleteRacksIDBadRequest struct {
}

func (o *DeleteRacksIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/racks/{ID}/][%d] deleteRacksIdBadRequest ", 400)
}

func (o *DeleteRacksIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRacksIDUnauthorized creates a DeleteRacksIDUnauthorized with default headers values
func NewDeleteRacksIDUnauthorized() *DeleteRacksIDUnauthorized {
	return &DeleteRacksIDUnauthorized{}
}

/*DeleteRacksIDUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type DeleteRacksIDUnauthorized struct {
}

func (o *DeleteRacksIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/racks/{ID}/][%d] deleteRacksIdUnauthorized ", 401)
}

func (o *DeleteRacksIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRacksIDForbidden creates a DeleteRacksIDForbidden with default headers values
func NewDeleteRacksIDForbidden() *DeleteRacksIDForbidden {
	return &DeleteRacksIDForbidden{}
}

/*DeleteRacksIDForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type DeleteRacksIDForbidden struct {
}

func (o *DeleteRacksIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/racks/{ID}/][%d] deleteRacksIdForbidden ", 403)
}

func (o *DeleteRacksIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRacksIDNotFound creates a DeleteRacksIDNotFound with default headers values
func NewDeleteRacksIDNotFound() *DeleteRacksIDNotFound {
	return &DeleteRacksIDNotFound{}
}

/*DeleteRacksIDNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type DeleteRacksIDNotFound struct {
}

func (o *DeleteRacksIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/racks/{ID}/][%d] deleteRacksIdNotFound ", 404)
}

func (o *DeleteRacksIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRacksIDMethodNotAllowed creates a DeleteRacksIDMethodNotAllowed with default headers values
func NewDeleteRacksIDMethodNotAllowed() *DeleteRacksIDMethodNotAllowed {
	return &DeleteRacksIDMethodNotAllowed{}
}

/*DeleteRacksIDMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type DeleteRacksIDMethodNotAllowed struct {
}

func (o *DeleteRacksIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/racks/{ID}/][%d] deleteRacksIdMethodNotAllowed ", 405)
}

func (o *DeleteRacksIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRacksIDGone creates a DeleteRacksIDGone with default headers values
func NewDeleteRacksIDGone() *DeleteRacksIDGone {
	return &DeleteRacksIDGone{}
}

/*DeleteRacksIDGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type DeleteRacksIDGone struct {
}

func (o *DeleteRacksIDGone) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/racks/{ID}/][%d] deleteRacksIdGone ", 410)
}

func (o *DeleteRacksIDGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRacksIDInternalServerError creates a DeleteRacksIDInternalServerError with default headers values
func NewDeleteRacksIDInternalServerError() *DeleteRacksIDInternalServerError {
	return &DeleteRacksIDInternalServerError{}
}

/*DeleteRacksIDInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type DeleteRacksIDInternalServerError struct {
}

func (o *DeleteRacksIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/racks/{ID}/][%d] deleteRacksIdInternalServerError ", 500)
}

func (o *DeleteRacksIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRacksIDServiceUnavailable creates a DeleteRacksIDServiceUnavailable with default headers values
func NewDeleteRacksIDServiceUnavailable() *DeleteRacksIDServiceUnavailable {
	return &DeleteRacksIDServiceUnavailable{}
}

/*DeleteRacksIDServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type DeleteRacksIDServiceUnavailable struct {
}

func (o *DeleteRacksIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/racks/{ID}/][%d] deleteRacksIdServiceUnavailable ", 503)
}

func (o *DeleteRacksIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DeleteRacksIDOKBody delete racks ID o k body
swagger:model DeleteRacksIDOKBody
*/
type DeleteRacksIDOKBody struct {

	// deleted
	Deleted interface{} `json:"deleted,omitempty"`

	// id
	ID interface{} `json:"id,omitempty"`
}

// Validate validates this delete racks ID o k body
func (o *DeleteRacksIDOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteRacksIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteRacksIDOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteRacksIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
