// Code generated by go-swagger; DO NOT EDIT.

package telco_circuits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetCircuitsParams creates a new GetCircuitsParams object
// with the default values initialized.
func NewGetCircuitsParams() *GetCircuitsParams {
	var ()
	return &GetCircuitsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCircuitsParamsWithTimeout creates a new GetCircuitsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCircuitsParamsWithTimeout(timeout time.Duration) *GetCircuitsParams {
	var ()
	return &GetCircuitsParams{

		timeout: timeout,
	}
}

// NewGetCircuitsParamsWithContext creates a new GetCircuitsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCircuitsParamsWithContext(ctx context.Context) *GetCircuitsParams {
	var ()
	return &GetCircuitsParams{

		Context: ctx,
	}
}

// NewGetCircuitsParamsWithHTTPClient creates a new GetCircuitsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCircuitsParamsWithHTTPClient(client *http.Client) *GetCircuitsParams {
	var ()
	return &GetCircuitsParams{
		HTTPClient: client,
	}
}

/*GetCircuitsParams contains all the parameters to send to the API endpoint
for the get circuits operation typically these are written to a http.Request
*/
type GetCircuitsParams struct {

	/*ID
	  ID for the cricuit (D42 ID)

	*/
	ID *string
	/*Bandwidth
	  bandwidth in kbps (mutiply factor of 1024)

	*/
	Bandwidth *string
	/*CircuitID
	  circuit id

	*/
	CircuitID *string
	/*Customer
	  filter by customer name

	*/
	Customer *string
	/*Dmarc
	  DMARC name

	*/
	Dmarc *string
	/*DramcID
	  ID of the DMARC

	*/
	DramcID *string
	/*EndPointCircuitID
	  if end_point type is circuit, this is circuit_id of the circuit. Absent otherwise

	*/
	EndPointCircuitID *string
	/*EndPointDevice
	  if end_point type is device, this is name of the device. Absent otherwise

	*/
	EndPointDevice *string
	/*EndPointID
	  ID of the end point

	*/
	EndPointID *string
	/*EndPointPatchPanel
	  if end_point type is patch_panel_port, this is name of the patch panel. Absent otherwise

	*/
	EndPointPatchPanel *string
	/*EndPointPatchPanelID
	  if end_point type is patch_panel_port, this is ID of the patch panel. Absent otherwise

	*/
	EndPointPatchPanelID *string
	/*EndPointPatchPanelPort
	  if end_point type is patch_panel_port, this is name of the patch panel port. Absent otherwise

	*/
	EndPointPatchPanelPort *string
	/*EndPointSwitch
	  if end_point type is switchport, this is name of the switch. Absent otherwise

	*/
	EndPointSwitch *string
	/*EndPointSwitchport
	  if end_point type is switchport, this is name of the switch port. Absent otherwise

	*/
	EndPointSwitchport *string
	/*EndPointType
	  Type of end point.

	*/
	EndPointType *string
	/*EndPointVendor
	  if end_point type is vendofr, this is name of the vendor. Absent otherwise

	*/
	EndPointVendor *string
	/*Notes
	  Any additional notes

	*/
	Notes *string
	/*OrderDate
	  Order number

	*/
	OrderDate *string
	/*OriginCircuitID
	  if origin type is circuit, this is circuit_id of the circuit. Absent otherwise

	*/
	OriginCircuitID *string
	/*OriginDevice
	  if origin type is device, this is name of the device. Absent otherwise

	*/
	OriginDevice *string
	/*OriginID
	  ID of the origin point

	*/
	OriginID *string
	/*OriginPatchPanel
	  if origin type is patch_panel_port, this is name of the patch panel. Absent otherwise

	*/
	OriginPatchPanel *string
	/*OriginPatchPanelID
	  if origin type is patch_panel_port, this is ID of the patch panel. Absent otherwise

	*/
	OriginPatchPanelID *string
	/*OriginPatchPanelPort
	  if origin type is patch_panel_port, this is name of the patch panel port. Absent otherwise

	*/
	OriginPatchPanelPort *string
	/*OriginSwitch
	  if origin type is switchport, this is name of the switch. Absent otherwise

	*/
	OriginSwitch *string
	/*OriginSwitchport
	  if origin type is switchport, this is name of the switch port. Absent otherwise

	*/
	OriginSwitchport *string
	/*OriginType
	  Type of origin point.

	*/
	OriginType *string
	/*OriginVendor
	  if origin type is vendor, this is name of the vendor. Absent otherwise

	*/
	OriginVendor *string
	/*ProvisionDate
	  Text field.

	*/
	ProvisionDate *string
	/*TurnOnDate*/
	TurnOnDate *string
	/*Type*/
	Type *string
	/*Vendor
	  The cloud vendor

	*/
	Vendor *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get circuits params
func (o *GetCircuitsParams) WithTimeout(timeout time.Duration) *GetCircuitsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get circuits params
func (o *GetCircuitsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get circuits params
func (o *GetCircuitsParams) WithContext(ctx context.Context) *GetCircuitsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get circuits params
func (o *GetCircuitsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get circuits params
func (o *GetCircuitsParams) WithHTTPClient(client *http.Client) *GetCircuitsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get circuits params
func (o *GetCircuitsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get circuits params
func (o *GetCircuitsParams) WithID(id *string) *GetCircuitsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get circuits params
func (o *GetCircuitsParams) SetID(id *string) {
	o.ID = id
}

// WithBandwidth adds the bandwidth to the get circuits params
func (o *GetCircuitsParams) WithBandwidth(bandwidth *string) *GetCircuitsParams {
	o.SetBandwidth(bandwidth)
	return o
}

// SetBandwidth adds the bandwidth to the get circuits params
func (o *GetCircuitsParams) SetBandwidth(bandwidth *string) {
	o.Bandwidth = bandwidth
}

// WithCircuitID adds the circuitID to the get circuits params
func (o *GetCircuitsParams) WithCircuitID(circuitID *string) *GetCircuitsParams {
	o.SetCircuitID(circuitID)
	return o
}

// SetCircuitID adds the circuitId to the get circuits params
func (o *GetCircuitsParams) SetCircuitID(circuitID *string) {
	o.CircuitID = circuitID
}

// WithCustomer adds the customer to the get circuits params
func (o *GetCircuitsParams) WithCustomer(customer *string) *GetCircuitsParams {
	o.SetCustomer(customer)
	return o
}

// SetCustomer adds the customer to the get circuits params
func (o *GetCircuitsParams) SetCustomer(customer *string) {
	o.Customer = customer
}

// WithDmarc adds the dmarc to the get circuits params
func (o *GetCircuitsParams) WithDmarc(dmarc *string) *GetCircuitsParams {
	o.SetDmarc(dmarc)
	return o
}

// SetDmarc adds the dmarc to the get circuits params
func (o *GetCircuitsParams) SetDmarc(dmarc *string) {
	o.Dmarc = dmarc
}

// WithDramcID adds the dramcID to the get circuits params
func (o *GetCircuitsParams) WithDramcID(dramcID *string) *GetCircuitsParams {
	o.SetDramcID(dramcID)
	return o
}

// SetDramcID adds the dramcId to the get circuits params
func (o *GetCircuitsParams) SetDramcID(dramcID *string) {
	o.DramcID = dramcID
}

// WithEndPointCircuitID adds the endPointCircuitID to the get circuits params
func (o *GetCircuitsParams) WithEndPointCircuitID(endPointCircuitID *string) *GetCircuitsParams {
	o.SetEndPointCircuitID(endPointCircuitID)
	return o
}

// SetEndPointCircuitID adds the endPointCircuitId to the get circuits params
func (o *GetCircuitsParams) SetEndPointCircuitID(endPointCircuitID *string) {
	o.EndPointCircuitID = endPointCircuitID
}

// WithEndPointDevice adds the endPointDevice to the get circuits params
func (o *GetCircuitsParams) WithEndPointDevice(endPointDevice *string) *GetCircuitsParams {
	o.SetEndPointDevice(endPointDevice)
	return o
}

// SetEndPointDevice adds the endPointDevice to the get circuits params
func (o *GetCircuitsParams) SetEndPointDevice(endPointDevice *string) {
	o.EndPointDevice = endPointDevice
}

// WithEndPointID adds the endPointID to the get circuits params
func (o *GetCircuitsParams) WithEndPointID(endPointID *string) *GetCircuitsParams {
	o.SetEndPointID(endPointID)
	return o
}

// SetEndPointID adds the endPointId to the get circuits params
func (o *GetCircuitsParams) SetEndPointID(endPointID *string) {
	o.EndPointID = endPointID
}

// WithEndPointPatchPanel adds the endPointPatchPanel to the get circuits params
func (o *GetCircuitsParams) WithEndPointPatchPanel(endPointPatchPanel *string) *GetCircuitsParams {
	o.SetEndPointPatchPanel(endPointPatchPanel)
	return o
}

// SetEndPointPatchPanel adds the endPointPatchPanel to the get circuits params
func (o *GetCircuitsParams) SetEndPointPatchPanel(endPointPatchPanel *string) {
	o.EndPointPatchPanel = endPointPatchPanel
}

// WithEndPointPatchPanelID adds the endPointPatchPanelID to the get circuits params
func (o *GetCircuitsParams) WithEndPointPatchPanelID(endPointPatchPanelID *string) *GetCircuitsParams {
	o.SetEndPointPatchPanelID(endPointPatchPanelID)
	return o
}

// SetEndPointPatchPanelID adds the endPointPatchPanelId to the get circuits params
func (o *GetCircuitsParams) SetEndPointPatchPanelID(endPointPatchPanelID *string) {
	o.EndPointPatchPanelID = endPointPatchPanelID
}

// WithEndPointPatchPanelPort adds the endPointPatchPanelPort to the get circuits params
func (o *GetCircuitsParams) WithEndPointPatchPanelPort(endPointPatchPanelPort *string) *GetCircuitsParams {
	o.SetEndPointPatchPanelPort(endPointPatchPanelPort)
	return o
}

// SetEndPointPatchPanelPort adds the endPointPatchPanelPort to the get circuits params
func (o *GetCircuitsParams) SetEndPointPatchPanelPort(endPointPatchPanelPort *string) {
	o.EndPointPatchPanelPort = endPointPatchPanelPort
}

// WithEndPointSwitch adds the endPointSwitch to the get circuits params
func (o *GetCircuitsParams) WithEndPointSwitch(endPointSwitch *string) *GetCircuitsParams {
	o.SetEndPointSwitch(endPointSwitch)
	return o
}

// SetEndPointSwitch adds the endPointSwitch to the get circuits params
func (o *GetCircuitsParams) SetEndPointSwitch(endPointSwitch *string) {
	o.EndPointSwitch = endPointSwitch
}

// WithEndPointSwitchport adds the endPointSwitchport to the get circuits params
func (o *GetCircuitsParams) WithEndPointSwitchport(endPointSwitchport *string) *GetCircuitsParams {
	o.SetEndPointSwitchport(endPointSwitchport)
	return o
}

// SetEndPointSwitchport adds the endPointSwitchport to the get circuits params
func (o *GetCircuitsParams) SetEndPointSwitchport(endPointSwitchport *string) {
	o.EndPointSwitchport = endPointSwitchport
}

// WithEndPointType adds the endPointType to the get circuits params
func (o *GetCircuitsParams) WithEndPointType(endPointType *string) *GetCircuitsParams {
	o.SetEndPointType(endPointType)
	return o
}

// SetEndPointType adds the endPointType to the get circuits params
func (o *GetCircuitsParams) SetEndPointType(endPointType *string) {
	o.EndPointType = endPointType
}

// WithEndPointVendor adds the endPointVendor to the get circuits params
func (o *GetCircuitsParams) WithEndPointVendor(endPointVendor *string) *GetCircuitsParams {
	o.SetEndPointVendor(endPointVendor)
	return o
}

// SetEndPointVendor adds the endPointVendor to the get circuits params
func (o *GetCircuitsParams) SetEndPointVendor(endPointVendor *string) {
	o.EndPointVendor = endPointVendor
}

// WithNotes adds the notes to the get circuits params
func (o *GetCircuitsParams) WithNotes(notes *string) *GetCircuitsParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the get circuits params
func (o *GetCircuitsParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithOrderDate adds the orderDate to the get circuits params
func (o *GetCircuitsParams) WithOrderDate(orderDate *string) *GetCircuitsParams {
	o.SetOrderDate(orderDate)
	return o
}

// SetOrderDate adds the orderDate to the get circuits params
func (o *GetCircuitsParams) SetOrderDate(orderDate *string) {
	o.OrderDate = orderDate
}

// WithOriginCircuitID adds the originCircuitID to the get circuits params
func (o *GetCircuitsParams) WithOriginCircuitID(originCircuitID *string) *GetCircuitsParams {
	o.SetOriginCircuitID(originCircuitID)
	return o
}

// SetOriginCircuitID adds the originCircuitId to the get circuits params
func (o *GetCircuitsParams) SetOriginCircuitID(originCircuitID *string) {
	o.OriginCircuitID = originCircuitID
}

// WithOriginDevice adds the originDevice to the get circuits params
func (o *GetCircuitsParams) WithOriginDevice(originDevice *string) *GetCircuitsParams {
	o.SetOriginDevice(originDevice)
	return o
}

// SetOriginDevice adds the originDevice to the get circuits params
func (o *GetCircuitsParams) SetOriginDevice(originDevice *string) {
	o.OriginDevice = originDevice
}

// WithOriginID adds the originID to the get circuits params
func (o *GetCircuitsParams) WithOriginID(originID *string) *GetCircuitsParams {
	o.SetOriginID(originID)
	return o
}

// SetOriginID adds the originId to the get circuits params
func (o *GetCircuitsParams) SetOriginID(originID *string) {
	o.OriginID = originID
}

// WithOriginPatchPanel adds the originPatchPanel to the get circuits params
func (o *GetCircuitsParams) WithOriginPatchPanel(originPatchPanel *string) *GetCircuitsParams {
	o.SetOriginPatchPanel(originPatchPanel)
	return o
}

// SetOriginPatchPanel adds the originPatchPanel to the get circuits params
func (o *GetCircuitsParams) SetOriginPatchPanel(originPatchPanel *string) {
	o.OriginPatchPanel = originPatchPanel
}

// WithOriginPatchPanelID adds the originPatchPanelID to the get circuits params
func (o *GetCircuitsParams) WithOriginPatchPanelID(originPatchPanelID *string) *GetCircuitsParams {
	o.SetOriginPatchPanelID(originPatchPanelID)
	return o
}

// SetOriginPatchPanelID adds the originPatchPanelId to the get circuits params
func (o *GetCircuitsParams) SetOriginPatchPanelID(originPatchPanelID *string) {
	o.OriginPatchPanelID = originPatchPanelID
}

// WithOriginPatchPanelPort adds the originPatchPanelPort to the get circuits params
func (o *GetCircuitsParams) WithOriginPatchPanelPort(originPatchPanelPort *string) *GetCircuitsParams {
	o.SetOriginPatchPanelPort(originPatchPanelPort)
	return o
}

// SetOriginPatchPanelPort adds the originPatchPanelPort to the get circuits params
func (o *GetCircuitsParams) SetOriginPatchPanelPort(originPatchPanelPort *string) {
	o.OriginPatchPanelPort = originPatchPanelPort
}

// WithOriginSwitch adds the originSwitch to the get circuits params
func (o *GetCircuitsParams) WithOriginSwitch(originSwitch *string) *GetCircuitsParams {
	o.SetOriginSwitch(originSwitch)
	return o
}

// SetOriginSwitch adds the originSwitch to the get circuits params
func (o *GetCircuitsParams) SetOriginSwitch(originSwitch *string) {
	o.OriginSwitch = originSwitch
}

// WithOriginSwitchport adds the originSwitchport to the get circuits params
func (o *GetCircuitsParams) WithOriginSwitchport(originSwitchport *string) *GetCircuitsParams {
	o.SetOriginSwitchport(originSwitchport)
	return o
}

// SetOriginSwitchport adds the originSwitchport to the get circuits params
func (o *GetCircuitsParams) SetOriginSwitchport(originSwitchport *string) {
	o.OriginSwitchport = originSwitchport
}

// WithOriginType adds the originType to the get circuits params
func (o *GetCircuitsParams) WithOriginType(originType *string) *GetCircuitsParams {
	o.SetOriginType(originType)
	return o
}

// SetOriginType adds the originType to the get circuits params
func (o *GetCircuitsParams) SetOriginType(originType *string) {
	o.OriginType = originType
}

// WithOriginVendor adds the originVendor to the get circuits params
func (o *GetCircuitsParams) WithOriginVendor(originVendor *string) *GetCircuitsParams {
	o.SetOriginVendor(originVendor)
	return o
}

// SetOriginVendor adds the originVendor to the get circuits params
func (o *GetCircuitsParams) SetOriginVendor(originVendor *string) {
	o.OriginVendor = originVendor
}

// WithProvisionDate adds the provisionDate to the get circuits params
func (o *GetCircuitsParams) WithProvisionDate(provisionDate *string) *GetCircuitsParams {
	o.SetProvisionDate(provisionDate)
	return o
}

// SetProvisionDate adds the provisionDate to the get circuits params
func (o *GetCircuitsParams) SetProvisionDate(provisionDate *string) {
	o.ProvisionDate = provisionDate
}

// WithTurnOnDate adds the turnOnDate to the get circuits params
func (o *GetCircuitsParams) WithTurnOnDate(turnOnDate *string) *GetCircuitsParams {
	o.SetTurnOnDate(turnOnDate)
	return o
}

// SetTurnOnDate adds the turnOnDate to the get circuits params
func (o *GetCircuitsParams) SetTurnOnDate(turnOnDate *string) {
	o.TurnOnDate = turnOnDate
}

// WithType adds the typeVar to the get circuits params
func (o *GetCircuitsParams) WithType(typeVar *string) *GetCircuitsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get circuits params
func (o *GetCircuitsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithVendor adds the vendor to the get circuits params
func (o *GetCircuitsParams) WithVendor(vendor *string) *GetCircuitsParams {
	o.SetVendor(vendor)
	return o
}

// SetVendor adds the vendor to the get circuits params
func (o *GetCircuitsParams) SetVendor(vendor *string) {
	o.Vendor = vendor
}

// WriteToRequest writes these params to a swagger request
func (o *GetCircuitsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ID != nil {

		// query param ID
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("ID", qID); err != nil {
				return err
			}
		}

	}

	if o.Bandwidth != nil {

		// query param bandwidth
		var qrBandwidth string
		if o.Bandwidth != nil {
			qrBandwidth = *o.Bandwidth
		}
		qBandwidth := qrBandwidth
		if qBandwidth != "" {
			if err := r.SetQueryParam("bandwidth", qBandwidth); err != nil {
				return err
			}
		}

	}

	if o.CircuitID != nil {

		// query param circuit_id
		var qrCircuitID string
		if o.CircuitID != nil {
			qrCircuitID = *o.CircuitID
		}
		qCircuitID := qrCircuitID
		if qCircuitID != "" {
			if err := r.SetQueryParam("circuit_id", qCircuitID); err != nil {
				return err
			}
		}

	}

	if o.Customer != nil {

		// query param customer
		var qrCustomer string
		if o.Customer != nil {
			qrCustomer = *o.Customer
		}
		qCustomer := qrCustomer
		if qCustomer != "" {
			if err := r.SetQueryParam("customer", qCustomer); err != nil {
				return err
			}
		}

	}

	if o.Dmarc != nil {

		// query param dmarc
		var qrDmarc string
		if o.Dmarc != nil {
			qrDmarc = *o.Dmarc
		}
		qDmarc := qrDmarc
		if qDmarc != "" {
			if err := r.SetQueryParam("dmarc", qDmarc); err != nil {
				return err
			}
		}

	}

	if o.DramcID != nil {

		// query param dramc_id
		var qrDramcID string
		if o.DramcID != nil {
			qrDramcID = *o.DramcID
		}
		qDramcID := qrDramcID
		if qDramcID != "" {
			if err := r.SetQueryParam("dramc_id", qDramcID); err != nil {
				return err
			}
		}

	}

	if o.EndPointCircuitID != nil {

		// query param end_point_circuit_id
		var qrEndPointCircuitID string
		if o.EndPointCircuitID != nil {
			qrEndPointCircuitID = *o.EndPointCircuitID
		}
		qEndPointCircuitID := qrEndPointCircuitID
		if qEndPointCircuitID != "" {
			if err := r.SetQueryParam("end_point_circuit_id", qEndPointCircuitID); err != nil {
				return err
			}
		}

	}

	if o.EndPointDevice != nil {

		// query param end_point_device
		var qrEndPointDevice string
		if o.EndPointDevice != nil {
			qrEndPointDevice = *o.EndPointDevice
		}
		qEndPointDevice := qrEndPointDevice
		if qEndPointDevice != "" {
			if err := r.SetQueryParam("end_point_device", qEndPointDevice); err != nil {
				return err
			}
		}

	}

	if o.EndPointID != nil {

		// query param end_point_id
		var qrEndPointID string
		if o.EndPointID != nil {
			qrEndPointID = *o.EndPointID
		}
		qEndPointID := qrEndPointID
		if qEndPointID != "" {
			if err := r.SetQueryParam("end_point_id", qEndPointID); err != nil {
				return err
			}
		}

	}

	if o.EndPointPatchPanel != nil {

		// query param end_point_patch_panel
		var qrEndPointPatchPanel string
		if o.EndPointPatchPanel != nil {
			qrEndPointPatchPanel = *o.EndPointPatchPanel
		}
		qEndPointPatchPanel := qrEndPointPatchPanel
		if qEndPointPatchPanel != "" {
			if err := r.SetQueryParam("end_point_patch_panel", qEndPointPatchPanel); err != nil {
				return err
			}
		}

	}

	if o.EndPointPatchPanelID != nil {

		// query param end_point_patch_panel_id
		var qrEndPointPatchPanelID string
		if o.EndPointPatchPanelID != nil {
			qrEndPointPatchPanelID = *o.EndPointPatchPanelID
		}
		qEndPointPatchPanelID := qrEndPointPatchPanelID
		if qEndPointPatchPanelID != "" {
			if err := r.SetQueryParam("end_point_patch_panel_id", qEndPointPatchPanelID); err != nil {
				return err
			}
		}

	}

	if o.EndPointPatchPanelPort != nil {

		// query param end_point_patch_panel_port
		var qrEndPointPatchPanelPort string
		if o.EndPointPatchPanelPort != nil {
			qrEndPointPatchPanelPort = *o.EndPointPatchPanelPort
		}
		qEndPointPatchPanelPort := qrEndPointPatchPanelPort
		if qEndPointPatchPanelPort != "" {
			if err := r.SetQueryParam("end_point_patch_panel_port", qEndPointPatchPanelPort); err != nil {
				return err
			}
		}

	}

	if o.EndPointSwitch != nil {

		// query param end_point_switch
		var qrEndPointSwitch string
		if o.EndPointSwitch != nil {
			qrEndPointSwitch = *o.EndPointSwitch
		}
		qEndPointSwitch := qrEndPointSwitch
		if qEndPointSwitch != "" {
			if err := r.SetQueryParam("end_point_switch", qEndPointSwitch); err != nil {
				return err
			}
		}

	}

	if o.EndPointSwitchport != nil {

		// query param end_point_switchport
		var qrEndPointSwitchport string
		if o.EndPointSwitchport != nil {
			qrEndPointSwitchport = *o.EndPointSwitchport
		}
		qEndPointSwitchport := qrEndPointSwitchport
		if qEndPointSwitchport != "" {
			if err := r.SetQueryParam("end_point_switchport", qEndPointSwitchport); err != nil {
				return err
			}
		}

	}

	if o.EndPointType != nil {

		// query param end_point_type
		var qrEndPointType string
		if o.EndPointType != nil {
			qrEndPointType = *o.EndPointType
		}
		qEndPointType := qrEndPointType
		if qEndPointType != "" {
			if err := r.SetQueryParam("end_point_type", qEndPointType); err != nil {
				return err
			}
		}

	}

	if o.EndPointVendor != nil {

		// query param end_point_vendor
		var qrEndPointVendor string
		if o.EndPointVendor != nil {
			qrEndPointVendor = *o.EndPointVendor
		}
		qEndPointVendor := qrEndPointVendor
		if qEndPointVendor != "" {
			if err := r.SetQueryParam("end_point_vendor", qEndPointVendor); err != nil {
				return err
			}
		}

	}

	if o.Notes != nil {

		// query param notes
		var qrNotes string
		if o.Notes != nil {
			qrNotes = *o.Notes
		}
		qNotes := qrNotes
		if qNotes != "" {
			if err := r.SetQueryParam("notes", qNotes); err != nil {
				return err
			}
		}

	}

	if o.OrderDate != nil {

		// query param order_date
		var qrOrderDate string
		if o.OrderDate != nil {
			qrOrderDate = *o.OrderDate
		}
		qOrderDate := qrOrderDate
		if qOrderDate != "" {
			if err := r.SetQueryParam("order_date", qOrderDate); err != nil {
				return err
			}
		}

	}

	if o.OriginCircuitID != nil {

		// query param origin_circuit_id
		var qrOriginCircuitID string
		if o.OriginCircuitID != nil {
			qrOriginCircuitID = *o.OriginCircuitID
		}
		qOriginCircuitID := qrOriginCircuitID
		if qOriginCircuitID != "" {
			if err := r.SetQueryParam("origin_circuit_id", qOriginCircuitID); err != nil {
				return err
			}
		}

	}

	if o.OriginDevice != nil {

		// query param origin_device
		var qrOriginDevice string
		if o.OriginDevice != nil {
			qrOriginDevice = *o.OriginDevice
		}
		qOriginDevice := qrOriginDevice
		if qOriginDevice != "" {
			if err := r.SetQueryParam("origin_device", qOriginDevice); err != nil {
				return err
			}
		}

	}

	if o.OriginID != nil {

		// query param origin_id
		var qrOriginID string
		if o.OriginID != nil {
			qrOriginID = *o.OriginID
		}
		qOriginID := qrOriginID
		if qOriginID != "" {
			if err := r.SetQueryParam("origin_id", qOriginID); err != nil {
				return err
			}
		}

	}

	if o.OriginPatchPanel != nil {

		// query param origin_patch_panel
		var qrOriginPatchPanel string
		if o.OriginPatchPanel != nil {
			qrOriginPatchPanel = *o.OriginPatchPanel
		}
		qOriginPatchPanel := qrOriginPatchPanel
		if qOriginPatchPanel != "" {
			if err := r.SetQueryParam("origin_patch_panel", qOriginPatchPanel); err != nil {
				return err
			}
		}

	}

	if o.OriginPatchPanelID != nil {

		// query param origin_patch_panel_id
		var qrOriginPatchPanelID string
		if o.OriginPatchPanelID != nil {
			qrOriginPatchPanelID = *o.OriginPatchPanelID
		}
		qOriginPatchPanelID := qrOriginPatchPanelID
		if qOriginPatchPanelID != "" {
			if err := r.SetQueryParam("origin_patch_panel_id", qOriginPatchPanelID); err != nil {
				return err
			}
		}

	}

	if o.OriginPatchPanelPort != nil {

		// query param origin_patch_panel_port
		var qrOriginPatchPanelPort string
		if o.OriginPatchPanelPort != nil {
			qrOriginPatchPanelPort = *o.OriginPatchPanelPort
		}
		qOriginPatchPanelPort := qrOriginPatchPanelPort
		if qOriginPatchPanelPort != "" {
			if err := r.SetQueryParam("origin_patch_panel_port", qOriginPatchPanelPort); err != nil {
				return err
			}
		}

	}

	if o.OriginSwitch != nil {

		// query param origin_switch
		var qrOriginSwitch string
		if o.OriginSwitch != nil {
			qrOriginSwitch = *o.OriginSwitch
		}
		qOriginSwitch := qrOriginSwitch
		if qOriginSwitch != "" {
			if err := r.SetQueryParam("origin_switch", qOriginSwitch); err != nil {
				return err
			}
		}

	}

	if o.OriginSwitchport != nil {

		// query param origin_switchport
		var qrOriginSwitchport string
		if o.OriginSwitchport != nil {
			qrOriginSwitchport = *o.OriginSwitchport
		}
		qOriginSwitchport := qrOriginSwitchport
		if qOriginSwitchport != "" {
			if err := r.SetQueryParam("origin_switchport", qOriginSwitchport); err != nil {
				return err
			}
		}

	}

	if o.OriginType != nil {

		// query param origin_type
		var qrOriginType string
		if o.OriginType != nil {
			qrOriginType = *o.OriginType
		}
		qOriginType := qrOriginType
		if qOriginType != "" {
			if err := r.SetQueryParam("origin_type", qOriginType); err != nil {
				return err
			}
		}

	}

	if o.OriginVendor != nil {

		// query param origin_vendor
		var qrOriginVendor string
		if o.OriginVendor != nil {
			qrOriginVendor = *o.OriginVendor
		}
		qOriginVendor := qrOriginVendor
		if qOriginVendor != "" {
			if err := r.SetQueryParam("origin_vendor", qOriginVendor); err != nil {
				return err
			}
		}

	}

	if o.ProvisionDate != nil {

		// query param provision_date
		var qrProvisionDate string
		if o.ProvisionDate != nil {
			qrProvisionDate = *o.ProvisionDate
		}
		qProvisionDate := qrProvisionDate
		if qProvisionDate != "" {
			if err := r.SetQueryParam("provision_date", qProvisionDate); err != nil {
				return err
			}
		}

	}

	if o.TurnOnDate != nil {

		// query param turn_on_date
		var qrTurnOnDate string
		if o.TurnOnDate != nil {
			qrTurnOnDate = *o.TurnOnDate
		}
		qTurnOnDate := qrTurnOnDate
		if qTurnOnDate != "" {
			if err := r.SetQueryParam("turn_on_date", qTurnOnDate); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.Vendor != nil {

		// query param vendor
		var qrVendor string
		if o.Vendor != nil {
			qrVendor = *o.Vendor
		}
		qVendor := qrVendor
		if qVendor != "" {
			if err := r.SetQueryParam("vendor", qVendor); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
