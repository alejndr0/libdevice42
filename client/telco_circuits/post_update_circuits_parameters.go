// Code generated by go-swagger; DO NOT EDIT.

package telco_circuits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostUpdateCircuitsParams creates a new PostUpdateCircuitsParams object
// with the default values initialized.
func NewPostUpdateCircuitsParams() *PostUpdateCircuitsParams {
	var ()
	return &PostUpdateCircuitsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostUpdateCircuitsParamsWithTimeout creates a new PostUpdateCircuitsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostUpdateCircuitsParamsWithTimeout(timeout time.Duration) *PostUpdateCircuitsParams {
	var ()
	return &PostUpdateCircuitsParams{

		timeout: timeout,
	}
}

// NewPostUpdateCircuitsParamsWithContext creates a new PostUpdateCircuitsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostUpdateCircuitsParamsWithContext(ctx context.Context) *PostUpdateCircuitsParams {
	var ()
	return &PostUpdateCircuitsParams{

		Context: ctx,
	}
}

// NewPostUpdateCircuitsParamsWithHTTPClient creates a new PostUpdateCircuitsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostUpdateCircuitsParamsWithHTTPClient(client *http.Client) *PostUpdateCircuitsParams {
	var ()
	return &PostUpdateCircuitsParams{
		HTTPClient: client,
	}
}

/*PostUpdateCircuitsParams contains all the parameters to send to the API endpoint
for the post update circuits operation typically these are written to a http.Request
*/
type PostUpdateCircuitsParams struct {

	/*ID
	  ID for the specific circuit (D42 ID)

	*/
	ID *string
	/*Bandwidth
	  bandwidth in kbps (multiply factor of 1024)

	*/
	Bandwidth *string
	/*CircuitID
	  general circuit ID

	*/
	CircuitID *string
	/*Customer
	  customer name

	*/
	Customer *string
	/*Dmarc
	  name of the DMARC

	*/
	Dmarc *string
	/*DmarcID
	  ID of the DMARC

	*/
	DmarcID *string
	/*EndPointCircuitID
	  if end_point type is circuit, this is circuit_id of the circuit. Absent otherwise

	*/
	EndPointCircuitID *string
	/*EndPointDevice
	  if end_point type is device, this is name of the device. Absent otherwise

	*/
	EndPointDevice *string
	/*EndPointID
	  ID of the end point

	*/
	EndPointID *string
	/*EndPointPatchPanel
	  if end_point type is patch_panel_port, this is name of the patch panel. Absent otherwise

	*/
	EndPointPatchPanel *string
	/*EndPointPatchPanelID
	  if end_point type is patch_panel_port, this is ID of the patch panel. Absent otherwise

	*/
	EndPointPatchPanelID *string
	/*EndPointPatchPanelPort
	  if end_point type is patch_panel_port, this is name of the patch panel port. Absent otherwise

	*/
	EndPointPatchPanelPort *string
	/*EndPointSwitch
	  if end_point type is switchport, this is name of the switch. Absent otherwise

	*/
	EndPointSwitch *string
	/*EndPointSwitchport
	  if end_point type is switchport, this is name of the switch port. Absent otherwise

	*/
	EndPointSwitchport *string
	/*EndPointType
	  Type of end point.

	*/
	EndPointType *string
	/*EndPointVendor
	  if end_point type is vendofr, this is name of the vendor. Absent otherwise

	*/
	EndPointVendor *string
	/*Notes
	  Any additional notes

	*/
	Notes *string
	/*OrderDate*/
	OrderDate *string
	/*OriginCircuitID
	  if origin type is circuit, this is circuit_id of the circuit. Absent otherwise

	*/
	OriginCircuitID *string
	/*OriginDevice
	  if origin type is device, this is name of the device. Absent otherwise

	*/
	OriginDevice *string
	/*OriginID
	  ID of the origin point

	*/
	OriginID *string
	/*OriginPatchPanel
	  if origin type is patch_panel_port, this is name of the patch panel. Absent otherwise

	*/
	OriginPatchPanel *string
	/*OriginPatchPanelID
	  if origin type is patch_panel_port, this is ID of the patch panel. Absent otherwise

	*/
	OriginPatchPanelID *string
	/*OriginPatchPanelPort
	  if origin type is patch_panel_port, this is name of the patch panel port. Absent otherwise

	*/
	OriginPatchPanelPort *string
	/*OriginSwitch
	  if origin type is switchport, this is name of the switch. Absent otherwise

	*/
	OriginSwitch *string
	/*OriginSwitchport
	  if origin type is switchport, this is name of the switch port. Absent otherwise

	*/
	OriginSwitchport *string
	/*OriginType
	  Type of origin point.

	*/
	OriginType *string
	/*OriginVendor
	  if origin type is vendor, this is name of the vendor. Absent otherwise

	*/
	OriginVendor *string
	/*ProvisionDate*/
	ProvisionDate *string
	/*TurnOnDate*/
	TurnOnDate *string
	/*Type
	  Required for new circuits

	*/
	Type *string
	/*Vendor
	  The cloud vendor

	*/
	Vendor *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post update circuits params
func (o *PostUpdateCircuitsParams) WithTimeout(timeout time.Duration) *PostUpdateCircuitsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post update circuits params
func (o *PostUpdateCircuitsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post update circuits params
func (o *PostUpdateCircuitsParams) WithContext(ctx context.Context) *PostUpdateCircuitsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post update circuits params
func (o *PostUpdateCircuitsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post update circuits params
func (o *PostUpdateCircuitsParams) WithHTTPClient(client *http.Client) *PostUpdateCircuitsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post update circuits params
func (o *PostUpdateCircuitsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the post update circuits params
func (o *PostUpdateCircuitsParams) WithID(id *string) *PostUpdateCircuitsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the post update circuits params
func (o *PostUpdateCircuitsParams) SetID(id *string) {
	o.ID = id
}

// WithBandwidth adds the bandwidth to the post update circuits params
func (o *PostUpdateCircuitsParams) WithBandwidth(bandwidth *string) *PostUpdateCircuitsParams {
	o.SetBandwidth(bandwidth)
	return o
}

// SetBandwidth adds the bandwidth to the post update circuits params
func (o *PostUpdateCircuitsParams) SetBandwidth(bandwidth *string) {
	o.Bandwidth = bandwidth
}

// WithCircuitID adds the circuitID to the post update circuits params
func (o *PostUpdateCircuitsParams) WithCircuitID(circuitID *string) *PostUpdateCircuitsParams {
	o.SetCircuitID(circuitID)
	return o
}

// SetCircuitID adds the circuitId to the post update circuits params
func (o *PostUpdateCircuitsParams) SetCircuitID(circuitID *string) {
	o.CircuitID = circuitID
}

// WithCustomer adds the customer to the post update circuits params
func (o *PostUpdateCircuitsParams) WithCustomer(customer *string) *PostUpdateCircuitsParams {
	o.SetCustomer(customer)
	return o
}

// SetCustomer adds the customer to the post update circuits params
func (o *PostUpdateCircuitsParams) SetCustomer(customer *string) {
	o.Customer = customer
}

// WithDmarc adds the dmarc to the post update circuits params
func (o *PostUpdateCircuitsParams) WithDmarc(dmarc *string) *PostUpdateCircuitsParams {
	o.SetDmarc(dmarc)
	return o
}

// SetDmarc adds the dmarc to the post update circuits params
func (o *PostUpdateCircuitsParams) SetDmarc(dmarc *string) {
	o.Dmarc = dmarc
}

// WithDmarcID adds the dmarcID to the post update circuits params
func (o *PostUpdateCircuitsParams) WithDmarcID(dmarcID *string) *PostUpdateCircuitsParams {
	o.SetDmarcID(dmarcID)
	return o
}

// SetDmarcID adds the dmarcId to the post update circuits params
func (o *PostUpdateCircuitsParams) SetDmarcID(dmarcID *string) {
	o.DmarcID = dmarcID
}

// WithEndPointCircuitID adds the endPointCircuitID to the post update circuits params
func (o *PostUpdateCircuitsParams) WithEndPointCircuitID(endPointCircuitID *string) *PostUpdateCircuitsParams {
	o.SetEndPointCircuitID(endPointCircuitID)
	return o
}

// SetEndPointCircuitID adds the endPointCircuitId to the post update circuits params
func (o *PostUpdateCircuitsParams) SetEndPointCircuitID(endPointCircuitID *string) {
	o.EndPointCircuitID = endPointCircuitID
}

// WithEndPointDevice adds the endPointDevice to the post update circuits params
func (o *PostUpdateCircuitsParams) WithEndPointDevice(endPointDevice *string) *PostUpdateCircuitsParams {
	o.SetEndPointDevice(endPointDevice)
	return o
}

// SetEndPointDevice adds the endPointDevice to the post update circuits params
func (o *PostUpdateCircuitsParams) SetEndPointDevice(endPointDevice *string) {
	o.EndPointDevice = endPointDevice
}

// WithEndPointID adds the endPointID to the post update circuits params
func (o *PostUpdateCircuitsParams) WithEndPointID(endPointID *string) *PostUpdateCircuitsParams {
	o.SetEndPointID(endPointID)
	return o
}

// SetEndPointID adds the endPointId to the post update circuits params
func (o *PostUpdateCircuitsParams) SetEndPointID(endPointID *string) {
	o.EndPointID = endPointID
}

// WithEndPointPatchPanel adds the endPointPatchPanel to the post update circuits params
func (o *PostUpdateCircuitsParams) WithEndPointPatchPanel(endPointPatchPanel *string) *PostUpdateCircuitsParams {
	o.SetEndPointPatchPanel(endPointPatchPanel)
	return o
}

// SetEndPointPatchPanel adds the endPointPatchPanel to the post update circuits params
func (o *PostUpdateCircuitsParams) SetEndPointPatchPanel(endPointPatchPanel *string) {
	o.EndPointPatchPanel = endPointPatchPanel
}

// WithEndPointPatchPanelID adds the endPointPatchPanelID to the post update circuits params
func (o *PostUpdateCircuitsParams) WithEndPointPatchPanelID(endPointPatchPanelID *string) *PostUpdateCircuitsParams {
	o.SetEndPointPatchPanelID(endPointPatchPanelID)
	return o
}

// SetEndPointPatchPanelID adds the endPointPatchPanelId to the post update circuits params
func (o *PostUpdateCircuitsParams) SetEndPointPatchPanelID(endPointPatchPanelID *string) {
	o.EndPointPatchPanelID = endPointPatchPanelID
}

// WithEndPointPatchPanelPort adds the endPointPatchPanelPort to the post update circuits params
func (o *PostUpdateCircuitsParams) WithEndPointPatchPanelPort(endPointPatchPanelPort *string) *PostUpdateCircuitsParams {
	o.SetEndPointPatchPanelPort(endPointPatchPanelPort)
	return o
}

// SetEndPointPatchPanelPort adds the endPointPatchPanelPort to the post update circuits params
func (o *PostUpdateCircuitsParams) SetEndPointPatchPanelPort(endPointPatchPanelPort *string) {
	o.EndPointPatchPanelPort = endPointPatchPanelPort
}

// WithEndPointSwitch adds the endPointSwitch to the post update circuits params
func (o *PostUpdateCircuitsParams) WithEndPointSwitch(endPointSwitch *string) *PostUpdateCircuitsParams {
	o.SetEndPointSwitch(endPointSwitch)
	return o
}

// SetEndPointSwitch adds the endPointSwitch to the post update circuits params
func (o *PostUpdateCircuitsParams) SetEndPointSwitch(endPointSwitch *string) {
	o.EndPointSwitch = endPointSwitch
}

// WithEndPointSwitchport adds the endPointSwitchport to the post update circuits params
func (o *PostUpdateCircuitsParams) WithEndPointSwitchport(endPointSwitchport *string) *PostUpdateCircuitsParams {
	o.SetEndPointSwitchport(endPointSwitchport)
	return o
}

// SetEndPointSwitchport adds the endPointSwitchport to the post update circuits params
func (o *PostUpdateCircuitsParams) SetEndPointSwitchport(endPointSwitchport *string) {
	o.EndPointSwitchport = endPointSwitchport
}

// WithEndPointType adds the endPointType to the post update circuits params
func (o *PostUpdateCircuitsParams) WithEndPointType(endPointType *string) *PostUpdateCircuitsParams {
	o.SetEndPointType(endPointType)
	return o
}

// SetEndPointType adds the endPointType to the post update circuits params
func (o *PostUpdateCircuitsParams) SetEndPointType(endPointType *string) {
	o.EndPointType = endPointType
}

// WithEndPointVendor adds the endPointVendor to the post update circuits params
func (o *PostUpdateCircuitsParams) WithEndPointVendor(endPointVendor *string) *PostUpdateCircuitsParams {
	o.SetEndPointVendor(endPointVendor)
	return o
}

// SetEndPointVendor adds the endPointVendor to the post update circuits params
func (o *PostUpdateCircuitsParams) SetEndPointVendor(endPointVendor *string) {
	o.EndPointVendor = endPointVendor
}

// WithNotes adds the notes to the post update circuits params
func (o *PostUpdateCircuitsParams) WithNotes(notes *string) *PostUpdateCircuitsParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the post update circuits params
func (o *PostUpdateCircuitsParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithOrderDate adds the orderDate to the post update circuits params
func (o *PostUpdateCircuitsParams) WithOrderDate(orderDate *string) *PostUpdateCircuitsParams {
	o.SetOrderDate(orderDate)
	return o
}

// SetOrderDate adds the orderDate to the post update circuits params
func (o *PostUpdateCircuitsParams) SetOrderDate(orderDate *string) {
	o.OrderDate = orderDate
}

// WithOriginCircuitID adds the originCircuitID to the post update circuits params
func (o *PostUpdateCircuitsParams) WithOriginCircuitID(originCircuitID *string) *PostUpdateCircuitsParams {
	o.SetOriginCircuitID(originCircuitID)
	return o
}

// SetOriginCircuitID adds the originCircuitId to the post update circuits params
func (o *PostUpdateCircuitsParams) SetOriginCircuitID(originCircuitID *string) {
	o.OriginCircuitID = originCircuitID
}

// WithOriginDevice adds the originDevice to the post update circuits params
func (o *PostUpdateCircuitsParams) WithOriginDevice(originDevice *string) *PostUpdateCircuitsParams {
	o.SetOriginDevice(originDevice)
	return o
}

// SetOriginDevice adds the originDevice to the post update circuits params
func (o *PostUpdateCircuitsParams) SetOriginDevice(originDevice *string) {
	o.OriginDevice = originDevice
}

// WithOriginID adds the originID to the post update circuits params
func (o *PostUpdateCircuitsParams) WithOriginID(originID *string) *PostUpdateCircuitsParams {
	o.SetOriginID(originID)
	return o
}

// SetOriginID adds the originId to the post update circuits params
func (o *PostUpdateCircuitsParams) SetOriginID(originID *string) {
	o.OriginID = originID
}

// WithOriginPatchPanel adds the originPatchPanel to the post update circuits params
func (o *PostUpdateCircuitsParams) WithOriginPatchPanel(originPatchPanel *string) *PostUpdateCircuitsParams {
	o.SetOriginPatchPanel(originPatchPanel)
	return o
}

// SetOriginPatchPanel adds the originPatchPanel to the post update circuits params
func (o *PostUpdateCircuitsParams) SetOriginPatchPanel(originPatchPanel *string) {
	o.OriginPatchPanel = originPatchPanel
}

// WithOriginPatchPanelID adds the originPatchPanelID to the post update circuits params
func (o *PostUpdateCircuitsParams) WithOriginPatchPanelID(originPatchPanelID *string) *PostUpdateCircuitsParams {
	o.SetOriginPatchPanelID(originPatchPanelID)
	return o
}

// SetOriginPatchPanelID adds the originPatchPanelId to the post update circuits params
func (o *PostUpdateCircuitsParams) SetOriginPatchPanelID(originPatchPanelID *string) {
	o.OriginPatchPanelID = originPatchPanelID
}

// WithOriginPatchPanelPort adds the originPatchPanelPort to the post update circuits params
func (o *PostUpdateCircuitsParams) WithOriginPatchPanelPort(originPatchPanelPort *string) *PostUpdateCircuitsParams {
	o.SetOriginPatchPanelPort(originPatchPanelPort)
	return o
}

// SetOriginPatchPanelPort adds the originPatchPanelPort to the post update circuits params
func (o *PostUpdateCircuitsParams) SetOriginPatchPanelPort(originPatchPanelPort *string) {
	o.OriginPatchPanelPort = originPatchPanelPort
}

// WithOriginSwitch adds the originSwitch to the post update circuits params
func (o *PostUpdateCircuitsParams) WithOriginSwitch(originSwitch *string) *PostUpdateCircuitsParams {
	o.SetOriginSwitch(originSwitch)
	return o
}

// SetOriginSwitch adds the originSwitch to the post update circuits params
func (o *PostUpdateCircuitsParams) SetOriginSwitch(originSwitch *string) {
	o.OriginSwitch = originSwitch
}

// WithOriginSwitchport adds the originSwitchport to the post update circuits params
func (o *PostUpdateCircuitsParams) WithOriginSwitchport(originSwitchport *string) *PostUpdateCircuitsParams {
	o.SetOriginSwitchport(originSwitchport)
	return o
}

// SetOriginSwitchport adds the originSwitchport to the post update circuits params
func (o *PostUpdateCircuitsParams) SetOriginSwitchport(originSwitchport *string) {
	o.OriginSwitchport = originSwitchport
}

// WithOriginType adds the originType to the post update circuits params
func (o *PostUpdateCircuitsParams) WithOriginType(originType *string) *PostUpdateCircuitsParams {
	o.SetOriginType(originType)
	return o
}

// SetOriginType adds the originType to the post update circuits params
func (o *PostUpdateCircuitsParams) SetOriginType(originType *string) {
	o.OriginType = originType
}

// WithOriginVendor adds the originVendor to the post update circuits params
func (o *PostUpdateCircuitsParams) WithOriginVendor(originVendor *string) *PostUpdateCircuitsParams {
	o.SetOriginVendor(originVendor)
	return o
}

// SetOriginVendor adds the originVendor to the post update circuits params
func (o *PostUpdateCircuitsParams) SetOriginVendor(originVendor *string) {
	o.OriginVendor = originVendor
}

// WithProvisionDate adds the provisionDate to the post update circuits params
func (o *PostUpdateCircuitsParams) WithProvisionDate(provisionDate *string) *PostUpdateCircuitsParams {
	o.SetProvisionDate(provisionDate)
	return o
}

// SetProvisionDate adds the provisionDate to the post update circuits params
func (o *PostUpdateCircuitsParams) SetProvisionDate(provisionDate *string) {
	o.ProvisionDate = provisionDate
}

// WithTurnOnDate adds the turnOnDate to the post update circuits params
func (o *PostUpdateCircuitsParams) WithTurnOnDate(turnOnDate *string) *PostUpdateCircuitsParams {
	o.SetTurnOnDate(turnOnDate)
	return o
}

// SetTurnOnDate adds the turnOnDate to the post update circuits params
func (o *PostUpdateCircuitsParams) SetTurnOnDate(turnOnDate *string) {
	o.TurnOnDate = turnOnDate
}

// WithType adds the typeVar to the post update circuits params
func (o *PostUpdateCircuitsParams) WithType(typeVar *string) *PostUpdateCircuitsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the post update circuits params
func (o *PostUpdateCircuitsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithVendor adds the vendor to the post update circuits params
func (o *PostUpdateCircuitsParams) WithVendor(vendor *string) *PostUpdateCircuitsParams {
	o.SetVendor(vendor)
	return o
}

// SetVendor adds the vendor to the post update circuits params
func (o *PostUpdateCircuitsParams) SetVendor(vendor *string) {
	o.Vendor = vendor
}

// WriteToRequest writes these params to a swagger request
func (o *PostUpdateCircuitsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ID != nil {

		// form param ID
		var frID string
		if o.ID != nil {
			frID = *o.ID
		}
		fID := frID
		if fID != "" {
			if err := r.SetFormParam("ID", fID); err != nil {
				return err
			}
		}

	}

	if o.Bandwidth != nil {

		// form param bandwidth
		var frBandwidth string
		if o.Bandwidth != nil {
			frBandwidth = *o.Bandwidth
		}
		fBandwidth := frBandwidth
		if fBandwidth != "" {
			if err := r.SetFormParam("bandwidth", fBandwidth); err != nil {
				return err
			}
		}

	}

	if o.CircuitID != nil {

		// form param circuit_id
		var frCircuitID string
		if o.CircuitID != nil {
			frCircuitID = *o.CircuitID
		}
		fCircuitID := frCircuitID
		if fCircuitID != "" {
			if err := r.SetFormParam("circuit_id", fCircuitID); err != nil {
				return err
			}
		}

	}

	if o.Customer != nil {

		// form param customer
		var frCustomer string
		if o.Customer != nil {
			frCustomer = *o.Customer
		}
		fCustomer := frCustomer
		if fCustomer != "" {
			if err := r.SetFormParam("customer", fCustomer); err != nil {
				return err
			}
		}

	}

	if o.Dmarc != nil {

		// form param dmarc
		var frDmarc string
		if o.Dmarc != nil {
			frDmarc = *o.Dmarc
		}
		fDmarc := frDmarc
		if fDmarc != "" {
			if err := r.SetFormParam("dmarc", fDmarc); err != nil {
				return err
			}
		}

	}

	if o.DmarcID != nil {

		// form param dmarc_id
		var frDmarcID string
		if o.DmarcID != nil {
			frDmarcID = *o.DmarcID
		}
		fDmarcID := frDmarcID
		if fDmarcID != "" {
			if err := r.SetFormParam("dmarc_id", fDmarcID); err != nil {
				return err
			}
		}

	}

	if o.EndPointCircuitID != nil {

		// form param end_point_circuit_id
		var frEndPointCircuitID string
		if o.EndPointCircuitID != nil {
			frEndPointCircuitID = *o.EndPointCircuitID
		}
		fEndPointCircuitID := frEndPointCircuitID
		if fEndPointCircuitID != "" {
			if err := r.SetFormParam("end_point_circuit_id", fEndPointCircuitID); err != nil {
				return err
			}
		}

	}

	if o.EndPointDevice != nil {

		// form param end_point_device
		var frEndPointDevice string
		if o.EndPointDevice != nil {
			frEndPointDevice = *o.EndPointDevice
		}
		fEndPointDevice := frEndPointDevice
		if fEndPointDevice != "" {
			if err := r.SetFormParam("end_point_device", fEndPointDevice); err != nil {
				return err
			}
		}

	}

	if o.EndPointID != nil {

		// form param end_point_id
		var frEndPointID string
		if o.EndPointID != nil {
			frEndPointID = *o.EndPointID
		}
		fEndPointID := frEndPointID
		if fEndPointID != "" {
			if err := r.SetFormParam("end_point_id", fEndPointID); err != nil {
				return err
			}
		}

	}

	if o.EndPointPatchPanel != nil {

		// form param end_point_patch_panel
		var frEndPointPatchPanel string
		if o.EndPointPatchPanel != nil {
			frEndPointPatchPanel = *o.EndPointPatchPanel
		}
		fEndPointPatchPanel := frEndPointPatchPanel
		if fEndPointPatchPanel != "" {
			if err := r.SetFormParam("end_point_patch_panel", fEndPointPatchPanel); err != nil {
				return err
			}
		}

	}

	if o.EndPointPatchPanelID != nil {

		// form param end_point_patch_panel_id
		var frEndPointPatchPanelID string
		if o.EndPointPatchPanelID != nil {
			frEndPointPatchPanelID = *o.EndPointPatchPanelID
		}
		fEndPointPatchPanelID := frEndPointPatchPanelID
		if fEndPointPatchPanelID != "" {
			if err := r.SetFormParam("end_point_patch_panel_id", fEndPointPatchPanelID); err != nil {
				return err
			}
		}

	}

	if o.EndPointPatchPanelPort != nil {

		// form param end_point_patch_panel_port
		var frEndPointPatchPanelPort string
		if o.EndPointPatchPanelPort != nil {
			frEndPointPatchPanelPort = *o.EndPointPatchPanelPort
		}
		fEndPointPatchPanelPort := frEndPointPatchPanelPort
		if fEndPointPatchPanelPort != "" {
			if err := r.SetFormParam("end_point_patch_panel_port", fEndPointPatchPanelPort); err != nil {
				return err
			}
		}

	}

	if o.EndPointSwitch != nil {

		// form param end_point_switch
		var frEndPointSwitch string
		if o.EndPointSwitch != nil {
			frEndPointSwitch = *o.EndPointSwitch
		}
		fEndPointSwitch := frEndPointSwitch
		if fEndPointSwitch != "" {
			if err := r.SetFormParam("end_point_switch", fEndPointSwitch); err != nil {
				return err
			}
		}

	}

	if o.EndPointSwitchport != nil {

		// form param end_point_switchport
		var frEndPointSwitchport string
		if o.EndPointSwitchport != nil {
			frEndPointSwitchport = *o.EndPointSwitchport
		}
		fEndPointSwitchport := frEndPointSwitchport
		if fEndPointSwitchport != "" {
			if err := r.SetFormParam("end_point_switchport", fEndPointSwitchport); err != nil {
				return err
			}
		}

	}

	if o.EndPointType != nil {

		// form param end_point_type
		var frEndPointType string
		if o.EndPointType != nil {
			frEndPointType = *o.EndPointType
		}
		fEndPointType := frEndPointType
		if fEndPointType != "" {
			if err := r.SetFormParam("end_point_type", fEndPointType); err != nil {
				return err
			}
		}

	}

	if o.EndPointVendor != nil {

		// form param end_point_vendor
		var frEndPointVendor string
		if o.EndPointVendor != nil {
			frEndPointVendor = *o.EndPointVendor
		}
		fEndPointVendor := frEndPointVendor
		if fEndPointVendor != "" {
			if err := r.SetFormParam("end_point_vendor", fEndPointVendor); err != nil {
				return err
			}
		}

	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if o.OrderDate != nil {

		// form param order_date
		var frOrderDate string
		if o.OrderDate != nil {
			frOrderDate = *o.OrderDate
		}
		fOrderDate := frOrderDate
		if fOrderDate != "" {
			if err := r.SetFormParam("order_date", fOrderDate); err != nil {
				return err
			}
		}

	}

	if o.OriginCircuitID != nil {

		// form param origin_circuit_id
		var frOriginCircuitID string
		if o.OriginCircuitID != nil {
			frOriginCircuitID = *o.OriginCircuitID
		}
		fOriginCircuitID := frOriginCircuitID
		if fOriginCircuitID != "" {
			if err := r.SetFormParam("origin_circuit_id", fOriginCircuitID); err != nil {
				return err
			}
		}

	}

	if o.OriginDevice != nil {

		// form param origin_device
		var frOriginDevice string
		if o.OriginDevice != nil {
			frOriginDevice = *o.OriginDevice
		}
		fOriginDevice := frOriginDevice
		if fOriginDevice != "" {
			if err := r.SetFormParam("origin_device", fOriginDevice); err != nil {
				return err
			}
		}

	}

	if o.OriginID != nil {

		// form param origin_id
		var frOriginID string
		if o.OriginID != nil {
			frOriginID = *o.OriginID
		}
		fOriginID := frOriginID
		if fOriginID != "" {
			if err := r.SetFormParam("origin_id", fOriginID); err != nil {
				return err
			}
		}

	}

	if o.OriginPatchPanel != nil {

		// form param origin_patch_panel
		var frOriginPatchPanel string
		if o.OriginPatchPanel != nil {
			frOriginPatchPanel = *o.OriginPatchPanel
		}
		fOriginPatchPanel := frOriginPatchPanel
		if fOriginPatchPanel != "" {
			if err := r.SetFormParam("origin_patch_panel", fOriginPatchPanel); err != nil {
				return err
			}
		}

	}

	if o.OriginPatchPanelID != nil {

		// form param origin_patch_panel_id
		var frOriginPatchPanelID string
		if o.OriginPatchPanelID != nil {
			frOriginPatchPanelID = *o.OriginPatchPanelID
		}
		fOriginPatchPanelID := frOriginPatchPanelID
		if fOriginPatchPanelID != "" {
			if err := r.SetFormParam("origin_patch_panel_id", fOriginPatchPanelID); err != nil {
				return err
			}
		}

	}

	if o.OriginPatchPanelPort != nil {

		// form param origin_patch_panel_port
		var frOriginPatchPanelPort string
		if o.OriginPatchPanelPort != nil {
			frOriginPatchPanelPort = *o.OriginPatchPanelPort
		}
		fOriginPatchPanelPort := frOriginPatchPanelPort
		if fOriginPatchPanelPort != "" {
			if err := r.SetFormParam("origin_patch_panel_port", fOriginPatchPanelPort); err != nil {
				return err
			}
		}

	}

	if o.OriginSwitch != nil {

		// form param origin_switch
		var frOriginSwitch string
		if o.OriginSwitch != nil {
			frOriginSwitch = *o.OriginSwitch
		}
		fOriginSwitch := frOriginSwitch
		if fOriginSwitch != "" {
			if err := r.SetFormParam("origin_switch", fOriginSwitch); err != nil {
				return err
			}
		}

	}

	if o.OriginSwitchport != nil {

		// form param origin_switchport
		var frOriginSwitchport string
		if o.OriginSwitchport != nil {
			frOriginSwitchport = *o.OriginSwitchport
		}
		fOriginSwitchport := frOriginSwitchport
		if fOriginSwitchport != "" {
			if err := r.SetFormParam("origin_switchport", fOriginSwitchport); err != nil {
				return err
			}
		}

	}

	if o.OriginType != nil {

		// form param origin_type
		var frOriginType string
		if o.OriginType != nil {
			frOriginType = *o.OriginType
		}
		fOriginType := frOriginType
		if fOriginType != "" {
			if err := r.SetFormParam("origin_type", fOriginType); err != nil {
				return err
			}
		}

	}

	if o.OriginVendor != nil {

		// form param origin_vendor
		var frOriginVendor string
		if o.OriginVendor != nil {
			frOriginVendor = *o.OriginVendor
		}
		fOriginVendor := frOriginVendor
		if fOriginVendor != "" {
			if err := r.SetFormParam("origin_vendor", fOriginVendor); err != nil {
				return err
			}
		}

	}

	if o.ProvisionDate != nil {

		// form param provision_date
		var frProvisionDate string
		if o.ProvisionDate != nil {
			frProvisionDate = *o.ProvisionDate
		}
		fProvisionDate := frProvisionDate
		if fProvisionDate != "" {
			if err := r.SetFormParam("provision_date", fProvisionDate); err != nil {
				return err
			}
		}

	}

	if o.TurnOnDate != nil {

		// form param turn_on_date
		var frTurnOnDate string
		if o.TurnOnDate != nil {
			frTurnOnDate = *o.TurnOnDate
		}
		fTurnOnDate := frTurnOnDate
		if fTurnOnDate != "" {
			if err := r.SetFormParam("turn_on_date", fTurnOnDate); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// form param type
		var frType string
		if o.Type != nil {
			frType = *o.Type
		}
		fType := frType
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}

	}

	if o.Vendor != nil {

		// form param vendor
		var frVendor string
		if o.Vendor != nil {
			frVendor = *o.Vendor
		}
		fVendor := frVendor
		if fVendor != "" {
			if err := r.SetFormParam("vendor", fVendor); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
