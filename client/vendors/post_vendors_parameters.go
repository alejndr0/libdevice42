// Code generated by go-swagger; DO NOT EDIT.

package vendors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostVendorsParams creates a new PostVendorsParams object
// with the default values initialized.
func NewPostVendorsParams() *PostVendorsParams {
	var ()
	return &PostVendorsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostVendorsParamsWithTimeout creates a new PostVendorsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostVendorsParamsWithTimeout(timeout time.Duration) *PostVendorsParams {
	var ()
	return &PostVendorsParams{

		timeout: timeout,
	}
}

// NewPostVendorsParamsWithContext creates a new PostVendorsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostVendorsParamsWithContext(ctx context.Context) *PostVendorsParams {
	var ()
	return &PostVendorsParams{

		Context: ctx,
	}
}

// NewPostVendorsParamsWithHTTPClient creates a new PostVendorsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostVendorsParamsWithHTTPClient(client *http.Client) *PostVendorsParams {
	var ()
	return &PostVendorsParams{
		HTTPClient: client,
	}
}

/*PostVendorsParams contains all the parameters to send to the API endpoint
for the post vendors operation typically these are written to a http.Request
*/
type PostVendorsParams struct {

	/*AccountNo*/
	AccountNo *string
	/*ContactInfo*/
	ContactInfo *string
	/*Escalation1
	  Text field.

	*/
	Escalation1 *string
	/*Escalation2
	  Text field.

	*/
	Escalation2 *string
	/*Groups
	  If multitenancy is on, admin groups that have access to this object are specified here, e.g. Prod_East:no,Corp:yes specifies that the admin groups for this object are Prod_East with view only permission and Corp with change permission. If this parameter is present with no value, all groups are deleted.

	*/
	Groups *string
	/*HomePage
	  Text field.

	*/
	HomePage *string
	/*Name
	  Vendor name

	*/
	Name string
	/*Notes
	  Any additional notes

	*/
	Notes *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post vendors params
func (o *PostVendorsParams) WithTimeout(timeout time.Duration) *PostVendorsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post vendors params
func (o *PostVendorsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post vendors params
func (o *PostVendorsParams) WithContext(ctx context.Context) *PostVendorsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post vendors params
func (o *PostVendorsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post vendors params
func (o *PostVendorsParams) WithHTTPClient(client *http.Client) *PostVendorsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post vendors params
func (o *PostVendorsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountNo adds the accountNo to the post vendors params
func (o *PostVendorsParams) WithAccountNo(accountNo *string) *PostVendorsParams {
	o.SetAccountNo(accountNo)
	return o
}

// SetAccountNo adds the accountNo to the post vendors params
func (o *PostVendorsParams) SetAccountNo(accountNo *string) {
	o.AccountNo = accountNo
}

// WithContactInfo adds the contactInfo to the post vendors params
func (o *PostVendorsParams) WithContactInfo(contactInfo *string) *PostVendorsParams {
	o.SetContactInfo(contactInfo)
	return o
}

// SetContactInfo adds the contactInfo to the post vendors params
func (o *PostVendorsParams) SetContactInfo(contactInfo *string) {
	o.ContactInfo = contactInfo
}

// WithEscalation1 adds the escalation1 to the post vendors params
func (o *PostVendorsParams) WithEscalation1(escalation1 *string) *PostVendorsParams {
	o.SetEscalation1(escalation1)
	return o
}

// SetEscalation1 adds the escalation1 to the post vendors params
func (o *PostVendorsParams) SetEscalation1(escalation1 *string) {
	o.Escalation1 = escalation1
}

// WithEscalation2 adds the escalation2 to the post vendors params
func (o *PostVendorsParams) WithEscalation2(escalation2 *string) *PostVendorsParams {
	o.SetEscalation2(escalation2)
	return o
}

// SetEscalation2 adds the escalation2 to the post vendors params
func (o *PostVendorsParams) SetEscalation2(escalation2 *string) {
	o.Escalation2 = escalation2
}

// WithGroups adds the groups to the post vendors params
func (o *PostVendorsParams) WithGroups(groups *string) *PostVendorsParams {
	o.SetGroups(groups)
	return o
}

// SetGroups adds the groups to the post vendors params
func (o *PostVendorsParams) SetGroups(groups *string) {
	o.Groups = groups
}

// WithHomePage adds the homePage to the post vendors params
func (o *PostVendorsParams) WithHomePage(homePage *string) *PostVendorsParams {
	o.SetHomePage(homePage)
	return o
}

// SetHomePage adds the homePage to the post vendors params
func (o *PostVendorsParams) SetHomePage(homePage *string) {
	o.HomePage = homePage
}

// WithName adds the name to the post vendors params
func (o *PostVendorsParams) WithName(name string) *PostVendorsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post vendors params
func (o *PostVendorsParams) SetName(name string) {
	o.Name = name
}

// WithNotes adds the notes to the post vendors params
func (o *PostVendorsParams) WithNotes(notes *string) *PostVendorsParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the post vendors params
func (o *PostVendorsParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WriteToRequest writes these params to a swagger request
func (o *PostVendorsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountNo != nil {

		// form param account_no
		var frAccountNo string
		if o.AccountNo != nil {
			frAccountNo = *o.AccountNo
		}
		fAccountNo := frAccountNo
		if fAccountNo != "" {
			if err := r.SetFormParam("account_no", fAccountNo); err != nil {
				return err
			}
		}

	}

	if o.ContactInfo != nil {

		// form param contact_info
		var frContactInfo string
		if o.ContactInfo != nil {
			frContactInfo = *o.ContactInfo
		}
		fContactInfo := frContactInfo
		if fContactInfo != "" {
			if err := r.SetFormParam("contact_info", fContactInfo); err != nil {
				return err
			}
		}

	}

	if o.Escalation1 != nil {

		// form param escalation_1
		var frEscalation1 string
		if o.Escalation1 != nil {
			frEscalation1 = *o.Escalation1
		}
		fEscalation1 := frEscalation1
		if fEscalation1 != "" {
			if err := r.SetFormParam("escalation_1", fEscalation1); err != nil {
				return err
			}
		}

	}

	if o.Escalation2 != nil {

		// form param escalation_2
		var frEscalation2 string
		if o.Escalation2 != nil {
			frEscalation2 = *o.Escalation2
		}
		fEscalation2 := frEscalation2
		if fEscalation2 != "" {
			if err := r.SetFormParam("escalation_2", fEscalation2); err != nil {
				return err
			}
		}

	}

	if o.Groups != nil {

		// form param groups
		var frGroups string
		if o.Groups != nil {
			frGroups = *o.Groups
		}
		fGroups := frGroups
		if fGroups != "" {
			if err := r.SetFormParam("groups", fGroups); err != nil {
				return err
			}
		}

	}

	if o.HomePage != nil {

		// form param home_page
		var frHomePage string
		if o.HomePage != nil {
			frHomePage = *o.HomePage
		}
		fHomePage := frHomePage
		if fHomePage != "" {
			if err := r.SetFormParam("home_page", fHomePage); err != nil {
				return err
			}
		}

	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
