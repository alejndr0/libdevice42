// Code generated by go-swagger; DO NOT EDIT.

package application_components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new application components API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application components API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAppcomps(params *DeleteAppcompsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAppcompsOK, error)

	GetAppcomps(params *GetAppcompsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppcompsOK, error)

	GetAppcompsAppcompID(params *GetAppcompsAppcompIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppcompsAppcompIDOK, error)

	PostAppcomps(params *PostAppcompsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAppcompsOK, error)

	PutCustomFieldAppcomp(params *PutCustomFieldAppcompParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomFieldAppcompOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAppcomps deletes application component

  This API is used to delete the application component with the application component id supplied as the required argument.
*/
func (a *Client) DeleteAppcomps(params *DeleteAppcompsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAppcompsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppcompsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAppcomps",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/appcomps/{appcomp_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAppcompsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAppcompsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAppcomps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAppcomps Get Application Components
*/
func (a *Client) GetAppcomps(params *GetAppcompsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppcompsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppcompsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppcomps",
		Method:             "GET",
		PathPattern:        "/api/1.0/appcomps/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAppcompsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppcompsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAppcomps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAppcompsAppcompID Get Application Components by ID
*/
func (a *Client) GetAppcompsAppcompID(params *GetAppcompsAppcompIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAppcompsAppcompIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppcompsAppcompIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppcompsAppcomp_id",
		Method:             "GET",
		PathPattern:        "/api/1.0/appcomps/{appcomp_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAppcompsAppcompIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppcompsAppcompIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAppcompsAppcomp_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAppcomps Create / Update Application Components
*/
func (a *Client) PostAppcomps(params *PostAppcompsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAppcompsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppcompsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAppcomps",
		Method:             "POST",
		PathPattern:        "/api/1.0/appcomps/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAppcompsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAppcompsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAppcomps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutCustomFieldAppcomp APIs to create update custom fields for application components

  Required parameters: <ul><li>id <b>OR</b> name</li> <li>key</li>
*/
func (a *Client) PutCustomFieldAppcomp(params *PutCustomFieldAppcompParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomFieldAppcompOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomFieldAppcompParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCustom_FieldAppcomp",
		Method:             "PUT",
		PathPattern:        "/api/1.0/custom_fields/appcomp/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCustomFieldAppcompReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCustomFieldAppcompOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putCustom_FieldAppcomp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
