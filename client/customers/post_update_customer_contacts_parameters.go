// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostUpdateCustomerContactsParams creates a new PostUpdateCustomerContactsParams object
// with the default values initialized.
func NewPostUpdateCustomerContactsParams() *PostUpdateCustomerContactsParams {
	var ()
	return &PostUpdateCustomerContactsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostUpdateCustomerContactsParamsWithTimeout creates a new PostUpdateCustomerContactsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostUpdateCustomerContactsParamsWithTimeout(timeout time.Duration) *PostUpdateCustomerContactsParams {
	var ()
	return &PostUpdateCustomerContactsParams{

		timeout: timeout,
	}
}

// NewPostUpdateCustomerContactsParamsWithContext creates a new PostUpdateCustomerContactsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostUpdateCustomerContactsParamsWithContext(ctx context.Context) *PostUpdateCustomerContactsParams {
	var ()
	return &PostUpdateCustomerContactsParams{

		Context: ctx,
	}
}

// NewPostUpdateCustomerContactsParamsWithHTTPClient creates a new PostUpdateCustomerContactsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostUpdateCustomerContactsParamsWithHTTPClient(client *http.Client) *PostUpdateCustomerContactsParams {
	var ()
	return &PostUpdateCustomerContactsParams{
		HTTPClient: client,
	}
}

/*PostUpdateCustomerContactsParams contains all the parameters to send to the API endpoint
for the post update customer contacts operation typically these are written to a http.Request
*/
type PostUpdateCustomerContactsParams struct {

	/*Address
	  Text field

	*/
	Address *string
	/*Customer
	  Customer name

	*/
	Customer string
	/*Email
	  Text field.

	*/
	Email *string
	/*Name
	  Customer contact name

	*/
	Name string
	/*Phone
	  Text field.

	*/
	Phone *string
	/*Type
	  Contact type, must already exist

	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) WithTimeout(timeout time.Duration) *PostUpdateCustomerContactsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) WithContext(ctx context.Context) *PostUpdateCustomerContactsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) WithHTTPClient(client *http.Client) *PostUpdateCustomerContactsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) WithAddress(address *string) *PostUpdateCustomerContactsParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) SetAddress(address *string) {
	o.Address = address
}

// WithCustomer adds the customer to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) WithCustomer(customer string) *PostUpdateCustomerContactsParams {
	o.SetCustomer(customer)
	return o
}

// SetCustomer adds the customer to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) SetCustomer(customer string) {
	o.Customer = customer
}

// WithEmail adds the email to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) WithEmail(email *string) *PostUpdateCustomerContactsParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) SetEmail(email *string) {
	o.Email = email
}

// WithName adds the name to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) WithName(name string) *PostUpdateCustomerContactsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) SetName(name string) {
	o.Name = name
}

// WithPhone adds the phone to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) WithPhone(phone *string) *PostUpdateCustomerContactsParams {
	o.SetPhone(phone)
	return o
}

// SetPhone adds the phone to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) SetPhone(phone *string) {
	o.Phone = phone
}

// WithType adds the typeVar to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) WithType(typeVar string) *PostUpdateCustomerContactsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the post update customer contacts params
func (o *PostUpdateCustomerContactsParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *PostUpdateCustomerContactsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Address != nil {

		// form param address
		var frAddress string
		if o.Address != nil {
			frAddress = *o.Address
		}
		fAddress := frAddress
		if fAddress != "" {
			if err := r.SetFormParam("address", fAddress); err != nil {
				return err
			}
		}

	}

	// form param customer
	frCustomer := o.Customer
	fCustomer := frCustomer
	if fCustomer != "" {
		if err := r.SetFormParam("customer", fCustomer); err != nil {
			return err
		}
	}

	if o.Email != nil {

		// form param email
		var frEmail string
		if o.Email != nil {
			frEmail = *o.Email
		}
		fEmail := frEmail
		if fEmail != "" {
			if err := r.SetFormParam("email", fEmail); err != nil {
				return err
			}
		}

	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.Phone != nil {

		// form param phone
		var frPhone string
		if o.Phone != nil {
			frPhone = *o.Phone
		}
		fPhone := frPhone
		if fPhone != "" {
			if err := r.SetFormParam("phone", fPhone); err != nil {
				return err
			}
		}

	}

	// form param type
	frType := o.Type
	fType := frType
	if fType != "" {
		if err := r.SetFormParam("type", fType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
