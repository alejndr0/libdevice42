// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostCustomersParams creates a new PostCustomersParams object
// with the default values initialized.
func NewPostCustomersParams() *PostCustomersParams {
	var ()
	return &PostCustomersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostCustomersParamsWithTimeout creates a new PostCustomersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostCustomersParamsWithTimeout(timeout time.Duration) *PostCustomersParams {
	var ()
	return &PostCustomersParams{

		timeout: timeout,
	}
}

// NewPostCustomersParamsWithContext creates a new PostCustomersParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostCustomersParamsWithContext(ctx context.Context) *PostCustomersParams {
	var ()
	return &PostCustomersParams{

		Context: ctx,
	}
}

// NewPostCustomersParamsWithHTTPClient creates a new PostCustomersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostCustomersParamsWithHTTPClient(client *http.Client) *PostCustomersParams {
	var ()
	return &PostCustomersParams{
		HTTPClient: client,
	}
}

/*PostCustomersParams contains all the parameters to send to the API endpoint
for the post customers operation typically these are written to a http.Request
*/
type PostCustomersParams struct {

	/*ContactInfo
	  text field for information

	*/
	ContactInfo *string
	/*Groups
	  If multitenancy is on, admin groups that have access to this object are specified here, e.g. Prod_East:no,Corp:yes specifies that the admin groups for this object are Prod_East with view only permission and Corp with change permission. If this parameter is present with no value, all groups are deleted.

	*/
	Groups *string
	/*Name
	  Customer name

	*/
	Name string
	/*Notes
	  Any additional notes

	*/
	Notes *string
	/*Type*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post customers params
func (o *PostCustomersParams) WithTimeout(timeout time.Duration) *PostCustomersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post customers params
func (o *PostCustomersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post customers params
func (o *PostCustomersParams) WithContext(ctx context.Context) *PostCustomersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post customers params
func (o *PostCustomersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post customers params
func (o *PostCustomersParams) WithHTTPClient(client *http.Client) *PostCustomersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post customers params
func (o *PostCustomersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContactInfo adds the contactInfo to the post customers params
func (o *PostCustomersParams) WithContactInfo(contactInfo *string) *PostCustomersParams {
	o.SetContactInfo(contactInfo)
	return o
}

// SetContactInfo adds the contactInfo to the post customers params
func (o *PostCustomersParams) SetContactInfo(contactInfo *string) {
	o.ContactInfo = contactInfo
}

// WithGroups adds the groups to the post customers params
func (o *PostCustomersParams) WithGroups(groups *string) *PostCustomersParams {
	o.SetGroups(groups)
	return o
}

// SetGroups adds the groups to the post customers params
func (o *PostCustomersParams) SetGroups(groups *string) {
	o.Groups = groups
}

// WithName adds the name to the post customers params
func (o *PostCustomersParams) WithName(name string) *PostCustomersParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post customers params
func (o *PostCustomersParams) SetName(name string) {
	o.Name = name
}

// WithNotes adds the notes to the post customers params
func (o *PostCustomersParams) WithNotes(notes *string) *PostCustomersParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the post customers params
func (o *PostCustomersParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithType adds the typeVar to the post customers params
func (o *PostCustomersParams) WithType(typeVar *string) *PostCustomersParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the post customers params
func (o *PostCustomersParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *PostCustomersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContactInfo != nil {

		// form param contact_info
		var frContactInfo string
		if o.ContactInfo != nil {
			frContactInfo = *o.ContactInfo
		}
		fContactInfo := frContactInfo
		if fContactInfo != "" {
			if err := r.SetFormParam("contact_info", fContactInfo); err != nil {
				return err
			}
		}

	}

	if o.Groups != nil {

		// form param groups
		var frGroups string
		if o.Groups != nil {
			frGroups = *o.Groups
		}
		fGroups := frGroups
		if fGroups != "" {
			if err := r.SetFormParam("groups", fGroups); err != nil {
				return err
			}
		}

	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// form param type
		var frType string
		if o.Type != nil {
			frType = *o.Type
		}
		fType := frType
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
