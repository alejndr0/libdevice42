// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCustomers(params *DeleteCustomersParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomersOK, error)

	GetCustomers(params *GetCustomersParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomersOK, error)

	PostCustomers(params *PostCustomersParams, authInfo runtime.ClientAuthInfoWriter) (*PostCustomersOK, error)

	PostUpdateCustomerContacts(params *PostUpdateCustomerContactsParams, authInfo runtime.ClientAuthInfoWriter) (*PostUpdateCustomerContactsOK, error)

	PutCustomFields(params *PutCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomFieldsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteCustomers deletes customer

  This API is used to delete the customer with the customer id supplied as the required argument.
*/
func (a *Client) DeleteCustomers(params *DeleteCustomersParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomers",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/customers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCustomersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCustomers gets all customers

  Get all Customers
*/
func (a *Client) GetCustomers(params *GetCustomersParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomers",
		Method:             "GET",
		PathPattern:        "/api/1.0/customers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCustomersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCustomers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostCustomers Create / Update Customers.
*/
func (a *Client) PostCustomers(params *PostCustomersParams, authInfo runtime.ClientAuthInfoWriter) (*PostCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCustomers",
		Method:             "POST",
		PathPattern:        "/api/1.0/customers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostCustomersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postCustomers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUpdateCustomerContacts Create / Update Customer Contacts
*/
func (a *Client) PostUpdateCustomerContacts(params *PostUpdateCustomerContactsParams, authInfo runtime.ClientAuthInfoWriter) (*PostUpdateCustomerContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUpdateCustomerContactsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_Update_Customer_Contacts",
		Method:             "POST",
		PathPattern:        "/api/1.0/customers/contacts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUpdateCustomerContactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUpdateCustomerContactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post_Update_Customer_Contacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutCustomFields Custom Fields
*/
func (a *Client) PutCustomFields(params *PutCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomFieldsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "put_Custom Fields",
		Method:             "PUT",
		PathPattern:        "/api/1.0/custom_fields/customer/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCustomFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put_Custom Fields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
