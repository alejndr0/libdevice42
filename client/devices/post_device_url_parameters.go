// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostDeviceURLParams creates a new PostDeviceURLParams object
// with the default values initialized.
func NewPostDeviceURLParams() *PostDeviceURLParams {
	var ()
	return &PostDeviceURLParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostDeviceURLParamsWithTimeout creates a new PostDeviceURLParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostDeviceURLParamsWithTimeout(timeout time.Duration) *PostDeviceURLParams {
	var ()
	return &PostDeviceURLParams{

		timeout: timeout,
	}
}

// NewPostDeviceURLParamsWithContext creates a new PostDeviceURLParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostDeviceURLParamsWithContext(ctx context.Context) *PostDeviceURLParams {
	var ()
	return &PostDeviceURLParams{

		Context: ctx,
	}
}

// NewPostDeviceURLParamsWithHTTPClient creates a new PostDeviceURLParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostDeviceURLParamsWithHTTPClient(client *http.Client) *PostDeviceURLParams {
	var ()
	return &PostDeviceURLParams{
		HTTPClient: client,
	}
}

/*PostDeviceURLParams contains all the parameters to send to the API endpoint
for the post device Url operation typically these are written to a http.Request
*/
type PostDeviceURLParams struct {

	/*Device
	  name of the device to which this url belongs (required parameter)

	*/
	Device string
	/*Host
	  fqdn portion of the url. e.g. for http://www.device42.com/awesome, host is www.device42.com

	*/
	Host *string
	/*Notes*/
	Notes *string
	/*Port
	  port number if any

	*/
	Port *string
	/*Type
	  the url type (e.g. http, https, telnet). This must be an existing url type in device42.

	*/
	Type string
	/*URLSuffix
	  url suffix if any. e.g. it is “awesome” based on example given above.

	*/
	URLSuffix *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post device Url params
func (o *PostDeviceURLParams) WithTimeout(timeout time.Duration) *PostDeviceURLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post device Url params
func (o *PostDeviceURLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post device Url params
func (o *PostDeviceURLParams) WithContext(ctx context.Context) *PostDeviceURLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post device Url params
func (o *PostDeviceURLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post device Url params
func (o *PostDeviceURLParams) WithHTTPClient(client *http.Client) *PostDeviceURLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post device Url params
func (o *PostDeviceURLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevice adds the device to the post device Url params
func (o *PostDeviceURLParams) WithDevice(device string) *PostDeviceURLParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the post device Url params
func (o *PostDeviceURLParams) SetDevice(device string) {
	o.Device = device
}

// WithHost adds the host to the post device Url params
func (o *PostDeviceURLParams) WithHost(host *string) *PostDeviceURLParams {
	o.SetHost(host)
	return o
}

// SetHost adds the host to the post device Url params
func (o *PostDeviceURLParams) SetHost(host *string) {
	o.Host = host
}

// WithNotes adds the notes to the post device Url params
func (o *PostDeviceURLParams) WithNotes(notes *string) *PostDeviceURLParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the post device Url params
func (o *PostDeviceURLParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithPort adds the port to the post device Url params
func (o *PostDeviceURLParams) WithPort(port *string) *PostDeviceURLParams {
	o.SetPort(port)
	return o
}

// SetPort adds the port to the post device Url params
func (o *PostDeviceURLParams) SetPort(port *string) {
	o.Port = port
}

// WithType adds the typeVar to the post device Url params
func (o *PostDeviceURLParams) WithType(typeVar string) *PostDeviceURLParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the post device Url params
func (o *PostDeviceURLParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WithURLSuffix adds the uRLSuffix to the post device Url params
func (o *PostDeviceURLParams) WithURLSuffix(uRLSuffix *string) *PostDeviceURLParams {
	o.SetURLSuffix(uRLSuffix)
	return o
}

// SetURLSuffix adds the urlSuffix to the post device Url params
func (o *PostDeviceURLParams) SetURLSuffix(uRLSuffix *string) {
	o.URLSuffix = uRLSuffix
}

// WriteToRequest writes these params to a swagger request
func (o *PostDeviceURLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param device
	frDevice := o.Device
	fDevice := frDevice
	if fDevice != "" {
		if err := r.SetFormParam("device", fDevice); err != nil {
			return err
		}
	}

	if o.Host != nil {

		// form param host
		var frHost string
		if o.Host != nil {
			frHost = *o.Host
		}
		fHost := frHost
		if fHost != "" {
			if err := r.SetFormParam("host", fHost); err != nil {
				return err
			}
		}

	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if o.Port != nil {

		// form param port
		var frPort string
		if o.Port != nil {
			frPort = *o.Port
		}
		fPort := frPort
		if fPort != "" {
			if err := r.SetFormParam("port", fPort); err != nil {
				return err
			}
		}

	}

	// form param type
	frType := o.Type
	fType := frType
	if fType != "" {
		if err := r.SetFormParam("type", fType); err != nil {
			return err
		}
	}

	if o.URLSuffix != nil {

		// form param url_suffix
		var frURLSuffix string
		if o.URLSuffix != nil {
			frURLSuffix = *o.URLSuffix
		}
		fURLSuffix := frURLSuffix
		if fURLSuffix != "" {
			if err := r.SetFormParam("url_suffix", fURLSuffix); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
