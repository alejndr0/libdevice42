// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteDeviceURLReader is a Reader for the DeleteDeviceURL structure.
type DeleteDeviceURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDeviceURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteDeviceURLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteDeviceURLBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteDeviceURLUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteDeviceURLForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteDeviceURLNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteDeviceURLMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewDeleteDeviceURLGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteDeviceURLInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteDeviceURLServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteDeviceURLOK creates a DeleteDeviceURLOK with default headers values
func NewDeleteDeviceURLOK() *DeleteDeviceURLOK {
	return &DeleteDeviceURLOK{}
}

/*DeleteDeviceURLOK handles this case with default header values.

The above command returns results like this:
*/
type DeleteDeviceURLOK struct {
	Payload *DeleteDeviceURLOKBody
}

func (o *DeleteDeviceURLOK) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/device/url/{id}/][%d] deleteDeviceUrlOK  %+v", 200, o.Payload)
}

func (o *DeleteDeviceURLOK) GetPayload() *DeleteDeviceURLOKBody {
	return o.Payload
}

func (o *DeleteDeviceURLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteDeviceURLOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDeviceURLBadRequest creates a DeleteDeviceURLBadRequest with default headers values
func NewDeleteDeviceURLBadRequest() *DeleteDeviceURLBadRequest {
	return &DeleteDeviceURLBadRequest{}
}

/*DeleteDeviceURLBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type DeleteDeviceURLBadRequest struct {
}

func (o *DeleteDeviceURLBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/device/url/{id}/][%d] deleteDeviceUrlBadRequest ", 400)
}

func (o *DeleteDeviceURLBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteDeviceURLUnauthorized creates a DeleteDeviceURLUnauthorized with default headers values
func NewDeleteDeviceURLUnauthorized() *DeleteDeviceURLUnauthorized {
	return &DeleteDeviceURLUnauthorized{}
}

/*DeleteDeviceURLUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type DeleteDeviceURLUnauthorized struct {
}

func (o *DeleteDeviceURLUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/device/url/{id}/][%d] deleteDeviceUrlUnauthorized ", 401)
}

func (o *DeleteDeviceURLUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteDeviceURLForbidden creates a DeleteDeviceURLForbidden with default headers values
func NewDeleteDeviceURLForbidden() *DeleteDeviceURLForbidden {
	return &DeleteDeviceURLForbidden{}
}

/*DeleteDeviceURLForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type DeleteDeviceURLForbidden struct {
}

func (o *DeleteDeviceURLForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/device/url/{id}/][%d] deleteDeviceUrlForbidden ", 403)
}

func (o *DeleteDeviceURLForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteDeviceURLNotFound creates a DeleteDeviceURLNotFound with default headers values
func NewDeleteDeviceURLNotFound() *DeleteDeviceURLNotFound {
	return &DeleteDeviceURLNotFound{}
}

/*DeleteDeviceURLNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type DeleteDeviceURLNotFound struct {
}

func (o *DeleteDeviceURLNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/device/url/{id}/][%d] deleteDeviceUrlNotFound ", 404)
}

func (o *DeleteDeviceURLNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteDeviceURLMethodNotAllowed creates a DeleteDeviceURLMethodNotAllowed with default headers values
func NewDeleteDeviceURLMethodNotAllowed() *DeleteDeviceURLMethodNotAllowed {
	return &DeleteDeviceURLMethodNotAllowed{}
}

/*DeleteDeviceURLMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type DeleteDeviceURLMethodNotAllowed struct {
}

func (o *DeleteDeviceURLMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/device/url/{id}/][%d] deleteDeviceUrlMethodNotAllowed ", 405)
}

func (o *DeleteDeviceURLMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteDeviceURLGone creates a DeleteDeviceURLGone with default headers values
func NewDeleteDeviceURLGone() *DeleteDeviceURLGone {
	return &DeleteDeviceURLGone{}
}

/*DeleteDeviceURLGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type DeleteDeviceURLGone struct {
}

func (o *DeleteDeviceURLGone) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/device/url/{id}/][%d] deleteDeviceUrlGone ", 410)
}

func (o *DeleteDeviceURLGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteDeviceURLInternalServerError creates a DeleteDeviceURLInternalServerError with default headers values
func NewDeleteDeviceURLInternalServerError() *DeleteDeviceURLInternalServerError {
	return &DeleteDeviceURLInternalServerError{}
}

/*DeleteDeviceURLInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type DeleteDeviceURLInternalServerError struct {
}

func (o *DeleteDeviceURLInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/device/url/{id}/][%d] deleteDeviceUrlInternalServerError ", 500)
}

func (o *DeleteDeviceURLInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteDeviceURLServiceUnavailable creates a DeleteDeviceURLServiceUnavailable with default headers values
func NewDeleteDeviceURLServiceUnavailable() *DeleteDeviceURLServiceUnavailable {
	return &DeleteDeviceURLServiceUnavailable{}
}

/*DeleteDeviceURLServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type DeleteDeviceURLServiceUnavailable struct {
}

func (o *DeleteDeviceURLServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /api/1.0/device/url/{id}/][%d] deleteDeviceUrlServiceUnavailable ", 503)
}

func (o *DeleteDeviceURLServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DeleteDeviceURLOKBody delete device URL o k body
swagger:model DeleteDeviceURLOKBody
*/
type DeleteDeviceURLOKBody struct {

	// deleted
	Deleted interface{} `json:"deleted,omitempty"`

	// id
	ID interface{} `json:"id,omitempty"`
}

// Validate validates this delete device URL o k body
func (o *DeleteDeviceURLOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteDeviceURLOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteDeviceURLOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteDeviceURLOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
