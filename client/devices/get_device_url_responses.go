// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetDeviceURLReader is a Reader for the GetDeviceURL structure.
type GetDeviceURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceURLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDeviceURLBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDeviceURLUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDeviceURLForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeviceURLNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetDeviceURLMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetDeviceURLGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDeviceURLInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetDeviceURLServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDeviceURLOK creates a GetDeviceURLOK with default headers values
func NewGetDeviceURLOK() *GetDeviceURLOK {
	return &GetDeviceURLOK{}
}

/*GetDeviceURLOK handles this case with default header values.

The above command returns results like this:
*/
type GetDeviceURLOK struct {
	Payload *GetDeviceURLOKBody
}

func (o *GetDeviceURLOK) Error() string {
	return fmt.Sprintf("[GET /api/1.0/device/url/][%d] getDeviceUrlOK  %+v", 200, o.Payload)
}

func (o *GetDeviceURLOK) GetPayload() *GetDeviceURLOKBody {
	return o.Payload
}

func (o *GetDeviceURLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDeviceURLOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceURLBadRequest creates a GetDeviceURLBadRequest with default headers values
func NewGetDeviceURLBadRequest() *GetDeviceURLBadRequest {
	return &GetDeviceURLBadRequest{}
}

/*GetDeviceURLBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type GetDeviceURLBadRequest struct {
}

func (o *GetDeviceURLBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/1.0/device/url/][%d] getDeviceUrlBadRequest ", 400)
}

func (o *GetDeviceURLBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeviceURLUnauthorized creates a GetDeviceURLUnauthorized with default headers values
func NewGetDeviceURLUnauthorized() *GetDeviceURLUnauthorized {
	return &GetDeviceURLUnauthorized{}
}

/*GetDeviceURLUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type GetDeviceURLUnauthorized struct {
}

func (o *GetDeviceURLUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/1.0/device/url/][%d] getDeviceUrlUnauthorized ", 401)
}

func (o *GetDeviceURLUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeviceURLForbidden creates a GetDeviceURLForbidden with default headers values
func NewGetDeviceURLForbidden() *GetDeviceURLForbidden {
	return &GetDeviceURLForbidden{}
}

/*GetDeviceURLForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type GetDeviceURLForbidden struct {
}

func (o *GetDeviceURLForbidden) Error() string {
	return fmt.Sprintf("[GET /api/1.0/device/url/][%d] getDeviceUrlForbidden ", 403)
}

func (o *GetDeviceURLForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeviceURLNotFound creates a GetDeviceURLNotFound with default headers values
func NewGetDeviceURLNotFound() *GetDeviceURLNotFound {
	return &GetDeviceURLNotFound{}
}

/*GetDeviceURLNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type GetDeviceURLNotFound struct {
}

func (o *GetDeviceURLNotFound) Error() string {
	return fmt.Sprintf("[GET /api/1.0/device/url/][%d] getDeviceUrlNotFound ", 404)
}

func (o *GetDeviceURLNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeviceURLMethodNotAllowed creates a GetDeviceURLMethodNotAllowed with default headers values
func NewGetDeviceURLMethodNotAllowed() *GetDeviceURLMethodNotAllowed {
	return &GetDeviceURLMethodNotAllowed{}
}

/*GetDeviceURLMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type GetDeviceURLMethodNotAllowed struct {
}

func (o *GetDeviceURLMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/1.0/device/url/][%d] getDeviceUrlMethodNotAllowed ", 405)
}

func (o *GetDeviceURLMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeviceURLGone creates a GetDeviceURLGone with default headers values
func NewGetDeviceURLGone() *GetDeviceURLGone {
	return &GetDeviceURLGone{}
}

/*GetDeviceURLGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type GetDeviceURLGone struct {
}

func (o *GetDeviceURLGone) Error() string {
	return fmt.Sprintf("[GET /api/1.0/device/url/][%d] getDeviceUrlGone ", 410)
}

func (o *GetDeviceURLGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeviceURLInternalServerError creates a GetDeviceURLInternalServerError with default headers values
func NewGetDeviceURLInternalServerError() *GetDeviceURLInternalServerError {
	return &GetDeviceURLInternalServerError{}
}

/*GetDeviceURLInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type GetDeviceURLInternalServerError struct {
}

func (o *GetDeviceURLInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/1.0/device/url/][%d] getDeviceUrlInternalServerError ", 500)
}

func (o *GetDeviceURLInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeviceURLServiceUnavailable creates a GetDeviceURLServiceUnavailable with default headers values
func NewGetDeviceURLServiceUnavailable() *GetDeviceURLServiceUnavailable {
	return &GetDeviceURLServiceUnavailable{}
}

/*GetDeviceURLServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type GetDeviceURLServiceUnavailable struct {
}

func (o *GetDeviceURLServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/1.0/device/url/][%d] getDeviceUrlServiceUnavailable ", 503)
}

func (o *GetDeviceURLServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DeviceWeblinksItems0 device weblinks items0
swagger:model DeviceWeblinksItems0
*/
type DeviceWeblinksItems0 struct {

	// device
	Device interface{} `json:"device,omitempty"`

	// host
	Host interface{} `json:"host,omitempty"`

	// id
	ID interface{} `json:"id,omitempty"`

	// notes
	Notes interface{} `json:"notes,omitempty"`

	// port
	Port interface{} `json:"port,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`

	// url suffix
	URLSuffix interface{} `json:"url_suffix,omitempty"`
}

// Validate validates this device weblinks items0
func (o *DeviceWeblinksItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeviceWeblinksItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeviceWeblinksItems0) UnmarshalBinary(b []byte) error {
	var res DeviceWeblinksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetDeviceURLOKBody get device URL o k body
swagger:model GetDeviceURLOKBody
*/
type GetDeviceURLOKBody struct {

	// code
	Code interface{} `json:"code,omitempty"`

	// device weblinks
	DeviceWeblinks []*DeviceWeblinksItems0 `json:"device_weblinks"`
}

// Validate validates this get device URL o k body
func (o *GetDeviceURLOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeviceWeblinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceURLOKBody) validateDeviceWeblinks(formats strfmt.Registry) error {

	if swag.IsZero(o.DeviceWeblinks) { // not required
		return nil
	}

	for i := 0; i < len(o.DeviceWeblinks); i++ {
		if swag.IsZero(o.DeviceWeblinks[i]) { // not required
			continue
		}

		if o.DeviceWeblinks[i] != nil {
			if err := o.DeviceWeblinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDeviceUrlOK" + "." + "device_weblinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceURLOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceURLOKBody) UnmarshalBinary(b []byte) error {
	var res GetDeviceURLOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
