// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostMultiSerialDeviceParams creates a new PostMultiSerialDeviceParams object
// with the default values initialized.
func NewPostMultiSerialDeviceParams() *PostMultiSerialDeviceParams {
	var (
		virtualSubtypeDefault = string("internal VM")
	)
	return &PostMultiSerialDeviceParams{
		VirtualSubtype: &virtualSubtypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPostMultiSerialDeviceParamsWithTimeout creates a new PostMultiSerialDeviceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostMultiSerialDeviceParamsWithTimeout(timeout time.Duration) *PostMultiSerialDeviceParams {
	var (
		virtualSubtypeDefault = string("internal VM")
	)
	return &PostMultiSerialDeviceParams{
		VirtualSubtype: &virtualSubtypeDefault,

		timeout: timeout,
	}
}

// NewPostMultiSerialDeviceParamsWithContext creates a new PostMultiSerialDeviceParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostMultiSerialDeviceParamsWithContext(ctx context.Context) *PostMultiSerialDeviceParams {
	var (
		virtualSubtypeDefault = string("internal VM")
	)
	return &PostMultiSerialDeviceParams{
		VirtualSubtype: &virtualSubtypeDefault,

		Context: ctx,
	}
}

// NewPostMultiSerialDeviceParamsWithHTTPClient creates a new PostMultiSerialDeviceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostMultiSerialDeviceParamsWithHTTPClient(client *http.Client) *PostMultiSerialDeviceParams {
	var (
		virtualSubtypeDefault = string("internal VM")
	)
	return &PostMultiSerialDeviceParams{
		VirtualSubtype: &virtualSubtypeDefault,
		HTTPClient:     client,
	}
}

/*PostMultiSerialDeviceParams contains all the parameters to send to the API endpoint
for the post multi serial device operation typically these are written to a http.Request
*/
type PostMultiSerialDeviceParams struct {

	/*Aliases
	  optional. Comma separated aliases for the device. Must not exist, ignored otherwise.

	*/
	Aliases *string
	/*AliasesRemove
	  comma separated aliases to remove

	*/
	AliasesRemove *string
	/*Appcomps
	  comma separated application component names on this device.

	*/
	Appcomps *string
	/*AssetNo
	  the asset # of the device.

	*/
	AssetNo *string
	/*BladeHost
	  the name of the host for the blade machine. Two conditions must be met for this value to successfully update: 1. The device must be a blade type. 2. The blade host must already exist and must already be marked as a blade host.

	*/
	BladeHost *string
	/*BladeHostClear
	  clear blade host for device

	*/
	BladeHostClear *string
	/*Contract
	  Name of the contract. Used only if contract name is unique. – DEPRECATED in v550.

	*/
	Contract *string
	/*ContractID
	  ID for the contract. Available via GET /api/api/1.0/contracts/ – DEPRECATED in v550.

	*/
	ContractID *int64
	/*Cpucore
	  number of cores/CPU. Integer. (If updating, cpupower and cpucount required)

	*/
	Cpucore *string
	/*Cpucount
	  total # of CPUs. (If updating, cpupower and cpucore required)

	*/
	Cpucount *int64
	/*Cpupower
	  CPU speed in MHz, just numbers. (If updating, cpucount and cpucore required)

	*/
	Cpupower *string
	/*Customer
	  name of the customer. Customer record must already exist.

	*/
	Customer *string
	/*DevicesInCluster
	  comma separated device names for devices in cluster. Only valid for device type cluster.

	*/
	DevicesInCluster *string
	/*DevicesInClusterRemove
	  comma separated device names for removing devices in cluster. Only valid for device type cluster. (added in v9.2.0)

	*/
	DevicesInClusterRemove *string
	/*Hardware
	  the name of the hardware model for the device. Use in conjunction with the manufacturer argument. However, an update will only occur if no hardware model is previously assigned to the device.

	*/
	Hardware *string
	/*Hddcount
	  total # of HDD (hddcount, hddsize, hddraid, and hddraid_type all required when updating any of the 4)

	*/
	Hddcount *int64
	/*Hddraid
	  Raid. Possible values: software or hardware. none to clear. (none added in v9.1.0) (hddcount, hddsize, hddraid, and hddraid_type all required when updating any of the 4)

	*/
	Hddraid *string
	/*HddraidType
	  Raid Type. (hddcount, hddsize, hddraid, and hddraid_type all required when updating any of the 4)

	*/
	HddraidType *string
	/*Hddsize
	  HDD Size in GB (hddcount, hddsize, hddraid, and hddraid_type all required when updating any of the 4)

	*/
	Hddsize *string
	/*InService
	  ‘yes’ indicates if device is in service, ‘no’ indicates not in service

	*/
	InService *string
	/*IsItBladeHost
	  ‘yes’ indicates if device is a blade host

	*/
	IsItBladeHost *string
	/*IsItSwitch
	  ‘yes’ indicates if device is a network switch

	*/
	IsItSwitch *string
	/*IsItVirtualHost
	  ‘yes’ indicates if device is a virtual host

	*/
	IsItVirtualHost *string
	/*Macaddress
	  the mac address value. Use multiple POST/PUT to add multiple mac addresses.

	*/
	Macaddress *string
	/*Manufacturer
	  the hardware manufacturer for the device.

	*/
	Manufacturer *string
	/*Memory
	  the total memory(RAM) in MB. Just numbers.

	*/
	Memory *string
	/*Name
	  Device name. If device with name already exists - the existing device is updated. If an existing device based on serial # or uuid are found - name is ignored. In that case existing name is not changed and you can use new_name if you wish to change the name.

	*/
	Name *string
	/*NewHardware
	  If you want to change the hardware model for a device. If the device is rack mounted, it will unmount the device before changing hardware model and attempt to mount it back to same rack location (Changed in v6.3.2)

	*/
	NewHardware *string
	/*NewName
	  As mentioned above, this can be used to change the name of an existing device

	*/
	NewName *string
	/*NewObjectCategory
	  Used to change category on a device if it is already set.

	*/
	NewObjectCategory *string
	/*Notes*/
	Notes *string
	/*ObjectCategory
	  If multitenancy is on, a category can be assigned to control access to this object, e.g. Prod_East specifies that the users with access to the Prod_East category will be able to access this device.

	*/
	ObjectCategory *string
	/*Os
	  the name of the operating system (os, osver, and osverno all required if updating any of the three).

	*/
	Os *string
	/*Osarch
	  The architecture of the operating system (32 or 64)

	*/
	Osarch *string
	/*Osver
	  the version of the operating system (os, osver, and osverno all required if updating any of the three)

	*/
	Osver *string
	/*Osverno
	  the version # or build # of the operating system (os, osver, and osverno all required if updating any of the three)

	*/
	Osverno *int64
	/*SerialNo
	  the serial # of the device. If a device with matching serial # is found - that device is updated. Serial # with less than 3 characters in length are ignored. Also, certain generic serial #s like 123456789 or ‘not specified’ are ignored.

	*/
	SerialNo *string
	/*ServiceLevel
	  the service level name for the device. The service level must be pre-defined in the device42 appliance before it can be referenced in an api call.

	*/
	ServiceLevel *string
	/*SlotNo
	  slot # for blade device.

	*/
	SlotNo *int64
	/*StorageRoom
	  name of the room to assign device to, only used if the room name is unique. Added in v5.5.0

	*/
	StorageRoom *string
	/*StorageRoomID
	  ID of the room to assign device to storage room. Added in v5.5.0

	*/
	StorageRoomID *int64
	/*Subtype
	  Only for device type other. Must exist internally first.

	*/
	Subtype *string
	/*Tags
	  comma separated tags (Added in v5.9.2)

	*/
	Tags *string
	/*TagsRemove
	  comma separated tags to remove (added in v9.1.0)

	*/
	TagsRemove *string
	/*Type
	  is the type for device. Valid values are ‘physical’, ‘virtual’, ‘blade’, ‘cluster’, or ‘other’.

	*/
	Type *string
	/*UUID
	  the uuid of the device. If a device with matching uuid is found - that device is updated.

	*/
	UUID *string
	/*VirtualHost
	  Is the name for the host of the virtual machine. Two conditions must be met for this value to successfully update: 1. The device must be a virtual machine. 2. The virtual host must already exist in the device42 application and must be already marked as a virtual host.

	*/
	VirtualHost *string
	/*VirtualHostClear
	  yes to clear virtual host for a VM (added in v9.1.0)

	*/
	VirtualHostClear *string
	/*VirtualSubtype
	  Only for device type virtual. Default is internal VM.

	*/
	VirtualSubtype *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithTimeout(timeout time.Duration) *PostMultiSerialDeviceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithContext(ctx context.Context) *PostMultiSerialDeviceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithHTTPClient(client *http.Client) *PostMultiSerialDeviceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAliases adds the aliases to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithAliases(aliases *string) *PostMultiSerialDeviceParams {
	o.SetAliases(aliases)
	return o
}

// SetAliases adds the aliases to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetAliases(aliases *string) {
	o.Aliases = aliases
}

// WithAliasesRemove adds the aliasesRemove to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithAliasesRemove(aliasesRemove *string) *PostMultiSerialDeviceParams {
	o.SetAliasesRemove(aliasesRemove)
	return o
}

// SetAliasesRemove adds the aliasesRemove to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetAliasesRemove(aliasesRemove *string) {
	o.AliasesRemove = aliasesRemove
}

// WithAppcomps adds the appcomps to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithAppcomps(appcomps *string) *PostMultiSerialDeviceParams {
	o.SetAppcomps(appcomps)
	return o
}

// SetAppcomps adds the appcomps to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetAppcomps(appcomps *string) {
	o.Appcomps = appcomps
}

// WithAssetNo adds the assetNo to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithAssetNo(assetNo *string) *PostMultiSerialDeviceParams {
	o.SetAssetNo(assetNo)
	return o
}

// SetAssetNo adds the assetNo to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetAssetNo(assetNo *string) {
	o.AssetNo = assetNo
}

// WithBladeHost adds the bladeHost to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithBladeHost(bladeHost *string) *PostMultiSerialDeviceParams {
	o.SetBladeHost(bladeHost)
	return o
}

// SetBladeHost adds the bladeHost to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetBladeHost(bladeHost *string) {
	o.BladeHost = bladeHost
}

// WithBladeHostClear adds the bladeHostClear to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithBladeHostClear(bladeHostClear *string) *PostMultiSerialDeviceParams {
	o.SetBladeHostClear(bladeHostClear)
	return o
}

// SetBladeHostClear adds the bladeHostClear to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetBladeHostClear(bladeHostClear *string) {
	o.BladeHostClear = bladeHostClear
}

// WithContract adds the contract to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithContract(contract *string) *PostMultiSerialDeviceParams {
	o.SetContract(contract)
	return o
}

// SetContract adds the contract to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetContract(contract *string) {
	o.Contract = contract
}

// WithContractID adds the contractID to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithContractID(contractID *int64) *PostMultiSerialDeviceParams {
	o.SetContractID(contractID)
	return o
}

// SetContractID adds the contractId to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetContractID(contractID *int64) {
	o.ContractID = contractID
}

// WithCpucore adds the cpucore to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithCpucore(cpucore *string) *PostMultiSerialDeviceParams {
	o.SetCpucore(cpucore)
	return o
}

// SetCpucore adds the cpucore to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetCpucore(cpucore *string) {
	o.Cpucore = cpucore
}

// WithCpucount adds the cpucount to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithCpucount(cpucount *int64) *PostMultiSerialDeviceParams {
	o.SetCpucount(cpucount)
	return o
}

// SetCpucount adds the cpucount to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetCpucount(cpucount *int64) {
	o.Cpucount = cpucount
}

// WithCpupower adds the cpupower to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithCpupower(cpupower *string) *PostMultiSerialDeviceParams {
	o.SetCpupower(cpupower)
	return o
}

// SetCpupower adds the cpupower to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetCpupower(cpupower *string) {
	o.Cpupower = cpupower
}

// WithCustomer adds the customer to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithCustomer(customer *string) *PostMultiSerialDeviceParams {
	o.SetCustomer(customer)
	return o
}

// SetCustomer adds the customer to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetCustomer(customer *string) {
	o.Customer = customer
}

// WithDevicesInCluster adds the devicesInCluster to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithDevicesInCluster(devicesInCluster *string) *PostMultiSerialDeviceParams {
	o.SetDevicesInCluster(devicesInCluster)
	return o
}

// SetDevicesInCluster adds the devicesInCluster to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetDevicesInCluster(devicesInCluster *string) {
	o.DevicesInCluster = devicesInCluster
}

// WithDevicesInClusterRemove adds the devicesInClusterRemove to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithDevicesInClusterRemove(devicesInClusterRemove *string) *PostMultiSerialDeviceParams {
	o.SetDevicesInClusterRemove(devicesInClusterRemove)
	return o
}

// SetDevicesInClusterRemove adds the devicesInClusterRemove to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetDevicesInClusterRemove(devicesInClusterRemove *string) {
	o.DevicesInClusterRemove = devicesInClusterRemove
}

// WithHardware adds the hardware to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithHardware(hardware *string) *PostMultiSerialDeviceParams {
	o.SetHardware(hardware)
	return o
}

// SetHardware adds the hardware to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetHardware(hardware *string) {
	o.Hardware = hardware
}

// WithHddcount adds the hddcount to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithHddcount(hddcount *int64) *PostMultiSerialDeviceParams {
	o.SetHddcount(hddcount)
	return o
}

// SetHddcount adds the hddcount to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetHddcount(hddcount *int64) {
	o.Hddcount = hddcount
}

// WithHddraid adds the hddraid to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithHddraid(hddraid *string) *PostMultiSerialDeviceParams {
	o.SetHddraid(hddraid)
	return o
}

// SetHddraid adds the hddraid to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetHddraid(hddraid *string) {
	o.Hddraid = hddraid
}

// WithHddraidType adds the hddraidType to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithHddraidType(hddraidType *string) *PostMultiSerialDeviceParams {
	o.SetHddraidType(hddraidType)
	return o
}

// SetHddraidType adds the hddraidType to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetHddraidType(hddraidType *string) {
	o.HddraidType = hddraidType
}

// WithHddsize adds the hddsize to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithHddsize(hddsize *string) *PostMultiSerialDeviceParams {
	o.SetHddsize(hddsize)
	return o
}

// SetHddsize adds the hddsize to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetHddsize(hddsize *string) {
	o.Hddsize = hddsize
}

// WithInService adds the inService to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithInService(inService *string) *PostMultiSerialDeviceParams {
	o.SetInService(inService)
	return o
}

// SetInService adds the inService to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetInService(inService *string) {
	o.InService = inService
}

// WithIsItBladeHost adds the isItBladeHost to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithIsItBladeHost(isItBladeHost *string) *PostMultiSerialDeviceParams {
	o.SetIsItBladeHost(isItBladeHost)
	return o
}

// SetIsItBladeHost adds the isItBladeHost to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetIsItBladeHost(isItBladeHost *string) {
	o.IsItBladeHost = isItBladeHost
}

// WithIsItSwitch adds the isItSwitch to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithIsItSwitch(isItSwitch *string) *PostMultiSerialDeviceParams {
	o.SetIsItSwitch(isItSwitch)
	return o
}

// SetIsItSwitch adds the isItSwitch to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetIsItSwitch(isItSwitch *string) {
	o.IsItSwitch = isItSwitch
}

// WithIsItVirtualHost adds the isItVirtualHost to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithIsItVirtualHost(isItVirtualHost *string) *PostMultiSerialDeviceParams {
	o.SetIsItVirtualHost(isItVirtualHost)
	return o
}

// SetIsItVirtualHost adds the isItVirtualHost to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetIsItVirtualHost(isItVirtualHost *string) {
	o.IsItVirtualHost = isItVirtualHost
}

// WithMacaddress adds the macaddress to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithMacaddress(macaddress *string) *PostMultiSerialDeviceParams {
	o.SetMacaddress(macaddress)
	return o
}

// SetMacaddress adds the macaddress to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetMacaddress(macaddress *string) {
	o.Macaddress = macaddress
}

// WithManufacturer adds the manufacturer to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithManufacturer(manufacturer *string) *PostMultiSerialDeviceParams {
	o.SetManufacturer(manufacturer)
	return o
}

// SetManufacturer adds the manufacturer to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetManufacturer(manufacturer *string) {
	o.Manufacturer = manufacturer
}

// WithMemory adds the memory to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithMemory(memory *string) *PostMultiSerialDeviceParams {
	o.SetMemory(memory)
	return o
}

// SetMemory adds the memory to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetMemory(memory *string) {
	o.Memory = memory
}

// WithName adds the name to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithName(name *string) *PostMultiSerialDeviceParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetName(name *string) {
	o.Name = name
}

// WithNewHardware adds the newHardware to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithNewHardware(newHardware *string) *PostMultiSerialDeviceParams {
	o.SetNewHardware(newHardware)
	return o
}

// SetNewHardware adds the newHardware to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetNewHardware(newHardware *string) {
	o.NewHardware = newHardware
}

// WithNewName adds the newName to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithNewName(newName *string) *PostMultiSerialDeviceParams {
	o.SetNewName(newName)
	return o
}

// SetNewName adds the newName to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetNewName(newName *string) {
	o.NewName = newName
}

// WithNewObjectCategory adds the newObjectCategory to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithNewObjectCategory(newObjectCategory *string) *PostMultiSerialDeviceParams {
	o.SetNewObjectCategory(newObjectCategory)
	return o
}

// SetNewObjectCategory adds the newObjectCategory to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetNewObjectCategory(newObjectCategory *string) {
	o.NewObjectCategory = newObjectCategory
}

// WithNotes adds the notes to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithNotes(notes *string) *PostMultiSerialDeviceParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithObjectCategory adds the objectCategory to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithObjectCategory(objectCategory *string) *PostMultiSerialDeviceParams {
	o.SetObjectCategory(objectCategory)
	return o
}

// SetObjectCategory adds the objectCategory to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetObjectCategory(objectCategory *string) {
	o.ObjectCategory = objectCategory
}

// WithOs adds the os to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithOs(os *string) *PostMultiSerialDeviceParams {
	o.SetOs(os)
	return o
}

// SetOs adds the os to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetOs(os *string) {
	o.Os = os
}

// WithOsarch adds the osarch to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithOsarch(osarch *string) *PostMultiSerialDeviceParams {
	o.SetOsarch(osarch)
	return o
}

// SetOsarch adds the osarch to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetOsarch(osarch *string) {
	o.Osarch = osarch
}

// WithOsver adds the osver to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithOsver(osver *string) *PostMultiSerialDeviceParams {
	o.SetOsver(osver)
	return o
}

// SetOsver adds the osver to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetOsver(osver *string) {
	o.Osver = osver
}

// WithOsverno adds the osverno to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithOsverno(osverno *int64) *PostMultiSerialDeviceParams {
	o.SetOsverno(osverno)
	return o
}

// SetOsverno adds the osverno to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetOsverno(osverno *int64) {
	o.Osverno = osverno
}

// WithSerialNo adds the serialNo to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithSerialNo(serialNo *string) *PostMultiSerialDeviceParams {
	o.SetSerialNo(serialNo)
	return o
}

// SetSerialNo adds the serialNo to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetSerialNo(serialNo *string) {
	o.SerialNo = serialNo
}

// WithServiceLevel adds the serviceLevel to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithServiceLevel(serviceLevel *string) *PostMultiSerialDeviceParams {
	o.SetServiceLevel(serviceLevel)
	return o
}

// SetServiceLevel adds the serviceLevel to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetServiceLevel(serviceLevel *string) {
	o.ServiceLevel = serviceLevel
}

// WithSlotNo adds the slotNo to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithSlotNo(slotNo *int64) *PostMultiSerialDeviceParams {
	o.SetSlotNo(slotNo)
	return o
}

// SetSlotNo adds the slotNo to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetSlotNo(slotNo *int64) {
	o.SlotNo = slotNo
}

// WithStorageRoom adds the storageRoom to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithStorageRoom(storageRoom *string) *PostMultiSerialDeviceParams {
	o.SetStorageRoom(storageRoom)
	return o
}

// SetStorageRoom adds the storageRoom to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetStorageRoom(storageRoom *string) {
	o.StorageRoom = storageRoom
}

// WithStorageRoomID adds the storageRoomID to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithStorageRoomID(storageRoomID *int64) *PostMultiSerialDeviceParams {
	o.SetStorageRoomID(storageRoomID)
	return o
}

// SetStorageRoomID adds the storageRoomId to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetStorageRoomID(storageRoomID *int64) {
	o.StorageRoomID = storageRoomID
}

// WithSubtype adds the subtype to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithSubtype(subtype *string) *PostMultiSerialDeviceParams {
	o.SetSubtype(subtype)
	return o
}

// SetSubtype adds the subtype to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetSubtype(subtype *string) {
	o.Subtype = subtype
}

// WithTags adds the tags to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithTags(tags *string) *PostMultiSerialDeviceParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithTagsRemove adds the tagsRemove to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithTagsRemove(tagsRemove *string) *PostMultiSerialDeviceParams {
	o.SetTagsRemove(tagsRemove)
	return o
}

// SetTagsRemove adds the tagsRemove to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetTagsRemove(tagsRemove *string) {
	o.TagsRemove = tagsRemove
}

// WithType adds the typeVar to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithType(typeVar *string) *PostMultiSerialDeviceParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUUID adds the uuid to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithUUID(uuid *string) *PostMultiSerialDeviceParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WithVirtualHost adds the virtualHost to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithVirtualHost(virtualHost *string) *PostMultiSerialDeviceParams {
	o.SetVirtualHost(virtualHost)
	return o
}

// SetVirtualHost adds the virtualHost to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetVirtualHost(virtualHost *string) {
	o.VirtualHost = virtualHost
}

// WithVirtualHostClear adds the virtualHostClear to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithVirtualHostClear(virtualHostClear *string) *PostMultiSerialDeviceParams {
	o.SetVirtualHostClear(virtualHostClear)
	return o
}

// SetVirtualHostClear adds the virtualHostClear to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetVirtualHostClear(virtualHostClear *string) {
	o.VirtualHostClear = virtualHostClear
}

// WithVirtualSubtype adds the virtualSubtype to the post multi serial device params
func (o *PostMultiSerialDeviceParams) WithVirtualSubtype(virtualSubtype *string) *PostMultiSerialDeviceParams {
	o.SetVirtualSubtype(virtualSubtype)
	return o
}

// SetVirtualSubtype adds the virtualSubtype to the post multi serial device params
func (o *PostMultiSerialDeviceParams) SetVirtualSubtype(virtualSubtype *string) {
	o.VirtualSubtype = virtualSubtype
}

// WriteToRequest writes these params to a swagger request
func (o *PostMultiSerialDeviceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Aliases != nil {

		// form param aliases
		var frAliases string
		if o.Aliases != nil {
			frAliases = *o.Aliases
		}
		fAliases := frAliases
		if fAliases != "" {
			if err := r.SetFormParam("aliases", fAliases); err != nil {
				return err
			}
		}

	}

	if o.AliasesRemove != nil {

		// form param aliases_remove
		var frAliasesRemove string
		if o.AliasesRemove != nil {
			frAliasesRemove = *o.AliasesRemove
		}
		fAliasesRemove := frAliasesRemove
		if fAliasesRemove != "" {
			if err := r.SetFormParam("aliases_remove", fAliasesRemove); err != nil {
				return err
			}
		}

	}

	if o.Appcomps != nil {

		// form param appcomps
		var frAppcomps string
		if o.Appcomps != nil {
			frAppcomps = *o.Appcomps
		}
		fAppcomps := frAppcomps
		if fAppcomps != "" {
			if err := r.SetFormParam("appcomps", fAppcomps); err != nil {
				return err
			}
		}

	}

	if o.AssetNo != nil {

		// form param asset_no
		var frAssetNo string
		if o.AssetNo != nil {
			frAssetNo = *o.AssetNo
		}
		fAssetNo := frAssetNo
		if fAssetNo != "" {
			if err := r.SetFormParam("asset_no", fAssetNo); err != nil {
				return err
			}
		}

	}

	if o.BladeHost != nil {

		// form param blade_host
		var frBladeHost string
		if o.BladeHost != nil {
			frBladeHost = *o.BladeHost
		}
		fBladeHost := frBladeHost
		if fBladeHost != "" {
			if err := r.SetFormParam("blade_host", fBladeHost); err != nil {
				return err
			}
		}

	}

	if o.BladeHostClear != nil {

		// form param blade_host_clear
		var frBladeHostClear string
		if o.BladeHostClear != nil {
			frBladeHostClear = *o.BladeHostClear
		}
		fBladeHostClear := frBladeHostClear
		if fBladeHostClear != "" {
			if err := r.SetFormParam("blade_host_clear", fBladeHostClear); err != nil {
				return err
			}
		}

	}

	if o.Contract != nil {

		// form param contract
		var frContract string
		if o.Contract != nil {
			frContract = *o.Contract
		}
		fContract := frContract
		if fContract != "" {
			if err := r.SetFormParam("contract", fContract); err != nil {
				return err
			}
		}

	}

	if o.ContractID != nil {

		// form param contract_id
		var frContractID int64
		if o.ContractID != nil {
			frContractID = *o.ContractID
		}
		fContractID := swag.FormatInt64(frContractID)
		if fContractID != "" {
			if err := r.SetFormParam("contract_id", fContractID); err != nil {
				return err
			}
		}

	}

	if o.Cpucore != nil {

		// form param cpucore
		var frCpucore string
		if o.Cpucore != nil {
			frCpucore = *o.Cpucore
		}
		fCpucore := frCpucore
		if fCpucore != "" {
			if err := r.SetFormParam("cpucore", fCpucore); err != nil {
				return err
			}
		}

	}

	if o.Cpucount != nil {

		// form param cpucount
		var frCpucount int64
		if o.Cpucount != nil {
			frCpucount = *o.Cpucount
		}
		fCpucount := swag.FormatInt64(frCpucount)
		if fCpucount != "" {
			if err := r.SetFormParam("cpucount", fCpucount); err != nil {
				return err
			}
		}

	}

	if o.Cpupower != nil {

		// form param cpupower
		var frCpupower string
		if o.Cpupower != nil {
			frCpupower = *o.Cpupower
		}
		fCpupower := frCpupower
		if fCpupower != "" {
			if err := r.SetFormParam("cpupower", fCpupower); err != nil {
				return err
			}
		}

	}

	if o.Customer != nil {

		// form param customer
		var frCustomer string
		if o.Customer != nil {
			frCustomer = *o.Customer
		}
		fCustomer := frCustomer
		if fCustomer != "" {
			if err := r.SetFormParam("customer", fCustomer); err != nil {
				return err
			}
		}

	}

	if o.DevicesInCluster != nil {

		// form param devices_in_cluster
		var frDevicesInCluster string
		if o.DevicesInCluster != nil {
			frDevicesInCluster = *o.DevicesInCluster
		}
		fDevicesInCluster := frDevicesInCluster
		if fDevicesInCluster != "" {
			if err := r.SetFormParam("devices_in_cluster", fDevicesInCluster); err != nil {
				return err
			}
		}

	}

	if o.DevicesInClusterRemove != nil {

		// form param devices_in_cluster_remove
		var frDevicesInClusterRemove string
		if o.DevicesInClusterRemove != nil {
			frDevicesInClusterRemove = *o.DevicesInClusterRemove
		}
		fDevicesInClusterRemove := frDevicesInClusterRemove
		if fDevicesInClusterRemove != "" {
			if err := r.SetFormParam("devices_in_cluster_remove", fDevicesInClusterRemove); err != nil {
				return err
			}
		}

	}

	if o.Hardware != nil {

		// form param hardware
		var frHardware string
		if o.Hardware != nil {
			frHardware = *o.Hardware
		}
		fHardware := frHardware
		if fHardware != "" {
			if err := r.SetFormParam("hardware", fHardware); err != nil {
				return err
			}
		}

	}

	if o.Hddcount != nil {

		// form param hddcount
		var frHddcount int64
		if o.Hddcount != nil {
			frHddcount = *o.Hddcount
		}
		fHddcount := swag.FormatInt64(frHddcount)
		if fHddcount != "" {
			if err := r.SetFormParam("hddcount", fHddcount); err != nil {
				return err
			}
		}

	}

	if o.Hddraid != nil {

		// form param hddraid
		var frHddraid string
		if o.Hddraid != nil {
			frHddraid = *o.Hddraid
		}
		fHddraid := frHddraid
		if fHddraid != "" {
			if err := r.SetFormParam("hddraid", fHddraid); err != nil {
				return err
			}
		}

	}

	if o.HddraidType != nil {

		// form param hddraid_type
		var frHddraidType string
		if o.HddraidType != nil {
			frHddraidType = *o.HddraidType
		}
		fHddraidType := frHddraidType
		if fHddraidType != "" {
			if err := r.SetFormParam("hddraid_type", fHddraidType); err != nil {
				return err
			}
		}

	}

	if o.Hddsize != nil {

		// form param hddsize
		var frHddsize string
		if o.Hddsize != nil {
			frHddsize = *o.Hddsize
		}
		fHddsize := frHddsize
		if fHddsize != "" {
			if err := r.SetFormParam("hddsize", fHddsize); err != nil {
				return err
			}
		}

	}

	if o.InService != nil {

		// form param in_service
		var frInService string
		if o.InService != nil {
			frInService = *o.InService
		}
		fInService := frInService
		if fInService != "" {
			if err := r.SetFormParam("in_service", fInService); err != nil {
				return err
			}
		}

	}

	if o.IsItBladeHost != nil {

		// form param is_it_blade_host
		var frIsItBladeHost string
		if o.IsItBladeHost != nil {
			frIsItBladeHost = *o.IsItBladeHost
		}
		fIsItBladeHost := frIsItBladeHost
		if fIsItBladeHost != "" {
			if err := r.SetFormParam("is_it_blade_host", fIsItBladeHost); err != nil {
				return err
			}
		}

	}

	if o.IsItSwitch != nil {

		// form param is_it_switch
		var frIsItSwitch string
		if o.IsItSwitch != nil {
			frIsItSwitch = *o.IsItSwitch
		}
		fIsItSwitch := frIsItSwitch
		if fIsItSwitch != "" {
			if err := r.SetFormParam("is_it_switch", fIsItSwitch); err != nil {
				return err
			}
		}

	}

	if o.IsItVirtualHost != nil {

		// form param is_it_virtual_host
		var frIsItVirtualHost string
		if o.IsItVirtualHost != nil {
			frIsItVirtualHost = *o.IsItVirtualHost
		}
		fIsItVirtualHost := frIsItVirtualHost
		if fIsItVirtualHost != "" {
			if err := r.SetFormParam("is_it_virtual_host", fIsItVirtualHost); err != nil {
				return err
			}
		}

	}

	if o.Macaddress != nil {

		// form param macaddress
		var frMacaddress string
		if o.Macaddress != nil {
			frMacaddress = *o.Macaddress
		}
		fMacaddress := frMacaddress
		if fMacaddress != "" {
			if err := r.SetFormParam("macaddress", fMacaddress); err != nil {
				return err
			}
		}

	}

	if o.Manufacturer != nil {

		// form param manufacturer
		var frManufacturer string
		if o.Manufacturer != nil {
			frManufacturer = *o.Manufacturer
		}
		fManufacturer := frManufacturer
		if fManufacturer != "" {
			if err := r.SetFormParam("manufacturer", fManufacturer); err != nil {
				return err
			}
		}

	}

	if o.Memory != nil {

		// form param memory
		var frMemory string
		if o.Memory != nil {
			frMemory = *o.Memory
		}
		fMemory := frMemory
		if fMemory != "" {
			if err := r.SetFormParam("memory", fMemory); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}

	}

	if o.NewHardware != nil {

		// form param new_hardware
		var frNewHardware string
		if o.NewHardware != nil {
			frNewHardware = *o.NewHardware
		}
		fNewHardware := frNewHardware
		if fNewHardware != "" {
			if err := r.SetFormParam("new_hardware", fNewHardware); err != nil {
				return err
			}
		}

	}

	if o.NewName != nil {

		// form param new_name
		var frNewName string
		if o.NewName != nil {
			frNewName = *o.NewName
		}
		fNewName := frNewName
		if fNewName != "" {
			if err := r.SetFormParam("new_name", fNewName); err != nil {
				return err
			}
		}

	}

	if o.NewObjectCategory != nil {

		// form param new_object_category
		var frNewObjectCategory string
		if o.NewObjectCategory != nil {
			frNewObjectCategory = *o.NewObjectCategory
		}
		fNewObjectCategory := frNewObjectCategory
		if fNewObjectCategory != "" {
			if err := r.SetFormParam("new_object_category", fNewObjectCategory); err != nil {
				return err
			}
		}

	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if o.ObjectCategory != nil {

		// form param object_category
		var frObjectCategory string
		if o.ObjectCategory != nil {
			frObjectCategory = *o.ObjectCategory
		}
		fObjectCategory := frObjectCategory
		if fObjectCategory != "" {
			if err := r.SetFormParam("object_category", fObjectCategory); err != nil {
				return err
			}
		}

	}

	if o.Os != nil {

		// form param os
		var frOs string
		if o.Os != nil {
			frOs = *o.Os
		}
		fOs := frOs
		if fOs != "" {
			if err := r.SetFormParam("os", fOs); err != nil {
				return err
			}
		}

	}

	if o.Osarch != nil {

		// form param osarch
		var frOsarch string
		if o.Osarch != nil {
			frOsarch = *o.Osarch
		}
		fOsarch := frOsarch
		if fOsarch != "" {
			if err := r.SetFormParam("osarch", fOsarch); err != nil {
				return err
			}
		}

	}

	if o.Osver != nil {

		// form param osver
		var frOsver string
		if o.Osver != nil {
			frOsver = *o.Osver
		}
		fOsver := frOsver
		if fOsver != "" {
			if err := r.SetFormParam("osver", fOsver); err != nil {
				return err
			}
		}

	}

	if o.Osverno != nil {

		// form param osverno
		var frOsverno int64
		if o.Osverno != nil {
			frOsverno = *o.Osverno
		}
		fOsverno := swag.FormatInt64(frOsverno)
		if fOsverno != "" {
			if err := r.SetFormParam("osverno", fOsverno); err != nil {
				return err
			}
		}

	}

	if o.SerialNo != nil {

		// form param serial_no
		var frSerialNo string
		if o.SerialNo != nil {
			frSerialNo = *o.SerialNo
		}
		fSerialNo := frSerialNo
		if fSerialNo != "" {
			if err := r.SetFormParam("serial_no", fSerialNo); err != nil {
				return err
			}
		}

	}

	if o.ServiceLevel != nil {

		// form param service_level
		var frServiceLevel string
		if o.ServiceLevel != nil {
			frServiceLevel = *o.ServiceLevel
		}
		fServiceLevel := frServiceLevel
		if fServiceLevel != "" {
			if err := r.SetFormParam("service_level", fServiceLevel); err != nil {
				return err
			}
		}

	}

	if o.SlotNo != nil {

		// form param slot_no
		var frSlotNo int64
		if o.SlotNo != nil {
			frSlotNo = *o.SlotNo
		}
		fSlotNo := swag.FormatInt64(frSlotNo)
		if fSlotNo != "" {
			if err := r.SetFormParam("slot_no", fSlotNo); err != nil {
				return err
			}
		}

	}

	if o.StorageRoom != nil {

		// form param storage_room
		var frStorageRoom string
		if o.StorageRoom != nil {
			frStorageRoom = *o.StorageRoom
		}
		fStorageRoom := frStorageRoom
		if fStorageRoom != "" {
			if err := r.SetFormParam("storage_room", fStorageRoom); err != nil {
				return err
			}
		}

	}

	if o.StorageRoomID != nil {

		// form param storage_room_id
		var frStorageRoomID int64
		if o.StorageRoomID != nil {
			frStorageRoomID = *o.StorageRoomID
		}
		fStorageRoomID := swag.FormatInt64(frStorageRoomID)
		if fStorageRoomID != "" {
			if err := r.SetFormParam("storage_room_id", fStorageRoomID); err != nil {
				return err
			}
		}

	}

	if o.Subtype != nil {

		// form param subtype
		var frSubtype string
		if o.Subtype != nil {
			frSubtype = *o.Subtype
		}
		fSubtype := frSubtype
		if fSubtype != "" {
			if err := r.SetFormParam("subtype", fSubtype); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// form param tags
		var frTags string
		if o.Tags != nil {
			frTags = *o.Tags
		}
		fTags := frTags
		if fTags != "" {
			if err := r.SetFormParam("tags", fTags); err != nil {
				return err
			}
		}

	}

	if o.TagsRemove != nil {

		// form param tags_remove
		var frTagsRemove string
		if o.TagsRemove != nil {
			frTagsRemove = *o.TagsRemove
		}
		fTagsRemove := frTagsRemove
		if fTagsRemove != "" {
			if err := r.SetFormParam("tags_remove", fTagsRemove); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// form param type
		var frType string
		if o.Type != nil {
			frType = *o.Type
		}
		fType := frType
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}

	}

	if o.UUID != nil {

		// form param uuid
		var frUUID string
		if o.UUID != nil {
			frUUID = *o.UUID
		}
		fUUID := frUUID
		if fUUID != "" {
			if err := r.SetFormParam("uuid", fUUID); err != nil {
				return err
			}
		}

	}

	if o.VirtualHost != nil {

		// form param virtual_host
		var frVirtualHost string
		if o.VirtualHost != nil {
			frVirtualHost = *o.VirtualHost
		}
		fVirtualHost := frVirtualHost
		if fVirtualHost != "" {
			if err := r.SetFormParam("virtual_host", fVirtualHost); err != nil {
				return err
			}
		}

	}

	if o.VirtualHostClear != nil {

		// form param virtual_host_clear
		var frVirtualHostClear string
		if o.VirtualHostClear != nil {
			frVirtualHostClear = *o.VirtualHostClear
		}
		fVirtualHostClear := frVirtualHostClear
		if fVirtualHostClear != "" {
			if err := r.SetFormParam("virtual_host_clear", fVirtualHostClear); err != nil {
				return err
			}
		}

	}

	if o.VirtualSubtype != nil {

		// form param virtual_subtype
		var frVirtualSubtype string
		if o.VirtualSubtype != nil {
			frVirtualSubtype = *o.VirtualSubtype
		}
		fVirtualSubtype := frVirtualSubtype
		if fVirtualSubtype != "" {
			if err := r.SetFormParam("virtual_subtype", fVirtualSubtype); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
