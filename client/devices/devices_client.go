// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new devices API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for devices API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDeviceMountpoints(params *DeleteDeviceMountpointsParams) (*DeleteDeviceMountpointsOK, error)

	DeleteDeviceRackDeviceID(params *DeleteDeviceRackDeviceIDParams) (*DeleteDeviceRackDeviceIDOK, error)

	DeleteDeviceURL(params *DeleteDeviceURLParams) (*DeleteDeviceURLOK, error)

	DeleteDevicesID(params *DeleteDevicesIDParams) (*DeleteDevicesIDOK, error)

	GetDeviceMountpoints(params *GetDeviceMountpointsParams) (*GetDeviceMountpointsOK, error)

	GetDeviceURL(params *GetDeviceURLParams) (*GetDeviceURLOK, error)

	GetDevices(params *GetDevicesParams) (*GetDevicesOK, error)

	GetDevicesAll(params *GetDevicesAllParams) (*GetDevicesAllOK, error)

	GetDevicesAsset(params *GetDevicesAssetParams) (*GetDevicesAssetOK, error)

	GetDevicesCustomerID(params *GetDevicesCustomerIDParams) (*GetDevicesCustomerIDOK, error)

	GetDevicesID(params *GetDevicesIDParams) (*GetDevicesIDOK, error)

	GetDevicesImpactlist(params *GetDevicesImpactlistParams) (*GetDevicesImpactlistOK, error)

	GetDevicesName(params *GetDevicesNameParams) (*GetDevicesNameOK, error)

	GetDevicesSerial(params *GetDevicesSerialParams) (*GetDevicesSerialOK, error)

	PostCloudInstanceDevice(params *PostCloudInstanceDeviceParams) (*PostCloudInstanceDeviceOK, error)

	PostDevice(params *PostDeviceParams) (*PostDeviceOK, error)

	PostDeviceMountpoints(params *PostDeviceMountpointsParams) (*PostDeviceMountpointsOK, error)

	PostDeviceRack(params *PostDeviceRackParams) (*PostDeviceRackOK, error)

	PostDeviceURL(params *PostDeviceURLParams) (*PostDeviceURLOK, error)

	PostMultiNodeDevice(params *PostMultiNodeDeviceParams) (*PostMultiNodeDeviceOK, error)

	PostMultiSerialDevice(params *PostMultiSerialDeviceParams) (*PostMultiSerialDeviceOK, error)

	PutCustomField(params *PutCustomFieldParams) (*PutCustomFieldOK, error)

	PutDevice(params *PutDeviceParams) (*PutDeviceOK, error)

	PutDeviceURL(params *PutDeviceURLParams) (*PutDeviceURLOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteDeviceMountpoints deletes device mountpoints

  Delete Device Mountpoints
*/
func (a *Client) DeleteDeviceMountpoints(params *DeleteDeviceMountpointsParams) (*DeleteDeviceMountpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceMountpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceMountpoints",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/device/mountpoints/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDeviceMountpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeviceMountpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDeviceMountpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDeviceRackDeviceID removes delete a device from a rack

  This API call will remove/delete a device from a rack (Introduced in v6.3.2)
*/
func (a *Client) DeleteDeviceRackDeviceID(params *DeleteDeviceRackDeviceIDParams) (*DeleteDeviceRackDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceRackDeviceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceRackDevice_Id",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/device/rack/{device_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDeviceRackDeviceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeviceRackDeviceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDeviceRackDevice_Id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDeviceURL deletes a device url

  This API call will delete a device url (Introduced in v7.0.0)
*/
func (a *Client) DeleteDeviceURL(params *DeleteDeviceURLParams) (*DeleteDeviceURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceUrl",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/device/url/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDeviceURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeviceURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDeviceUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDevicesID deletes device

  This API is used to delete a device with the device id supplied as the required argument.
*/
func (a *Client) DeleteDevicesID(params *DeleteDevicesIDParams) (*DeleteDevicesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDevicesId",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/devices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDevicesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDevicesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDevicesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceMountpoints gets device mountpoints introduced in version 10 5 0

  Get Device Mountpoints
*/
func (a *Client) GetDeviceMountpoints(params *GetDeviceMountpointsParams) (*GetDeviceMountpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceMountpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceMountpoints",
		Method:             "GET",
		PathPattern:        "/api/1.0/device/mountpoints/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDeviceMountpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceMountpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceMountpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceURL gets device u r ls introduced in version 7 0 0

  Get Device URLs
*/
func (a *Client) GetDeviceURL(params *GetDeviceURLParams) (*GetDeviceURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceUrl",
		Method:             "GET",
		PathPattern:        "/api/1.0/device/url/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDeviceURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevices retrieves basic information about all devices

  Get All Devices With Brief Output
*/
func (a *Client) GetDevices(params *GetDevicesParams) (*GetDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevices",
		Method:             "GET",
		PathPattern:        "/api/1.0/devices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAll retrieves detailed information about all devices

  Get All Devices With Detailed Output (added in v6.3.4)
*/
func (a *Client) GetDevicesAll(params *GetDevicesAllParams) (*GetDevicesAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicesAll",
		Method:             "GET",
		PathPattern:        "/api/1.0/devices/all/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDevicesAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesAsset gets device by device asset number

  Retrieve detailed information about a specific device by device asset number.
*/
func (a *Client) GetDevicesAsset(params *GetDevicesAssetParams) (*GetDevicesAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesAssetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicesAsset",
		Method:             "GET",
		PathPattern:        "/api/1.0/devices/asset/{device-asset}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDevicesAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesCustomerID gets devices by customer Id

  Retrieve all devices associated with a specific customer.
*/
func (a *Client) GetDevicesCustomerID(params *GetDevicesCustomerIDParams) (*GetDevicesCustomerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesCustomerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicesCustomer_id",
		Method:             "GET",
		PathPattern:        "/api/1.0/devices/customer_id/{customer-id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDevicesCustomerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesCustomerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesCustomer_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesID gets device by device Id

  Retrieve detailed information about a specific device using device id.
*/
func (a *Client) GetDevicesID(params *GetDevicesIDParams) (*GetDevicesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicesId",
		Method:             "GET",
		PathPattern:        "/api/1.0/devices/id/{device-id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDevicesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesImpactlist this API endpoint retrieves the impact list of a device by ID

  Get Device Impact List
*/
func (a *Client) GetDevicesImpactlist(params *GetDevicesImpactlistParams) (*GetDevicesImpactlistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesImpactlistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicesImpactlist",
		Method:             "GET",
		PathPattern:        "/api/1.0/device/impactlist/{device-id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDevicesImpactlistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesImpactlistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesImpactlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesName gets device by device name

  Retrieve detailed information about a specific device by device name
*/
func (a *Client) GetDevicesName(params *GetDevicesNameParams) (*GetDevicesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicesName",
		Method:             "GET",
		PathPattern:        "/api/1.0/devices/name/{device-name}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDevicesNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesSerial gets device by device serial number

  Retrieve detailed information about a specific device by device serial number.
*/
func (a *Client) GetDevicesSerial(params *GetDevicesSerialParams) (*GetDevicesSerialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesSerialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicesSerial",
		Method:             "GET",
		PathPattern:        "/api/1.0/devices/serial/{device-serial}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDevicesSerialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesSerialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesSerial: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostCloudInstanceDevice creates update device cloud instance information

  Update cloud instance information for devices. Requires either device or device_id
*/
func (a *Client) PostCloudInstanceDevice(params *PostCloudInstanceDeviceParams) (*PostCloudInstanceDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudInstanceDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCloudInstanceDevice",
		Method:             "POST",
		PathPattern:        "/api/1.0/device/cloud_instance/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostCloudInstanceDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCloudInstanceDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postCloudInstanceDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDevice creates update device by name

  This API is used to create a new device with the name supplied as the required argument or update an existing device that has the name, serial # or uuid of the required argument. For information purposes, this is also the API that is used by the Device42 auto-discovery tool.
*/
func (a *Client) PostDevice(params *PostDeviceParams) (*PostDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postDevice",
		Method:             "POST",
		PathPattern:        "/api/1.0/device/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDeviceMountpoints creates update device mountpoints introduced in version 10 5 0

  Create/Update Device Mountpoints
*/
func (a *Client) PostDeviceMountpoints(params *PostDeviceMountpointsParams) (*PostDeviceMountpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDeviceMountpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postDeviceMountpoints",
		Method:             "POST",
		PathPattern:        "/api/1.0/device/mountpoints/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostDeviceMountpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDeviceMountpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDeviceMountpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDeviceRack adds update a device in a rack

  This API will add a new or existing device to a rack or will update an existing device that is already in the rack. (Introduced in v321)<br> Required parameters: <ul><li>device <b>OR</b> device_id <b>OR</b> serial_no <b>OR</b> asset_no</li> <li>rack_id <b>OR</b> rack (with building, room, or row to identify unique rack) <li>start_at</li>
*/
func (a *Client) PostDeviceRack(params *PostDeviceRackParams) (*PostDeviceRackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDeviceRackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postDeviceRack",
		Method:             "POST",
		PathPattern:        "/api/1.0/device/rack/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostDeviceRackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDeviceRackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDeviceRack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDeviceURL uses this API to associate a url e g an http https or telnet url with a device

  Add Url to Device
*/
func (a *Client) PostDeviceURL(params *PostDeviceURLParams) (*PostDeviceURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDeviceURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postDeviceUrl",
		Method:             "POST",
		PathPattern:        "/api/1.0/device/url/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostDeviceURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDeviceURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDeviceUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostMultiNodeDevice creates update multi node device by name

  This API is used to create a new device with the name supplied as the required argument or update an existing device that with that name. This is similar to /api/api/1.0/devices/ POST call - but you can add duplicate serial #s and UUID for high density servers that share the same serial # and/or UUID.
*/
func (a *Client) PostMultiNodeDevice(params *PostMultiNodeDeviceParams) (*PostMultiNodeDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMultiNodeDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postMultiNodeDevice",
		Method:             "POST",
		PathPattern:        "/api/1.0/multinode_device/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostMultiNodeDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostMultiNodeDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postMultiNodeDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostMultiSerialDevice creates update multi serial device by name

  This API is used to create a new device with the name supplied as the required argument or update an existing device that with that name. This is similar to /api/api/1.0/devices/ POST call - but you can add duplicate serial numberss and UUID for high density servers that share the same serial # and/or UUID.
*/
func (a *Client) PostMultiSerialDevice(params *PostMultiSerialDeviceParams) (*PostMultiSerialDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMultiSerialDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postMultiSerialDevice",
		Method:             "POST",
		PathPattern:        "/api/1.0/multiserial_device/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostMultiSerialDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostMultiSerialDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postMultiSerialDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutCustomField creates update custom fields for a device

  One of the following parameters is required: name, id, asset, or serial
*/
func (a *Client) PutCustomField(params *PutCustomFieldParams) (*PutCustomFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCustom_Field",
		Method:             "PUT",
		PathPattern:        "/api/1.0/device/custom_field/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCustomFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCustomFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putCustom_Field: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDevice updates an existing device by name serial ID or asset number

  Update Device by Name, ID, Serial or Asset. Requires one of the following parameters: name, serial, asset, device_id
*/
func (a *Client) PutDevice(params *PutDeviceParams) (*PutDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putDevice",
		Method:             "PUT",
		PathPattern:        "/api/1.0/device/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDeviceURL updates device URL

  Use this API to update and existing url (e.g. an http, https, or telnet url) with a device. Type and device are required if no ID is provided.
*/
func (a *Client) PutDeviceURL(params *PutDeviceURLParams) (*PutDeviceURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDeviceURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putDeviceUrl",
		Method:             "PUT",
		PathPattern:        "/api/1.0/device/url/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutDeviceURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDeviceURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putDeviceUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
