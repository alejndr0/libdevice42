// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutDeviceURLReader is a Reader for the PutDeviceURL structure.
type PutDeviceURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutDeviceURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutDeviceURLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutDeviceURLBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutDeviceURLUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutDeviceURLForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutDeviceURLNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPutDeviceURLMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewPutDeviceURLGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutDeviceURLInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutDeviceURLServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutDeviceURLOK creates a PutDeviceURLOK with default headers values
func NewPutDeviceURLOK() *PutDeviceURLOK {
	return &PutDeviceURLOK{}
}

/*PutDeviceURLOK handles this case with default header values.

The above command returns results like this:
*/
type PutDeviceURLOK struct {
	Payload *PutDeviceURLOKBody
}

func (o *PutDeviceURLOK) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/device/url/][%d] putDeviceUrlOK  %+v", 200, o.Payload)
}

func (o *PutDeviceURLOK) GetPayload() *PutDeviceURLOKBody {
	return o.Payload
}

func (o *PutDeviceURLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutDeviceURLOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutDeviceURLBadRequest creates a PutDeviceURLBadRequest with default headers values
func NewPutDeviceURLBadRequest() *PutDeviceURLBadRequest {
	return &PutDeviceURLBadRequest{}
}

/*PutDeviceURLBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type PutDeviceURLBadRequest struct {
}

func (o *PutDeviceURLBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/device/url/][%d] putDeviceUrlBadRequest ", 400)
}

func (o *PutDeviceURLBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDeviceURLUnauthorized creates a PutDeviceURLUnauthorized with default headers values
func NewPutDeviceURLUnauthorized() *PutDeviceURLUnauthorized {
	return &PutDeviceURLUnauthorized{}
}

/*PutDeviceURLUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type PutDeviceURLUnauthorized struct {
}

func (o *PutDeviceURLUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/device/url/][%d] putDeviceUrlUnauthorized ", 401)
}

func (o *PutDeviceURLUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDeviceURLForbidden creates a PutDeviceURLForbidden with default headers values
func NewPutDeviceURLForbidden() *PutDeviceURLForbidden {
	return &PutDeviceURLForbidden{}
}

/*PutDeviceURLForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type PutDeviceURLForbidden struct {
}

func (o *PutDeviceURLForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/device/url/][%d] putDeviceUrlForbidden ", 403)
}

func (o *PutDeviceURLForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDeviceURLNotFound creates a PutDeviceURLNotFound with default headers values
func NewPutDeviceURLNotFound() *PutDeviceURLNotFound {
	return &PutDeviceURLNotFound{}
}

/*PutDeviceURLNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type PutDeviceURLNotFound struct {
}

func (o *PutDeviceURLNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/device/url/][%d] putDeviceUrlNotFound ", 404)
}

func (o *PutDeviceURLNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDeviceURLMethodNotAllowed creates a PutDeviceURLMethodNotAllowed with default headers values
func NewPutDeviceURLMethodNotAllowed() *PutDeviceURLMethodNotAllowed {
	return &PutDeviceURLMethodNotAllowed{}
}

/*PutDeviceURLMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type PutDeviceURLMethodNotAllowed struct {
}

func (o *PutDeviceURLMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/device/url/][%d] putDeviceUrlMethodNotAllowed ", 405)
}

func (o *PutDeviceURLMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDeviceURLGone creates a PutDeviceURLGone with default headers values
func NewPutDeviceURLGone() *PutDeviceURLGone {
	return &PutDeviceURLGone{}
}

/*PutDeviceURLGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type PutDeviceURLGone struct {
}

func (o *PutDeviceURLGone) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/device/url/][%d] putDeviceUrlGone ", 410)
}

func (o *PutDeviceURLGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDeviceURLInternalServerError creates a PutDeviceURLInternalServerError with default headers values
func NewPutDeviceURLInternalServerError() *PutDeviceURLInternalServerError {
	return &PutDeviceURLInternalServerError{}
}

/*PutDeviceURLInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type PutDeviceURLInternalServerError struct {
}

func (o *PutDeviceURLInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/device/url/][%d] putDeviceUrlInternalServerError ", 500)
}

func (o *PutDeviceURLInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutDeviceURLServiceUnavailable creates a PutDeviceURLServiceUnavailable with default headers values
func NewPutDeviceURLServiceUnavailable() *PutDeviceURLServiceUnavailable {
	return &PutDeviceURLServiceUnavailable{}
}

/*PutDeviceURLServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type PutDeviceURLServiceUnavailable struct {
}

func (o *PutDeviceURLServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /api/1.0/device/url/][%d] putDeviceUrlServiceUnavailable ", 503)
}

func (o *PutDeviceURLServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PutDeviceURLOKBody put device URL o k body
swagger:model PutDeviceURLOKBody
*/
type PutDeviceURLOKBody struct {

	// code
	Code interface{} `json:"code,omitempty"`

	// msg
	Msg interface{} `json:"msg,omitempty"`
}

// Validate validates this put device URL o k body
func (o *PutDeviceURLOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutDeviceURLOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDeviceURLOKBody) UnmarshalBinary(b []byte) error {
	var res PutDeviceURLOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
