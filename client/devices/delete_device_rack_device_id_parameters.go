// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteDeviceRackDeviceIDParams creates a new DeleteDeviceRackDeviceIDParams object
// with the default values initialized.
func NewDeleteDeviceRackDeviceIDParams() *DeleteDeviceRackDeviceIDParams {
	var ()
	return &DeleteDeviceRackDeviceIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteDeviceRackDeviceIDParamsWithTimeout creates a new DeleteDeviceRackDeviceIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteDeviceRackDeviceIDParamsWithTimeout(timeout time.Duration) *DeleteDeviceRackDeviceIDParams {
	var ()
	return &DeleteDeviceRackDeviceIDParams{

		timeout: timeout,
	}
}

// NewDeleteDeviceRackDeviceIDParamsWithContext creates a new DeleteDeviceRackDeviceIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteDeviceRackDeviceIDParamsWithContext(ctx context.Context) *DeleteDeviceRackDeviceIDParams {
	var ()
	return &DeleteDeviceRackDeviceIDParams{

		Context: ctx,
	}
}

// NewDeleteDeviceRackDeviceIDParamsWithHTTPClient creates a new DeleteDeviceRackDeviceIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteDeviceRackDeviceIDParamsWithHTTPClient(client *http.Client) *DeleteDeviceRackDeviceIDParams {
	var ()
	return &DeleteDeviceRackDeviceIDParams{
		HTTPClient: client,
	}
}

/*DeleteDeviceRackDeviceIDParams contains all the parameters to send to the API endpoint
for the delete device rack device Id operation typically these are written to a http.Request
*/
type DeleteDeviceRackDeviceIDParams struct {

	/*DeviceID
	  ID of the device to be removed from the rack

	*/
	DeviceID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete device rack device Id params
func (o *DeleteDeviceRackDeviceIDParams) WithTimeout(timeout time.Duration) *DeleteDeviceRackDeviceIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete device rack device Id params
func (o *DeleteDeviceRackDeviceIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete device rack device Id params
func (o *DeleteDeviceRackDeviceIDParams) WithContext(ctx context.Context) *DeleteDeviceRackDeviceIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete device rack device Id params
func (o *DeleteDeviceRackDeviceIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete device rack device Id params
func (o *DeleteDeviceRackDeviceIDParams) WithHTTPClient(client *http.Client) *DeleteDeviceRackDeviceIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete device rack device Id params
func (o *DeleteDeviceRackDeviceIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceID adds the deviceID to the delete device rack device Id params
func (o *DeleteDeviceRackDeviceIDParams) WithDeviceID(deviceID int64) *DeleteDeviceRackDeviceIDParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the delete device rack device Id params
func (o *DeleteDeviceRackDeviceIDParams) SetDeviceID(deviceID int64) {
	o.DeviceID = deviceID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteDeviceRackDeviceIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param device_id
	if err := r.SetPathParam("device_id", swag.FormatInt64(o.DeviceID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
