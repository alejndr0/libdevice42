// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostDeviceMountpointsParams creates a new PostDeviceMountpointsParams object
// with the default values initialized.
func NewPostDeviceMountpointsParams() *PostDeviceMountpointsParams {
	var ()
	return &PostDeviceMountpointsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostDeviceMountpointsParamsWithTimeout creates a new PostDeviceMountpointsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostDeviceMountpointsParamsWithTimeout(timeout time.Duration) *PostDeviceMountpointsParams {
	var ()
	return &PostDeviceMountpointsParams{

		timeout: timeout,
	}
}

// NewPostDeviceMountpointsParamsWithContext creates a new PostDeviceMountpointsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostDeviceMountpointsParamsWithContext(ctx context.Context) *PostDeviceMountpointsParams {
	var ()
	return &PostDeviceMountpointsParams{

		Context: ctx,
	}
}

// NewPostDeviceMountpointsParamsWithHTTPClient creates a new PostDeviceMountpointsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostDeviceMountpointsParamsWithHTTPClient(client *http.Client) *PostDeviceMountpointsParams {
	var ()
	return &PostDeviceMountpointsParams{
		HTTPClient: client,
	}
}

/*PostDeviceMountpointsParams contains all the parameters to send to the API endpoint
for the post device mountpoints operation typically these are written to a http.Request
*/
type PostDeviceMountpointsParams struct {

	/*Capacity
	  capacity of mountpoint in MB

	*/
	Capacity *string
	/*Device
	  device mountpoint is assigned to

	*/
	Device string
	/*Filesytem
	  mountpoint filesystem

	*/
	Filesytem *string
	/*FreeCapacity
	  free capacity of mountpoint in MB

	*/
	FreeCapacity *string
	/*Fstype
	  mountpoint filesystem type

	*/
	Fstype *string
	/*Label*/
	Label *string
	/*Mountpoint
	  path of the mountpoint

	*/
	Mountpoint string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post device mountpoints params
func (o *PostDeviceMountpointsParams) WithTimeout(timeout time.Duration) *PostDeviceMountpointsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post device mountpoints params
func (o *PostDeviceMountpointsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post device mountpoints params
func (o *PostDeviceMountpointsParams) WithContext(ctx context.Context) *PostDeviceMountpointsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post device mountpoints params
func (o *PostDeviceMountpointsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post device mountpoints params
func (o *PostDeviceMountpointsParams) WithHTTPClient(client *http.Client) *PostDeviceMountpointsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post device mountpoints params
func (o *PostDeviceMountpointsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCapacity adds the capacity to the post device mountpoints params
func (o *PostDeviceMountpointsParams) WithCapacity(capacity *string) *PostDeviceMountpointsParams {
	o.SetCapacity(capacity)
	return o
}

// SetCapacity adds the capacity to the post device mountpoints params
func (o *PostDeviceMountpointsParams) SetCapacity(capacity *string) {
	o.Capacity = capacity
}

// WithDevice adds the device to the post device mountpoints params
func (o *PostDeviceMountpointsParams) WithDevice(device string) *PostDeviceMountpointsParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the post device mountpoints params
func (o *PostDeviceMountpointsParams) SetDevice(device string) {
	o.Device = device
}

// WithFilesytem adds the filesytem to the post device mountpoints params
func (o *PostDeviceMountpointsParams) WithFilesytem(filesytem *string) *PostDeviceMountpointsParams {
	o.SetFilesytem(filesytem)
	return o
}

// SetFilesytem adds the filesytem to the post device mountpoints params
func (o *PostDeviceMountpointsParams) SetFilesytem(filesytem *string) {
	o.Filesytem = filesytem
}

// WithFreeCapacity adds the freeCapacity to the post device mountpoints params
func (o *PostDeviceMountpointsParams) WithFreeCapacity(freeCapacity *string) *PostDeviceMountpointsParams {
	o.SetFreeCapacity(freeCapacity)
	return o
}

// SetFreeCapacity adds the freeCapacity to the post device mountpoints params
func (o *PostDeviceMountpointsParams) SetFreeCapacity(freeCapacity *string) {
	o.FreeCapacity = freeCapacity
}

// WithFstype adds the fstype to the post device mountpoints params
func (o *PostDeviceMountpointsParams) WithFstype(fstype *string) *PostDeviceMountpointsParams {
	o.SetFstype(fstype)
	return o
}

// SetFstype adds the fstype to the post device mountpoints params
func (o *PostDeviceMountpointsParams) SetFstype(fstype *string) {
	o.Fstype = fstype
}

// WithLabel adds the label to the post device mountpoints params
func (o *PostDeviceMountpointsParams) WithLabel(label *string) *PostDeviceMountpointsParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the post device mountpoints params
func (o *PostDeviceMountpointsParams) SetLabel(label *string) {
	o.Label = label
}

// WithMountpoint adds the mountpoint to the post device mountpoints params
func (o *PostDeviceMountpointsParams) WithMountpoint(mountpoint string) *PostDeviceMountpointsParams {
	o.SetMountpoint(mountpoint)
	return o
}

// SetMountpoint adds the mountpoint to the post device mountpoints params
func (o *PostDeviceMountpointsParams) SetMountpoint(mountpoint string) {
	o.Mountpoint = mountpoint
}

// WriteToRequest writes these params to a swagger request
func (o *PostDeviceMountpointsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Capacity != nil {

		// form param capacity
		var frCapacity string
		if o.Capacity != nil {
			frCapacity = *o.Capacity
		}
		fCapacity := frCapacity
		if fCapacity != "" {
			if err := r.SetFormParam("capacity", fCapacity); err != nil {
				return err
			}
		}

	}

	// form param device
	frDevice := o.Device
	fDevice := frDevice
	if fDevice != "" {
		if err := r.SetFormParam("device", fDevice); err != nil {
			return err
		}
	}

	if o.Filesytem != nil {

		// form param filesytem
		var frFilesytem string
		if o.Filesytem != nil {
			frFilesytem = *o.Filesytem
		}
		fFilesytem := frFilesytem
		if fFilesytem != "" {
			if err := r.SetFormParam("filesytem", fFilesytem); err != nil {
				return err
			}
		}

	}

	if o.FreeCapacity != nil {

		// form param free_capacity
		var frFreeCapacity string
		if o.FreeCapacity != nil {
			frFreeCapacity = *o.FreeCapacity
		}
		fFreeCapacity := frFreeCapacity
		if fFreeCapacity != "" {
			if err := r.SetFormParam("free_capacity", fFreeCapacity); err != nil {
				return err
			}
		}

	}

	if o.Fstype != nil {

		// form param fstype
		var frFstype string
		if o.Fstype != nil {
			frFstype = *o.Fstype
		}
		fFstype := frFstype
		if fFstype != "" {
			if err := r.SetFormParam("fstype", fFstype); err != nil {
				return err
			}
		}

	}

	if o.Label != nil {

		// form param label
		var frLabel string
		if o.Label != nil {
			frLabel = *o.Label
		}
		fLabel := frLabel
		if fLabel != "" {
			if err := r.SetFormParam("label", fLabel); err != nil {
				return err
			}
		}

	}

	// form param mountpoint
	frMountpoint := o.Mountpoint
	fMountpoint := frMountpoint
	if fMountpoint != "" {
		if err := r.SetFormParam("mountpoint", fMountpoint); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
