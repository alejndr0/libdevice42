// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDevicesIDParams creates a new GetDevicesIDParams object
// with the default values initialized.
func NewGetDevicesIDParams() *GetDevicesIDParams {
	var ()
	return &GetDevicesIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDevicesIDParamsWithTimeout creates a new GetDevicesIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDevicesIDParamsWithTimeout(timeout time.Duration) *GetDevicesIDParams {
	var ()
	return &GetDevicesIDParams{

		timeout: timeout,
	}
}

// NewGetDevicesIDParamsWithContext creates a new GetDevicesIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDevicesIDParamsWithContext(ctx context.Context) *GetDevicesIDParams {
	var ()
	return &GetDevicesIDParams{

		Context: ctx,
	}
}

// NewGetDevicesIDParamsWithHTTPClient creates a new GetDevicesIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDevicesIDParamsWithHTTPClient(client *http.Client) *GetDevicesIDParams {
	var ()
	return &GetDevicesIDParams{
		HTTPClient: client,
	}
}

/*GetDevicesIDParams contains all the parameters to send to the API endpoint
for the get devices Id operation typically these are written to a http.Request
*/
type GetDevicesIDParams struct {

	/*DeviceID*/
	DeviceID int64
	/*Follow
	  use yes if you want to see virtuals in a virtual host, modules in a blade chassis and devices in a clustered device (Added in v5.7.4)

	*/
	Follow *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get devices Id params
func (o *GetDevicesIDParams) WithTimeout(timeout time.Duration) *GetDevicesIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get devices Id params
func (o *GetDevicesIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get devices Id params
func (o *GetDevicesIDParams) WithContext(ctx context.Context) *GetDevicesIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get devices Id params
func (o *GetDevicesIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get devices Id params
func (o *GetDevicesIDParams) WithHTTPClient(client *http.Client) *GetDevicesIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get devices Id params
func (o *GetDevicesIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceID adds the deviceID to the get devices Id params
func (o *GetDevicesIDParams) WithDeviceID(deviceID int64) *GetDevicesIDParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get devices Id params
func (o *GetDevicesIDParams) SetDeviceID(deviceID int64) {
	o.DeviceID = deviceID
}

// WithFollow adds the follow to the get devices Id params
func (o *GetDevicesIDParams) WithFollow(follow *string) *GetDevicesIDParams {
	o.SetFollow(follow)
	return o
}

// SetFollow adds the follow to the get devices Id params
func (o *GetDevicesIDParams) SetFollow(follow *string) {
	o.Follow = follow
}

// WriteToRequest writes these params to a swagger request
func (o *GetDevicesIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param device-id
	if err := r.SetPathParam("device-id", swag.FormatInt64(o.DeviceID)); err != nil {
		return err
	}

	if o.Follow != nil {

		// query param follow
		var qrFollow string
		if o.Follow != nil {
			qrFollow = *o.Follow
		}
		qFollow := qrFollow
		if qFollow != "" {
			if err := r.SetQueryParam("follow", qFollow); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
