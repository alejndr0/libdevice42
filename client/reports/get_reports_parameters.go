// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetReportsParams creates a new GetReportsParams object
// with the default values initialized.
func NewGetReportsParams() *GetReportsParams {
	var ()
	return &GetReportsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetReportsParamsWithTimeout creates a new GetReportsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetReportsParamsWithTimeout(timeout time.Duration) *GetReportsParams {
	var ()
	return &GetReportsParams{

		timeout: timeout,
	}
}

// NewGetReportsParamsWithContext creates a new GetReportsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetReportsParamsWithContext(ctx context.Context) *GetReportsParams {
	var ()
	return &GetReportsParams{

		Context: ctx,
	}
}

// NewGetReportsParamsWithHTTPClient creates a new GetReportsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetReportsParamsWithHTTPClient(client *http.Client) *GetReportsParams {
	var ()
	return &GetReportsParams{
		HTTPClient: client,
	}
}

/*GetReportsParams contains all the parameters to send to the API endpoint
for the get reports operation typically these are written to a http.Request
*/
type GetReportsParams struct {

	/*CsvFormat
	  If this parameter is ‘xls’ or is not present, an Excel file(.xlsx) will be produced. If this parameter is ‘tab’, a tab-delimited file(.txt) will be created.

	*/
	CsvFormat *string
	/*ID*/
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get reports params
func (o *GetReportsParams) WithTimeout(timeout time.Duration) *GetReportsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get reports params
func (o *GetReportsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get reports params
func (o *GetReportsParams) WithContext(ctx context.Context) *GetReportsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get reports params
func (o *GetReportsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get reports params
func (o *GetReportsParams) WithHTTPClient(client *http.Client) *GetReportsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get reports params
func (o *GetReportsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCsvFormat adds the csvFormat to the get reports params
func (o *GetReportsParams) WithCsvFormat(csvFormat *string) *GetReportsParams {
	o.SetCsvFormat(csvFormat)
	return o
}

// SetCsvFormat adds the csvFormat to the get reports params
func (o *GetReportsParams) SetCsvFormat(csvFormat *string) {
	o.CsvFormat = csvFormat
}

// WithID adds the id to the get reports params
func (o *GetReportsParams) WithID(id int64) *GetReportsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get reports params
func (o *GetReportsParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *GetReportsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CsvFormat != nil {

		// query param csv_format
		var qrCsvFormat string
		if o.CsvFormat != nil {
			qrCsvFormat = *o.CsvFormat
		}
		qCsvFormat := qrCsvFormat
		if qCsvFormat != "" {
			if err := r.SetQueryParam("csv_format", qCsvFormat); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
