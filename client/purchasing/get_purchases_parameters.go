// Code generated by go-swagger; DO NOT EDIT.

package purchasing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPurchasesParams creates a new GetPurchasesParams object
// with the default values initialized.
func NewGetPurchasesParams() *GetPurchasesParams {
	var ()
	return &GetPurchasesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPurchasesParamsWithTimeout creates a new GetPurchasesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPurchasesParamsWithTimeout(timeout time.Duration) *GetPurchasesParams {
	var ()
	return &GetPurchasesParams{

		timeout: timeout,
	}
}

// NewGetPurchasesParamsWithContext creates a new GetPurchasesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPurchasesParamsWithContext(ctx context.Context) *GetPurchasesParams {
	var ()
	return &GetPurchasesParams{

		Context: ctx,
	}
}

// NewGetPurchasesParamsWithHTTPClient creates a new GetPurchasesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPurchasesParamsWithHTTPClient(client *http.Client) *GetPurchasesParams {
	var ()
	return &GetPurchasesParams{
		HTTPClient: client,
	}
}

/*GetPurchasesParams contains all the parameters to send to the API endpoint
for the get purchases operation typically these are written to a http.Request
*/
type GetPurchasesParams struct {

	/*Building
	  Associated building

	*/
	Building *string
	/*Completed
	  Line Item is completed

	*/
	Completed *string
	/*CostCenter
	  Cost Center

	*/
	CostCenter *string
	/*OrderNo
	  Order number

	*/
	OrderNo *string
	/*PurchaseID
	  Device42 Purchase ID

	*/
	PurchaseID *string
	/*Vendor
	  Vendor name

	*/
	Vendor *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get purchases params
func (o *GetPurchasesParams) WithTimeout(timeout time.Duration) *GetPurchasesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get purchases params
func (o *GetPurchasesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get purchases params
func (o *GetPurchasesParams) WithContext(ctx context.Context) *GetPurchasesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get purchases params
func (o *GetPurchasesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get purchases params
func (o *GetPurchasesParams) WithHTTPClient(client *http.Client) *GetPurchasesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get purchases params
func (o *GetPurchasesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBuilding adds the building to the get purchases params
func (o *GetPurchasesParams) WithBuilding(building *string) *GetPurchasesParams {
	o.SetBuilding(building)
	return o
}

// SetBuilding adds the building to the get purchases params
func (o *GetPurchasesParams) SetBuilding(building *string) {
	o.Building = building
}

// WithCompleted adds the completed to the get purchases params
func (o *GetPurchasesParams) WithCompleted(completed *string) *GetPurchasesParams {
	o.SetCompleted(completed)
	return o
}

// SetCompleted adds the completed to the get purchases params
func (o *GetPurchasesParams) SetCompleted(completed *string) {
	o.Completed = completed
}

// WithCostCenter adds the costCenter to the get purchases params
func (o *GetPurchasesParams) WithCostCenter(costCenter *string) *GetPurchasesParams {
	o.SetCostCenter(costCenter)
	return o
}

// SetCostCenter adds the costCenter to the get purchases params
func (o *GetPurchasesParams) SetCostCenter(costCenter *string) {
	o.CostCenter = costCenter
}

// WithOrderNo adds the orderNo to the get purchases params
func (o *GetPurchasesParams) WithOrderNo(orderNo *string) *GetPurchasesParams {
	o.SetOrderNo(orderNo)
	return o
}

// SetOrderNo adds the orderNo to the get purchases params
func (o *GetPurchasesParams) SetOrderNo(orderNo *string) {
	o.OrderNo = orderNo
}

// WithPurchaseID adds the purchaseID to the get purchases params
func (o *GetPurchasesParams) WithPurchaseID(purchaseID *string) *GetPurchasesParams {
	o.SetPurchaseID(purchaseID)
	return o
}

// SetPurchaseID adds the purchaseId to the get purchases params
func (o *GetPurchasesParams) SetPurchaseID(purchaseID *string) {
	o.PurchaseID = purchaseID
}

// WithVendor adds the vendor to the get purchases params
func (o *GetPurchasesParams) WithVendor(vendor *string) *GetPurchasesParams {
	o.SetVendor(vendor)
	return o
}

// SetVendor adds the vendor to the get purchases params
func (o *GetPurchasesParams) SetVendor(vendor *string) {
	o.Vendor = vendor
}

// WriteToRequest writes these params to a swagger request
func (o *GetPurchasesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Building != nil {

		// query param building
		var qrBuilding string
		if o.Building != nil {
			qrBuilding = *o.Building
		}
		qBuilding := qrBuilding
		if qBuilding != "" {
			if err := r.SetQueryParam("building", qBuilding); err != nil {
				return err
			}
		}

	}

	if o.Completed != nil {

		// query param completed
		var qrCompleted string
		if o.Completed != nil {
			qrCompleted = *o.Completed
		}
		qCompleted := qrCompleted
		if qCompleted != "" {
			if err := r.SetQueryParam("completed", qCompleted); err != nil {
				return err
			}
		}

	}

	if o.CostCenter != nil {

		// query param cost_center
		var qrCostCenter string
		if o.CostCenter != nil {
			qrCostCenter = *o.CostCenter
		}
		qCostCenter := qrCostCenter
		if qCostCenter != "" {
			if err := r.SetQueryParam("cost_center", qCostCenter); err != nil {
				return err
			}
		}

	}

	if o.OrderNo != nil {

		// query param order_no
		var qrOrderNo string
		if o.OrderNo != nil {
			qrOrderNo = *o.OrderNo
		}
		qOrderNo := qrOrderNo
		if qOrderNo != "" {
			if err := r.SetQueryParam("order_no", qOrderNo); err != nil {
				return err
			}
		}

	}

	if o.PurchaseID != nil {

		// query param purchase_id
		var qrPurchaseID string
		if o.PurchaseID != nil {
			qrPurchaseID = *o.PurchaseID
		}
		qPurchaseID := qrPurchaseID
		if qPurchaseID != "" {
			if err := r.SetQueryParam("purchase_id", qPurchaseID); err != nil {
				return err
			}
		}

	}

	if o.Vendor != nil {

		// query param vendor
		var qrVendor string
		if o.Vendor != nil {
			qrVendor = *o.Vendor
		}
		qVendor := qrVendor
		if qVendor != "" {
			if err := r.SetQueryParam("vendor", qVendor); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
