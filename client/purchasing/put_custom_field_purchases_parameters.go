// Code generated by go-swagger; DO NOT EDIT.

package purchasing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutCustomFieldPurchasesParams creates a new PutCustomFieldPurchasesParams object
// with the default values initialized.
func NewPutCustomFieldPurchasesParams() *PutCustomFieldPurchasesParams {
	var ()
	return &PutCustomFieldPurchasesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutCustomFieldPurchasesParamsWithTimeout creates a new PutCustomFieldPurchasesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutCustomFieldPurchasesParamsWithTimeout(timeout time.Duration) *PutCustomFieldPurchasesParams {
	var ()
	return &PutCustomFieldPurchasesParams{

		timeout: timeout,
	}
}

// NewPutCustomFieldPurchasesParamsWithContext creates a new PutCustomFieldPurchasesParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutCustomFieldPurchasesParamsWithContext(ctx context.Context) *PutCustomFieldPurchasesParams {
	var ()
	return &PutCustomFieldPurchasesParams{

		Context: ctx,
	}
}

// NewPutCustomFieldPurchasesParamsWithHTTPClient creates a new PutCustomFieldPurchasesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutCustomFieldPurchasesParamsWithHTTPClient(client *http.Client) *PutCustomFieldPurchasesParams {
	var ()
	return &PutCustomFieldPurchasesParams{
		HTTPClient: client,
	}
}

/*PutCustomFieldPurchasesParams contains all the parameters to send to the API endpoint
for the put custom field purchases operation typically these are written to a http.Request
*/
type PutCustomFieldPurchasesParams struct {

	/*AddToPicklist
	  Comma separated values to add to picklist. If type is picklist and custom field is new, this is a required field. Duplicates will be ignored.

	*/
	AddToPicklist *string
	/*BulkFields
	  comma separated key value pairs, with key and value separated by colon. e.g.key1:value1, key2:value2

	*/
	BulkFields *string
	/*ClearValue
	  yes to clear existing value for that field

	*/
	ClearValue *string
	/*Key
	  Can be new or existing. This is the custom field name.

	*/
	Key string
	/*Notes
	  Any additional notes

	*/
	Notes *string
	/*OrderNo
	  order number / name for the purchase. Can be new or existing.

	*/
	OrderNo string
	/*RelatedFieldName
	  Required if type = related field.

	*/
	RelatedFieldName *string
	/*Type
	  this is the custom field type. If left blank, default is text. Date should be formatted as YYYY-MM-DD

	*/
	Type *string
	/*Value
	  This will set the value of the custom field for the specific object.

	*/
	Value *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) WithTimeout(timeout time.Duration) *PutCustomFieldPurchasesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) WithContext(ctx context.Context) *PutCustomFieldPurchasesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) WithHTTPClient(client *http.Client) *PutCustomFieldPurchasesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddToPicklist adds the addToPicklist to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) WithAddToPicklist(addToPicklist *string) *PutCustomFieldPurchasesParams {
	o.SetAddToPicklist(addToPicklist)
	return o
}

// SetAddToPicklist adds the addToPicklist to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) SetAddToPicklist(addToPicklist *string) {
	o.AddToPicklist = addToPicklist
}

// WithBulkFields adds the bulkFields to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) WithBulkFields(bulkFields *string) *PutCustomFieldPurchasesParams {
	o.SetBulkFields(bulkFields)
	return o
}

// SetBulkFields adds the bulkFields to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) SetBulkFields(bulkFields *string) {
	o.BulkFields = bulkFields
}

// WithClearValue adds the clearValue to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) WithClearValue(clearValue *string) *PutCustomFieldPurchasesParams {
	o.SetClearValue(clearValue)
	return o
}

// SetClearValue adds the clearValue to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) SetClearValue(clearValue *string) {
	o.ClearValue = clearValue
}

// WithKey adds the key to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) WithKey(key string) *PutCustomFieldPurchasesParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) SetKey(key string) {
	o.Key = key
}

// WithNotes adds the notes to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) WithNotes(notes *string) *PutCustomFieldPurchasesParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithOrderNo adds the orderNo to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) WithOrderNo(orderNo string) *PutCustomFieldPurchasesParams {
	o.SetOrderNo(orderNo)
	return o
}

// SetOrderNo adds the orderNo to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) SetOrderNo(orderNo string) {
	o.OrderNo = orderNo
}

// WithRelatedFieldName adds the relatedFieldName to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) WithRelatedFieldName(relatedFieldName *string) *PutCustomFieldPurchasesParams {
	o.SetRelatedFieldName(relatedFieldName)
	return o
}

// SetRelatedFieldName adds the relatedFieldName to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) SetRelatedFieldName(relatedFieldName *string) {
	o.RelatedFieldName = relatedFieldName
}

// WithType adds the typeVar to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) WithType(typeVar *string) *PutCustomFieldPurchasesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithValue adds the value to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) WithValue(value *string) *PutCustomFieldPurchasesParams {
	o.SetValue(value)
	return o
}

// SetValue adds the value to the put custom field purchases params
func (o *PutCustomFieldPurchasesParams) SetValue(value *string) {
	o.Value = value
}

// WriteToRequest writes these params to a swagger request
func (o *PutCustomFieldPurchasesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AddToPicklist != nil {

		// form param add_to_picklist
		var frAddToPicklist string
		if o.AddToPicklist != nil {
			frAddToPicklist = *o.AddToPicklist
		}
		fAddToPicklist := frAddToPicklist
		if fAddToPicklist != "" {
			if err := r.SetFormParam("add_to_picklist", fAddToPicklist); err != nil {
				return err
			}
		}

	}

	if o.BulkFields != nil {

		// form param bulk_fields
		var frBulkFields string
		if o.BulkFields != nil {
			frBulkFields = *o.BulkFields
		}
		fBulkFields := frBulkFields
		if fBulkFields != "" {
			if err := r.SetFormParam("bulk_fields", fBulkFields); err != nil {
				return err
			}
		}

	}

	if o.ClearValue != nil {

		// form param clear_value
		var frClearValue string
		if o.ClearValue != nil {
			frClearValue = *o.ClearValue
		}
		fClearValue := frClearValue
		if fClearValue != "" {
			if err := r.SetFormParam("clear_value", fClearValue); err != nil {
				return err
			}
		}

	}

	// form param key
	frKey := o.Key
	fKey := frKey
	if fKey != "" {
		if err := r.SetFormParam("key", fKey); err != nil {
			return err
		}
	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	// form param order_no
	frOrderNo := o.OrderNo
	fOrderNo := frOrderNo
	if fOrderNo != "" {
		if err := r.SetFormParam("order_no", fOrderNo); err != nil {
			return err
		}
	}

	if o.RelatedFieldName != nil {

		// form param related_field_name
		var frRelatedFieldName string
		if o.RelatedFieldName != nil {
			frRelatedFieldName = *o.RelatedFieldName
		}
		fRelatedFieldName := frRelatedFieldName
		if fRelatedFieldName != "" {
			if err := r.SetFormParam("related_field_name", fRelatedFieldName); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// form param type
		var frType string
		if o.Type != nil {
			frType = *o.Type
		}
		fType := frType
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}

	}

	if o.Value != nil {

		// form param value
		var frValue string
		if o.Value != nil {
			frValue = *o.Value
		}
		fValue := frValue
		if fValue != "" {
			if err := r.SetFormParam("value", fValue); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
