// Code generated by go-swagger; DO NOT EDIT.

package assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new assets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for assets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAssets(params *DeleteAssetsParams) (*DeleteAssetsOK, error)

	GetAssets(params *GetAssetsParams) (*GetAssetsOK, error)

	GetAssetsAssetID(params *GetAssetsAssetIDParams) (*GetAssetsAssetIDOK, error)

	PostAssets(params *PostAssetsParams) (*PostAssetsOK, error)

	PutAssets(params *PutAssetsParams) (*PutAssetsOK, error)

	PutCustomFieldsAsset(params *PutCustomFieldsAssetParams) (*PutCustomFieldsAssetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAssets this API is used to delete the asset with the asset id supplied as the required argument

  Delete Asset
*/
func (a *Client) DeleteAssets(params *DeleteAssetsParams) (*DeleteAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAssetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAssets",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/assets/{asset-id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAssets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAssets retrieves basic information about all assets

  Get All Assets
*/
func (a *Client) GetAssets(params *GetAssetsParams) (*GetAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssets",
		Method:             "GET",
		PathPattern:        "/api/1.0/assets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAssets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAssetsAssetID retrieves detailed information about a specific asset

  Get a Specific Asset
*/
func (a *Client) GetAssetsAssetID(params *GetAssetsAssetIDParams) (*GetAssetsAssetIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetsAssetIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssetsAsset-id",
		Method:             "GET",
		PathPattern:        "/api/1.0/assets/{asset-id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAssetsAssetIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetsAssetIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAssetsAsset-id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAssets creates assets

  Create Assets
*/
func (a *Client) PostAssets(params *PostAssetsParams) (*PostAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAssetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAssets",
		Method:             "POST",
		PathPattern:        "/api/1.0/assets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAssets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAssets modifies assets

  Modify Assets. Need either <b>Asset ID</b> or <b>Asset</b>
*/
func (a *Client) PutAssets(params *PutAssetsParams) (*PutAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAssetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAssets",
		Method:             "PUT",
		PathPattern:        "/api/1.0/assets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAssets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutCustomFieldsAsset creates update custom fields for assets

  Create or update custom fields for assets. "ID" or "name" of asset is needed even when value is not being changed
*/
func (a *Client) PutCustomFieldsAsset(params *PutCustomFieldsAssetParams) (*PutCustomFieldsAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomFieldsAssetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCustom_fieldsAsset",
		Method:             "PUT",
		PathPattern:        "/api/1.0/custom_fields/asset/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCustomFieldsAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCustomFieldsAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putCustom_fieldsAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
