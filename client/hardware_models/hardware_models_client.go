// Code generated by go-swagger; DO NOT EDIT.

package hardware_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new hardware models API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hardware models API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteHardwares(params *DeleteHardwaresParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHardwaresOK, error)

	GetHardwares(params *GetHardwaresParams, authInfo runtime.ClientAuthInfoWriter) (*GetHardwaresOK, error)

	PostHardwares(params *PostHardwaresParams, authInfo runtime.ClientAuthInfoWriter) (*PostHardwaresOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteHardwares deletes hardware model

  This API is used to delete the hardware model with the hardware model id supplied as the required argument.
*/
func (a *Client) DeleteHardwares(params *DeleteHardwaresParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHardwaresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHardwaresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHardwares",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/hardwares/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteHardwaresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHardwaresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteHardwares: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHardwares this call will get information about hardware models

  Get all hardware models
*/
func (a *Client) GetHardwares(params *GetHardwaresParams, authInfo runtime.ClientAuthInfoWriter) (*GetHardwaresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHardwaresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHardwares",
		Method:             "GET",
		PathPattern:        "/api/1.0/hardwares/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetHardwaresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHardwaresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHardwares: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostHardwares this call will create update information about hardware models

  Create/update
*/
func (a *Client) PostHardwares(params *PostHardwaresParams, authInfo runtime.ClientAuthInfoWriter) (*PostHardwaresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHardwaresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postHardwares",
		Method:             "POST",
		PathPattern:        "/api/1.0/hardwares/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostHardwaresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHardwaresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postHardwares: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
