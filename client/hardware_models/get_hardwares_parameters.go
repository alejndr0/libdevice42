// Code generated by go-swagger; DO NOT EDIT.

package hardware_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetHardwaresParams creates a new GetHardwaresParams object
// with the default values initialized.
func NewGetHardwaresParams() *GetHardwaresParams {
	var ()
	return &GetHardwaresParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetHardwaresParamsWithTimeout creates a new GetHardwaresParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetHardwaresParamsWithTimeout(timeout time.Duration) *GetHardwaresParams {
	var ()
	return &GetHardwaresParams{

		timeout: timeout,
	}
}

// NewGetHardwaresParamsWithContext creates a new GetHardwaresParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetHardwaresParamsWithContext(ctx context.Context) *GetHardwaresParams {
	var ()
	return &GetHardwaresParams{

		Context: ctx,
	}
}

// NewGetHardwaresParamsWithHTTPClient creates a new GetHardwaresParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetHardwaresParamsWithHTTPClient(client *http.Client) *GetHardwaresParams {
	var ()
	return &GetHardwaresParams{
		HTTPClient: client,
	}
}

/*GetHardwaresParams contains all the parameters to send to the API endpoint
for the get hardwares operation typically these are written to a http.Request
*/
type GetHardwaresParams struct {

	/*Depth
	  could be half or full

	*/
	Depth *string
	/*DeviceSubType
	  filter by device sub type (Added in v14.7.2)

	*/
	DeviceSubType *string
	/*Manufacturer
	  name of the hardware manufacturer.

	*/
	Manufacturer *string
	/*Name
	  filter by name (Added in v6.0.0)

	*/
	Name *string
	/*PartNo
	  filter by part #

	*/
	PartNo *string
	/*Size
	  filter by exact size

	*/
	Size *string
	/*Type
	  could be physical, blade, or other

	*/
	Type *string
	/*Watts
	  filter by exact watts

	*/
	Watts *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get hardwares params
func (o *GetHardwaresParams) WithTimeout(timeout time.Duration) *GetHardwaresParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get hardwares params
func (o *GetHardwaresParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get hardwares params
func (o *GetHardwaresParams) WithContext(ctx context.Context) *GetHardwaresParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get hardwares params
func (o *GetHardwaresParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get hardwares params
func (o *GetHardwaresParams) WithHTTPClient(client *http.Client) *GetHardwaresParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get hardwares params
func (o *GetHardwaresParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDepth adds the depth to the get hardwares params
func (o *GetHardwaresParams) WithDepth(depth *string) *GetHardwaresParams {
	o.SetDepth(depth)
	return o
}

// SetDepth adds the depth to the get hardwares params
func (o *GetHardwaresParams) SetDepth(depth *string) {
	o.Depth = depth
}

// WithDeviceSubType adds the deviceSubType to the get hardwares params
func (o *GetHardwaresParams) WithDeviceSubType(deviceSubType *string) *GetHardwaresParams {
	o.SetDeviceSubType(deviceSubType)
	return o
}

// SetDeviceSubType adds the deviceSubType to the get hardwares params
func (o *GetHardwaresParams) SetDeviceSubType(deviceSubType *string) {
	o.DeviceSubType = deviceSubType
}

// WithManufacturer adds the manufacturer to the get hardwares params
func (o *GetHardwaresParams) WithManufacturer(manufacturer *string) *GetHardwaresParams {
	o.SetManufacturer(manufacturer)
	return o
}

// SetManufacturer adds the manufacturer to the get hardwares params
func (o *GetHardwaresParams) SetManufacturer(manufacturer *string) {
	o.Manufacturer = manufacturer
}

// WithName adds the name to the get hardwares params
func (o *GetHardwaresParams) WithName(name *string) *GetHardwaresParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get hardwares params
func (o *GetHardwaresParams) SetName(name *string) {
	o.Name = name
}

// WithPartNo adds the partNo to the get hardwares params
func (o *GetHardwaresParams) WithPartNo(partNo *string) *GetHardwaresParams {
	o.SetPartNo(partNo)
	return o
}

// SetPartNo adds the partNo to the get hardwares params
func (o *GetHardwaresParams) SetPartNo(partNo *string) {
	o.PartNo = partNo
}

// WithSize adds the size to the get hardwares params
func (o *GetHardwaresParams) WithSize(size *string) *GetHardwaresParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get hardwares params
func (o *GetHardwaresParams) SetSize(size *string) {
	o.Size = size
}

// WithType adds the typeVar to the get hardwares params
func (o *GetHardwaresParams) WithType(typeVar *string) *GetHardwaresParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get hardwares params
func (o *GetHardwaresParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithWatts adds the watts to the get hardwares params
func (o *GetHardwaresParams) WithWatts(watts *string) *GetHardwaresParams {
	o.SetWatts(watts)
	return o
}

// SetWatts adds the watts to the get hardwares params
func (o *GetHardwaresParams) SetWatts(watts *string) {
	o.Watts = watts
}

// WriteToRequest writes these params to a swagger request
func (o *GetHardwaresParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Depth != nil {

		// query param depth
		var qrDepth string
		if o.Depth != nil {
			qrDepth = *o.Depth
		}
		qDepth := qrDepth
		if qDepth != "" {
			if err := r.SetQueryParam("depth", qDepth); err != nil {
				return err
			}
		}

	}

	if o.DeviceSubType != nil {

		// query param device_sub_type
		var qrDeviceSubType string
		if o.DeviceSubType != nil {
			qrDeviceSubType = *o.DeviceSubType
		}
		qDeviceSubType := qrDeviceSubType
		if qDeviceSubType != "" {
			if err := r.SetQueryParam("device_sub_type", qDeviceSubType); err != nil {
				return err
			}
		}

	}

	if o.Manufacturer != nil {

		// query param manufacturer
		var qrManufacturer string
		if o.Manufacturer != nil {
			qrManufacturer = *o.Manufacturer
		}
		qManufacturer := qrManufacturer
		if qManufacturer != "" {
			if err := r.SetQueryParam("manufacturer", qManufacturer); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.PartNo != nil {

		// query param part_no
		var qrPartNo string
		if o.PartNo != nil {
			qrPartNo = *o.PartNo
		}
		qPartNo := qrPartNo
		if qPartNo != "" {
			if err := r.SetQueryParam("part_no", qPartNo); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize string
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := qrSize
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.Watts != nil {

		// query param watts
		var qrWatts string
		if o.Watts != nil {
			qrWatts = *o.Watts
		}
		qWatts := qrWatts
		if qWatts != "" {
			if err := r.SetQueryParam("watts", qWatts); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
