// Code generated by go-swagger; DO NOT EDIT.

package hardware_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostHardwaresParams creates a new PostHardwaresParams object
// with the default values initialized.
func NewPostHardwaresParams() *PostHardwaresParams {
	var ()
	return &PostHardwaresParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostHardwaresParamsWithTimeout creates a new PostHardwaresParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostHardwaresParamsWithTimeout(timeout time.Duration) *PostHardwaresParams {
	var ()
	return &PostHardwaresParams{

		timeout: timeout,
	}
}

// NewPostHardwaresParamsWithContext creates a new PostHardwaresParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostHardwaresParamsWithContext(ctx context.Context) *PostHardwaresParams {
	var ()
	return &PostHardwaresParams{

		Context: ctx,
	}
}

// NewPostHardwaresParamsWithHTTPClient creates a new PostHardwaresParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostHardwaresParamsWithHTTPClient(client *http.Client) *PostHardwaresParams {
	var ()
	return &PostHardwaresParams{
		HTTPClient: client,
	}
}

/*PostHardwaresParams contains all the parameters to send to the API endpoint
for the post hardwares operation typically these are written to a http.Request
*/
type PostHardwaresParams struct {

	/*BackImage
	  name of the back image file. Use instead of back_image_id.

	*/
	BackImage *string
	/*BackImageID
	  back image file id. You can see these from Tools > Import > Hardware Import for now.

	*/
	BackImageID *string
	/*BladeSize
	  1=Full Height 2=Half Height 3=Double Half Height 4=Double Full Height 5=Quarter Height

	*/
	BladeSize *int64
	/*Depth
	  half by default, full to override

	*/
	Depth *string
	/*DeviceSubType
	  Subtype of "other" type devices

	*/
	DeviceSubType *string
	/*FrontImage
	  name of the image file (Added in v5.8.2)

	*/
	FrontImage *string
	/*FrontImageID*/
	FrontImageID *string
	/*Manufacturer
	  name of the hardware/software manufacturer.

	*/
	Manufacturer *string
	/*MaxBladesPerRow*/
	MaxBladesPerRow *string
	/*ModulePos*/
	ModulePos *string
	/*Name
	  if similar hardware name already exists, first matching entry is updated

	*/
	Name string
	/*NewName
	  Use to change name of object.

	*/
	NewName *string
	/*Notes
	  Any additional notes

	*/
	Notes *string
	/*PartNo*/
	PartNo *string
	/*Size
	  Size in U for hardware type regular

	*/
	Size *string
	/*SlotNumbering*/
	SlotNumbering *string
	/*SpecURL
	  Specification url for the hardware model.

	*/
	SpecURL *string
	/*Type
	  1 = Regular, 2 = Blade, 3 = Other

	*/
	Type *int64
	/*Watts
	  per power supply

	*/
	Watts *string
	/*WidthRatio
	  Default=1. Can be ½, 1/3,… 1/10, etc.

	*/
	WidthRatio *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post hardwares params
func (o *PostHardwaresParams) WithTimeout(timeout time.Duration) *PostHardwaresParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post hardwares params
func (o *PostHardwaresParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post hardwares params
func (o *PostHardwaresParams) WithContext(ctx context.Context) *PostHardwaresParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post hardwares params
func (o *PostHardwaresParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post hardwares params
func (o *PostHardwaresParams) WithHTTPClient(client *http.Client) *PostHardwaresParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post hardwares params
func (o *PostHardwaresParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBackImage adds the backImage to the post hardwares params
func (o *PostHardwaresParams) WithBackImage(backImage *string) *PostHardwaresParams {
	o.SetBackImage(backImage)
	return o
}

// SetBackImage adds the backImage to the post hardwares params
func (o *PostHardwaresParams) SetBackImage(backImage *string) {
	o.BackImage = backImage
}

// WithBackImageID adds the backImageID to the post hardwares params
func (o *PostHardwaresParams) WithBackImageID(backImageID *string) *PostHardwaresParams {
	o.SetBackImageID(backImageID)
	return o
}

// SetBackImageID adds the backImageId to the post hardwares params
func (o *PostHardwaresParams) SetBackImageID(backImageID *string) {
	o.BackImageID = backImageID
}

// WithBladeSize adds the bladeSize to the post hardwares params
func (o *PostHardwaresParams) WithBladeSize(bladeSize *int64) *PostHardwaresParams {
	o.SetBladeSize(bladeSize)
	return o
}

// SetBladeSize adds the bladeSize to the post hardwares params
func (o *PostHardwaresParams) SetBladeSize(bladeSize *int64) {
	o.BladeSize = bladeSize
}

// WithDepth adds the depth to the post hardwares params
func (o *PostHardwaresParams) WithDepth(depth *string) *PostHardwaresParams {
	o.SetDepth(depth)
	return o
}

// SetDepth adds the depth to the post hardwares params
func (o *PostHardwaresParams) SetDepth(depth *string) {
	o.Depth = depth
}

// WithDeviceSubType adds the deviceSubType to the post hardwares params
func (o *PostHardwaresParams) WithDeviceSubType(deviceSubType *string) *PostHardwaresParams {
	o.SetDeviceSubType(deviceSubType)
	return o
}

// SetDeviceSubType adds the deviceSubType to the post hardwares params
func (o *PostHardwaresParams) SetDeviceSubType(deviceSubType *string) {
	o.DeviceSubType = deviceSubType
}

// WithFrontImage adds the frontImage to the post hardwares params
func (o *PostHardwaresParams) WithFrontImage(frontImage *string) *PostHardwaresParams {
	o.SetFrontImage(frontImage)
	return o
}

// SetFrontImage adds the frontImage to the post hardwares params
func (o *PostHardwaresParams) SetFrontImage(frontImage *string) {
	o.FrontImage = frontImage
}

// WithFrontImageID adds the frontImageID to the post hardwares params
func (o *PostHardwaresParams) WithFrontImageID(frontImageID *string) *PostHardwaresParams {
	o.SetFrontImageID(frontImageID)
	return o
}

// SetFrontImageID adds the frontImageId to the post hardwares params
func (o *PostHardwaresParams) SetFrontImageID(frontImageID *string) {
	o.FrontImageID = frontImageID
}

// WithManufacturer adds the manufacturer to the post hardwares params
func (o *PostHardwaresParams) WithManufacturer(manufacturer *string) *PostHardwaresParams {
	o.SetManufacturer(manufacturer)
	return o
}

// SetManufacturer adds the manufacturer to the post hardwares params
func (o *PostHardwaresParams) SetManufacturer(manufacturer *string) {
	o.Manufacturer = manufacturer
}

// WithMaxBladesPerRow adds the maxBladesPerRow to the post hardwares params
func (o *PostHardwaresParams) WithMaxBladesPerRow(maxBladesPerRow *string) *PostHardwaresParams {
	o.SetMaxBladesPerRow(maxBladesPerRow)
	return o
}

// SetMaxBladesPerRow adds the maxBladesPerRow to the post hardwares params
func (o *PostHardwaresParams) SetMaxBladesPerRow(maxBladesPerRow *string) {
	o.MaxBladesPerRow = maxBladesPerRow
}

// WithModulePos adds the modulePos to the post hardwares params
func (o *PostHardwaresParams) WithModulePos(modulePos *string) *PostHardwaresParams {
	o.SetModulePos(modulePos)
	return o
}

// SetModulePos adds the modulePos to the post hardwares params
func (o *PostHardwaresParams) SetModulePos(modulePos *string) {
	o.ModulePos = modulePos
}

// WithName adds the name to the post hardwares params
func (o *PostHardwaresParams) WithName(name string) *PostHardwaresParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post hardwares params
func (o *PostHardwaresParams) SetName(name string) {
	o.Name = name
}

// WithNewName adds the newName to the post hardwares params
func (o *PostHardwaresParams) WithNewName(newName *string) *PostHardwaresParams {
	o.SetNewName(newName)
	return o
}

// SetNewName adds the newName to the post hardwares params
func (o *PostHardwaresParams) SetNewName(newName *string) {
	o.NewName = newName
}

// WithNotes adds the notes to the post hardwares params
func (o *PostHardwaresParams) WithNotes(notes *string) *PostHardwaresParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the post hardwares params
func (o *PostHardwaresParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithPartNo adds the partNo to the post hardwares params
func (o *PostHardwaresParams) WithPartNo(partNo *string) *PostHardwaresParams {
	o.SetPartNo(partNo)
	return o
}

// SetPartNo adds the partNo to the post hardwares params
func (o *PostHardwaresParams) SetPartNo(partNo *string) {
	o.PartNo = partNo
}

// WithSize adds the size to the post hardwares params
func (o *PostHardwaresParams) WithSize(size *string) *PostHardwaresParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the post hardwares params
func (o *PostHardwaresParams) SetSize(size *string) {
	o.Size = size
}

// WithSlotNumbering adds the slotNumbering to the post hardwares params
func (o *PostHardwaresParams) WithSlotNumbering(slotNumbering *string) *PostHardwaresParams {
	o.SetSlotNumbering(slotNumbering)
	return o
}

// SetSlotNumbering adds the slotNumbering to the post hardwares params
func (o *PostHardwaresParams) SetSlotNumbering(slotNumbering *string) {
	o.SlotNumbering = slotNumbering
}

// WithSpecURL adds the specURL to the post hardwares params
func (o *PostHardwaresParams) WithSpecURL(specURL *string) *PostHardwaresParams {
	o.SetSpecURL(specURL)
	return o
}

// SetSpecURL adds the specUrl to the post hardwares params
func (o *PostHardwaresParams) SetSpecURL(specURL *string) {
	o.SpecURL = specURL
}

// WithType adds the typeVar to the post hardwares params
func (o *PostHardwaresParams) WithType(typeVar *int64) *PostHardwaresParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the post hardwares params
func (o *PostHardwaresParams) SetType(typeVar *int64) {
	o.Type = typeVar
}

// WithWatts adds the watts to the post hardwares params
func (o *PostHardwaresParams) WithWatts(watts *string) *PostHardwaresParams {
	o.SetWatts(watts)
	return o
}

// SetWatts adds the watts to the post hardwares params
func (o *PostHardwaresParams) SetWatts(watts *string) {
	o.Watts = watts
}

// WithWidthRatio adds the widthRatio to the post hardwares params
func (o *PostHardwaresParams) WithWidthRatio(widthRatio *string) *PostHardwaresParams {
	o.SetWidthRatio(widthRatio)
	return o
}

// SetWidthRatio adds the widthRatio to the post hardwares params
func (o *PostHardwaresParams) SetWidthRatio(widthRatio *string) {
	o.WidthRatio = widthRatio
}

// WriteToRequest writes these params to a swagger request
func (o *PostHardwaresParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BackImage != nil {

		// form param back_image
		var frBackImage string
		if o.BackImage != nil {
			frBackImage = *o.BackImage
		}
		fBackImage := frBackImage
		if fBackImage != "" {
			if err := r.SetFormParam("back_image", fBackImage); err != nil {
				return err
			}
		}

	}

	if o.BackImageID != nil {

		// form param back_image_id
		var frBackImageID string
		if o.BackImageID != nil {
			frBackImageID = *o.BackImageID
		}
		fBackImageID := frBackImageID
		if fBackImageID != "" {
			if err := r.SetFormParam("back_image_id", fBackImageID); err != nil {
				return err
			}
		}

	}

	if o.BladeSize != nil {

		// form param blade_size
		var frBladeSize int64
		if o.BladeSize != nil {
			frBladeSize = *o.BladeSize
		}
		fBladeSize := swag.FormatInt64(frBladeSize)
		if fBladeSize != "" {
			if err := r.SetFormParam("blade_size", fBladeSize); err != nil {
				return err
			}
		}

	}

	if o.Depth != nil {

		// form param depth
		var frDepth string
		if o.Depth != nil {
			frDepth = *o.Depth
		}
		fDepth := frDepth
		if fDepth != "" {
			if err := r.SetFormParam("depth", fDepth); err != nil {
				return err
			}
		}

	}

	if o.DeviceSubType != nil {

		// form param device_sub_type
		var frDeviceSubType string
		if o.DeviceSubType != nil {
			frDeviceSubType = *o.DeviceSubType
		}
		fDeviceSubType := frDeviceSubType
		if fDeviceSubType != "" {
			if err := r.SetFormParam("device_sub_type", fDeviceSubType); err != nil {
				return err
			}
		}

	}

	if o.FrontImage != nil {

		// form param front_image
		var frFrontImage string
		if o.FrontImage != nil {
			frFrontImage = *o.FrontImage
		}
		fFrontImage := frFrontImage
		if fFrontImage != "" {
			if err := r.SetFormParam("front_image", fFrontImage); err != nil {
				return err
			}
		}

	}

	if o.FrontImageID != nil {

		// form param front_image_id
		var frFrontImageID string
		if o.FrontImageID != nil {
			frFrontImageID = *o.FrontImageID
		}
		fFrontImageID := frFrontImageID
		if fFrontImageID != "" {
			if err := r.SetFormParam("front_image_id", fFrontImageID); err != nil {
				return err
			}
		}

	}

	if o.Manufacturer != nil {

		// form param manufacturer
		var frManufacturer string
		if o.Manufacturer != nil {
			frManufacturer = *o.Manufacturer
		}
		fManufacturer := frManufacturer
		if fManufacturer != "" {
			if err := r.SetFormParam("manufacturer", fManufacturer); err != nil {
				return err
			}
		}

	}

	if o.MaxBladesPerRow != nil {

		// form param max_blades_per_row
		var frMaxBladesPerRow string
		if o.MaxBladesPerRow != nil {
			frMaxBladesPerRow = *o.MaxBladesPerRow
		}
		fMaxBladesPerRow := frMaxBladesPerRow
		if fMaxBladesPerRow != "" {
			if err := r.SetFormParam("max_blades_per_row", fMaxBladesPerRow); err != nil {
				return err
			}
		}

	}

	if o.ModulePos != nil {

		// form param module_pos
		var frModulePos string
		if o.ModulePos != nil {
			frModulePos = *o.ModulePos
		}
		fModulePos := frModulePos
		if fModulePos != "" {
			if err := r.SetFormParam("module_pos", fModulePos); err != nil {
				return err
			}
		}

	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.NewName != nil {

		// form param new_name
		var frNewName string
		if o.NewName != nil {
			frNewName = *o.NewName
		}
		fNewName := frNewName
		if fNewName != "" {
			if err := r.SetFormParam("new_name", fNewName); err != nil {
				return err
			}
		}

	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if o.PartNo != nil {

		// form param part_no
		var frPartNo string
		if o.PartNo != nil {
			frPartNo = *o.PartNo
		}
		fPartNo := frPartNo
		if fPartNo != "" {
			if err := r.SetFormParam("part_no", fPartNo); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// form param size
		var frSize string
		if o.Size != nil {
			frSize = *o.Size
		}
		fSize := frSize
		if fSize != "" {
			if err := r.SetFormParam("size", fSize); err != nil {
				return err
			}
		}

	}

	if o.SlotNumbering != nil {

		// form param slot_numbering
		var frSlotNumbering string
		if o.SlotNumbering != nil {
			frSlotNumbering = *o.SlotNumbering
		}
		fSlotNumbering := frSlotNumbering
		if fSlotNumbering != "" {
			if err := r.SetFormParam("slot_numbering", fSlotNumbering); err != nil {
				return err
			}
		}

	}

	if o.SpecURL != nil {

		// form param spec_url
		var frSpecURL string
		if o.SpecURL != nil {
			frSpecURL = *o.SpecURL
		}
		fSpecURL := frSpecURL
		if fSpecURL != "" {
			if err := r.SetFormParam("spec_url", fSpecURL); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// form param type
		var frType int64
		if o.Type != nil {
			frType = *o.Type
		}
		fType := swag.FormatInt64(frType)
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}

	}

	if o.Watts != nil {

		// form param watts
		var frWatts string
		if o.Watts != nil {
			frWatts = *o.Watts
		}
		fWatts := frWatts
		if fWatts != "" {
			if err := r.SetFormParam("watts", fWatts); err != nil {
				return err
			}
		}

	}

	if o.WidthRatio != nil {

		// form param width_ratio
		var frWidthRatio string
		if o.WidthRatio != nil {
			frWidthRatio = *o.WidthRatio
		}
		fWidthRatio := frWidthRatio
		if fWidthRatio != "" {
			if err := r.SetFormParam("width_ratio", fWidthRatio); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
