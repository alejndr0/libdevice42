// Code generated by go-swagger; DO NOT EDIT.

package auto_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutAutoDiscoveryDNSParams creates a new PutAutoDiscoveryDNSParams object
// with the default values initialized.
func NewPutAutoDiscoveryDNSParams() *PutAutoDiscoveryDNSParams {
	var ()
	return &PutAutoDiscoveryDNSParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutAutoDiscoveryDNSParamsWithTimeout creates a new PutAutoDiscoveryDNSParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutAutoDiscoveryDNSParamsWithTimeout(timeout time.Duration) *PutAutoDiscoveryDNSParams {
	var ()
	return &PutAutoDiscoveryDNSParams{

		timeout: timeout,
	}
}

// NewPutAutoDiscoveryDNSParamsWithContext creates a new PutAutoDiscoveryDNSParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutAutoDiscoveryDNSParamsWithContext(ctx context.Context) *PutAutoDiscoveryDNSParams {
	var ()
	return &PutAutoDiscoveryDNSParams{

		Context: ctx,
	}
}

// NewPutAutoDiscoveryDNSParamsWithHTTPClient creates a new PutAutoDiscoveryDNSParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutAutoDiscoveryDNSParamsWithHTTPClient(client *http.Client) *PutAutoDiscoveryDNSParams {
	var ()
	return &PutAutoDiscoveryDNSParams{
		HTTPClient: client,
	}
}

/*PutAutoDiscoveryDNSParams contains all the parameters to send to the API endpoint
for the put auto discovery Dns operation typically these are written to a http.Request
*/
type PutAutoDiscoveryDNSParams struct {

	/*JobID
	  D42 ID for the job

	*/
	JobID string
	/*Run
	  yes to start

	*/
	Run string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put auto discovery Dns params
func (o *PutAutoDiscoveryDNSParams) WithTimeout(timeout time.Duration) *PutAutoDiscoveryDNSParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put auto discovery Dns params
func (o *PutAutoDiscoveryDNSParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put auto discovery Dns params
func (o *PutAutoDiscoveryDNSParams) WithContext(ctx context.Context) *PutAutoDiscoveryDNSParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put auto discovery Dns params
func (o *PutAutoDiscoveryDNSParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put auto discovery Dns params
func (o *PutAutoDiscoveryDNSParams) WithHTTPClient(client *http.Client) *PutAutoDiscoveryDNSParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put auto discovery Dns params
func (o *PutAutoDiscoveryDNSParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJobID adds the jobID to the put auto discovery Dns params
func (o *PutAutoDiscoveryDNSParams) WithJobID(jobID string) *PutAutoDiscoveryDNSParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the put auto discovery Dns params
func (o *PutAutoDiscoveryDNSParams) SetJobID(jobID string) {
	o.JobID = jobID
}

// WithRun adds the run to the put auto discovery Dns params
func (o *PutAutoDiscoveryDNSParams) WithRun(run string) *PutAutoDiscoveryDNSParams {
	o.SetRun(run)
	return o
}

// SetRun adds the run to the put auto discovery Dns params
func (o *PutAutoDiscoveryDNSParams) SetRun(run string) {
	o.Run = run
}

// WriteToRequest writes these params to a swagger request
func (o *PutAutoDiscoveryDNSParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param job_id
	frJobID := o.JobID
	fJobID := frJobID
	if fJobID != "" {
		if err := r.SetFormParam("job_id", fJobID); err != nil {
			return err
		}
	}

	// form param run
	frRun := o.Run
	fRun := frRun
	if fRun != "" {
		if err := r.SetFormParam("run", fRun); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
