// Code generated by go-swagger; DO NOT EDIT.

package auto_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostAutoDiscoveryPingsweepParams creates a new PostAutoDiscoveryPingsweepParams object
// with the default values initialized.
func NewPostAutoDiscoveryPingsweepParams() *PostAutoDiscoveryPingsweepParams {
	var ()
	return &PostAutoDiscoveryPingsweepParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostAutoDiscoveryPingsweepParamsWithTimeout creates a new PostAutoDiscoveryPingsweepParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostAutoDiscoveryPingsweepParamsWithTimeout(timeout time.Duration) *PostAutoDiscoveryPingsweepParams {
	var ()
	return &PostAutoDiscoveryPingsweepParams{

		timeout: timeout,
	}
}

// NewPostAutoDiscoveryPingsweepParamsWithContext creates a new PostAutoDiscoveryPingsweepParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostAutoDiscoveryPingsweepParamsWithContext(ctx context.Context) *PostAutoDiscoveryPingsweepParams {
	var ()
	return &PostAutoDiscoveryPingsweepParams{

		Context: ctx,
	}
}

// NewPostAutoDiscoveryPingsweepParamsWithHTTPClient creates a new PostAutoDiscoveryPingsweepParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostAutoDiscoveryPingsweepParamsWithHTTPClient(client *http.Client) *PostAutoDiscoveryPingsweepParams {
	var ()
	return &PostAutoDiscoveryPingsweepParams{
		HTTPClient: client,
	}
}

/*PostAutoDiscoveryPingsweepParams contains all the parameters to send to the API endpoint
for the post auto discovery pingsweep operation typically these are written to a http.Request
*/
type PostAutoDiscoveryPingsweepParams struct {

	/*ClearExistingSchedule*/
	ClearExistingSchedule *string
	/*CreateNewSubnet
	  Create new subnet for networks not found

	*/
	CreateNewSubnet *string
	/*DebugLevel*/
	DebugLevel *string
	/*Name
	  name of the job

	*/
	Name string
	/*Networks
	  Networks to search. Required if new

	*/
	Networks *string
	/*OverwriteSubnetCategories
	  If a subnet is discovered that exists and already has a subnet category, the category will be overwritten and all child subnets of the discovered subnet will also get the new category.

	*/
	OverwriteSubnetCategories *string
	/*RemoteCollectorID
	  ID of the remote collector to use for this job

	*/
	RemoteCollectorID *int64
	/*ReverseDNS
	  Add devices by reverse DNS of discovered IP. (Recommended to leave unchecked and use other discovery methods for devices)

	*/
	ReverseDNS *string
	/*StripDomainSuffix
	  Strip everything after the first dot

	*/
	StripDomainSuffix *string
	/*SubnetCategory
	  name of subnet category for discovered subnets

	*/
	SubnetCategory *string
	/*Tags
	  comma separated list of tags

	*/
	Tags *string
	/*TagsRemove
	  comma separated list of tags to remove

	*/
	TagsRemove *string
	/*Type
	  Choose if you want to automatically assign type to discovered IPs.

	*/
	Type *string
	/*Vrfgroup
	  name of vrf group for discovered subnets

	*/
	Vrfgroup *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithTimeout(timeout time.Duration) *PostAutoDiscoveryPingsweepParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithContext(ctx context.Context) *PostAutoDiscoveryPingsweepParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithHTTPClient(client *http.Client) *PostAutoDiscoveryPingsweepParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClearExistingSchedule adds the clearExistingSchedule to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithClearExistingSchedule(clearExistingSchedule *string) *PostAutoDiscoveryPingsweepParams {
	o.SetClearExistingSchedule(clearExistingSchedule)
	return o
}

// SetClearExistingSchedule adds the clearExistingSchedule to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetClearExistingSchedule(clearExistingSchedule *string) {
	o.ClearExistingSchedule = clearExistingSchedule
}

// WithCreateNewSubnet adds the createNewSubnet to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithCreateNewSubnet(createNewSubnet *string) *PostAutoDiscoveryPingsweepParams {
	o.SetCreateNewSubnet(createNewSubnet)
	return o
}

// SetCreateNewSubnet adds the createNewSubnet to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetCreateNewSubnet(createNewSubnet *string) {
	o.CreateNewSubnet = createNewSubnet
}

// WithDebugLevel adds the debugLevel to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithDebugLevel(debugLevel *string) *PostAutoDiscoveryPingsweepParams {
	o.SetDebugLevel(debugLevel)
	return o
}

// SetDebugLevel adds the debugLevel to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetDebugLevel(debugLevel *string) {
	o.DebugLevel = debugLevel
}

// WithName adds the name to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithName(name string) *PostAutoDiscoveryPingsweepParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetName(name string) {
	o.Name = name
}

// WithNetworks adds the networks to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithNetworks(networks *string) *PostAutoDiscoveryPingsweepParams {
	o.SetNetworks(networks)
	return o
}

// SetNetworks adds the networks to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetNetworks(networks *string) {
	o.Networks = networks
}

// WithOverwriteSubnetCategories adds the overwriteSubnetCategories to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithOverwriteSubnetCategories(overwriteSubnetCategories *string) *PostAutoDiscoveryPingsweepParams {
	o.SetOverwriteSubnetCategories(overwriteSubnetCategories)
	return o
}

// SetOverwriteSubnetCategories adds the overwriteSubnetCategories to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetOverwriteSubnetCategories(overwriteSubnetCategories *string) {
	o.OverwriteSubnetCategories = overwriteSubnetCategories
}

// WithRemoteCollectorID adds the remoteCollectorID to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithRemoteCollectorID(remoteCollectorID *int64) *PostAutoDiscoveryPingsweepParams {
	o.SetRemoteCollectorID(remoteCollectorID)
	return o
}

// SetRemoteCollectorID adds the remoteCollectorId to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetRemoteCollectorID(remoteCollectorID *int64) {
	o.RemoteCollectorID = remoteCollectorID
}

// WithReverseDNS adds the reverseDNS to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithReverseDNS(reverseDNS *string) *PostAutoDiscoveryPingsweepParams {
	o.SetReverseDNS(reverseDNS)
	return o
}

// SetReverseDNS adds the reverseDns to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetReverseDNS(reverseDNS *string) {
	o.ReverseDNS = reverseDNS
}

// WithStripDomainSuffix adds the stripDomainSuffix to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithStripDomainSuffix(stripDomainSuffix *string) *PostAutoDiscoveryPingsweepParams {
	o.SetStripDomainSuffix(stripDomainSuffix)
	return o
}

// SetStripDomainSuffix adds the stripDomainSuffix to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetStripDomainSuffix(stripDomainSuffix *string) {
	o.StripDomainSuffix = stripDomainSuffix
}

// WithSubnetCategory adds the subnetCategory to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithSubnetCategory(subnetCategory *string) *PostAutoDiscoveryPingsweepParams {
	o.SetSubnetCategory(subnetCategory)
	return o
}

// SetSubnetCategory adds the subnetCategory to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetSubnetCategory(subnetCategory *string) {
	o.SubnetCategory = subnetCategory
}

// WithTags adds the tags to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithTags(tags *string) *PostAutoDiscoveryPingsweepParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithTagsRemove adds the tagsRemove to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithTagsRemove(tagsRemove *string) *PostAutoDiscoveryPingsweepParams {
	o.SetTagsRemove(tagsRemove)
	return o
}

// SetTagsRemove adds the tagsRemove to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetTagsRemove(tagsRemove *string) {
	o.TagsRemove = tagsRemove
}

// WithType adds the typeVar to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithType(typeVar *string) *PostAutoDiscoveryPingsweepParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithVrfgroup adds the vrfgroup to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) WithVrfgroup(vrfgroup *string) *PostAutoDiscoveryPingsweepParams {
	o.SetVrfgroup(vrfgroup)
	return o
}

// SetVrfgroup adds the vrfgroup to the post auto discovery pingsweep params
func (o *PostAutoDiscoveryPingsweepParams) SetVrfgroup(vrfgroup *string) {
	o.Vrfgroup = vrfgroup
}

// WriteToRequest writes these params to a swagger request
func (o *PostAutoDiscoveryPingsweepParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClearExistingSchedule != nil {

		// form param clear_existing_schedule
		var frClearExistingSchedule string
		if o.ClearExistingSchedule != nil {
			frClearExistingSchedule = *o.ClearExistingSchedule
		}
		fClearExistingSchedule := frClearExistingSchedule
		if fClearExistingSchedule != "" {
			if err := r.SetFormParam("clear_existing_schedule", fClearExistingSchedule); err != nil {
				return err
			}
		}

	}

	if o.CreateNewSubnet != nil {

		// form param create_new_subnet
		var frCreateNewSubnet string
		if o.CreateNewSubnet != nil {
			frCreateNewSubnet = *o.CreateNewSubnet
		}
		fCreateNewSubnet := frCreateNewSubnet
		if fCreateNewSubnet != "" {
			if err := r.SetFormParam("create_new_subnet", fCreateNewSubnet); err != nil {
				return err
			}
		}

	}

	if o.DebugLevel != nil {

		// form param debug_level
		var frDebugLevel string
		if o.DebugLevel != nil {
			frDebugLevel = *o.DebugLevel
		}
		fDebugLevel := frDebugLevel
		if fDebugLevel != "" {
			if err := r.SetFormParam("debug_level", fDebugLevel); err != nil {
				return err
			}
		}

	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.Networks != nil {

		// form param networks
		var frNetworks string
		if o.Networks != nil {
			frNetworks = *o.Networks
		}
		fNetworks := frNetworks
		if fNetworks != "" {
			if err := r.SetFormParam("networks", fNetworks); err != nil {
				return err
			}
		}

	}

	if o.OverwriteSubnetCategories != nil {

		// form param overwrite_subnet_categories
		var frOverwriteSubnetCategories string
		if o.OverwriteSubnetCategories != nil {
			frOverwriteSubnetCategories = *o.OverwriteSubnetCategories
		}
		fOverwriteSubnetCategories := frOverwriteSubnetCategories
		if fOverwriteSubnetCategories != "" {
			if err := r.SetFormParam("overwrite_subnet_categories", fOverwriteSubnetCategories); err != nil {
				return err
			}
		}

	}

	if o.RemoteCollectorID != nil {

		// form param remote_collector_id
		var frRemoteCollectorID int64
		if o.RemoteCollectorID != nil {
			frRemoteCollectorID = *o.RemoteCollectorID
		}
		fRemoteCollectorID := swag.FormatInt64(frRemoteCollectorID)
		if fRemoteCollectorID != "" {
			if err := r.SetFormParam("remote_collector_id", fRemoteCollectorID); err != nil {
				return err
			}
		}

	}

	if o.ReverseDNS != nil {

		// form param reverse_dns
		var frReverseDNS string
		if o.ReverseDNS != nil {
			frReverseDNS = *o.ReverseDNS
		}
		fReverseDNS := frReverseDNS
		if fReverseDNS != "" {
			if err := r.SetFormParam("reverse_dns", fReverseDNS); err != nil {
				return err
			}
		}

	}

	if o.StripDomainSuffix != nil {

		// form param strip_domain_suffix
		var frStripDomainSuffix string
		if o.StripDomainSuffix != nil {
			frStripDomainSuffix = *o.StripDomainSuffix
		}
		fStripDomainSuffix := frStripDomainSuffix
		if fStripDomainSuffix != "" {
			if err := r.SetFormParam("strip_domain_suffix", fStripDomainSuffix); err != nil {
				return err
			}
		}

	}

	if o.SubnetCategory != nil {

		// form param subnet_category
		var frSubnetCategory string
		if o.SubnetCategory != nil {
			frSubnetCategory = *o.SubnetCategory
		}
		fSubnetCategory := frSubnetCategory
		if fSubnetCategory != "" {
			if err := r.SetFormParam("subnet_category", fSubnetCategory); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// form param tags
		var frTags string
		if o.Tags != nil {
			frTags = *o.Tags
		}
		fTags := frTags
		if fTags != "" {
			if err := r.SetFormParam("tags", fTags); err != nil {
				return err
			}
		}

	}

	if o.TagsRemove != nil {

		// form param tags_remove
		var frTagsRemove string
		if o.TagsRemove != nil {
			frTagsRemove = *o.TagsRemove
		}
		fTagsRemove := frTagsRemove
		if fTagsRemove != "" {
			if err := r.SetFormParam("tags_remove", fTagsRemove); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// form param type
		var frType string
		if o.Type != nil {
			frType = *o.Type
		}
		fType := frType
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}

	}

	if o.Vrfgroup != nil {

		// form param vrfgroup
		var frVrfgroup string
		if o.Vrfgroup != nil {
			frVrfgroup = *o.Vrfgroup
		}
		fVrfgroup := frVrfgroup
		if fVrfgroup != "" {
			if err := r.SetFormParam("vrfgroup", fVrfgroup); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
