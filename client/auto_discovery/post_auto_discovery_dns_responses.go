// Code generated by go-swagger; DO NOT EDIT.

package auto_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostAutoDiscoveryDNSReader is a Reader for the PostAutoDiscoveryDNS structure.
type PostAutoDiscoveryDNSReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAutoDiscoveryDNSReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostAutoDiscoveryDNSOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAutoDiscoveryDNSBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostAutoDiscoveryDNSUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostAutoDiscoveryDNSForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostAutoDiscoveryDNSNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPostAutoDiscoveryDNSMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewPostAutoDiscoveryDNSGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostAutoDiscoveryDNSInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostAutoDiscoveryDNSServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostAutoDiscoveryDNSOK creates a PostAutoDiscoveryDNSOK with default headers values
func NewPostAutoDiscoveryDNSOK() *PostAutoDiscoveryDNSOK {
	return &PostAutoDiscoveryDNSOK{}
}

/*PostAutoDiscoveryDNSOK handles this case with default header values.

The above command returns results like this:
*/
type PostAutoDiscoveryDNSOK struct {
	Payload *PostAutoDiscoveryDNSOKBody
}

func (o *PostAutoDiscoveryDNSOK) Error() string {
	return fmt.Sprintf("[POST /api/1.0/auto_discovery/dns/][%d] postAutoDiscoveryDnsOK  %+v", 200, o.Payload)
}

func (o *PostAutoDiscoveryDNSOK) GetPayload() *PostAutoDiscoveryDNSOKBody {
	return o.Payload
}

func (o *PostAutoDiscoveryDNSOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostAutoDiscoveryDNSOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAutoDiscoveryDNSBadRequest creates a PostAutoDiscoveryDNSBadRequest with default headers values
func NewPostAutoDiscoveryDNSBadRequest() *PostAutoDiscoveryDNSBadRequest {
	return &PostAutoDiscoveryDNSBadRequest{}
}

/*PostAutoDiscoveryDNSBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type PostAutoDiscoveryDNSBadRequest struct {
}

func (o *PostAutoDiscoveryDNSBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/1.0/auto_discovery/dns/][%d] postAutoDiscoveryDnsBadRequest ", 400)
}

func (o *PostAutoDiscoveryDNSBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostAutoDiscoveryDNSUnauthorized creates a PostAutoDiscoveryDNSUnauthorized with default headers values
func NewPostAutoDiscoveryDNSUnauthorized() *PostAutoDiscoveryDNSUnauthorized {
	return &PostAutoDiscoveryDNSUnauthorized{}
}

/*PostAutoDiscoveryDNSUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type PostAutoDiscoveryDNSUnauthorized struct {
}

func (o *PostAutoDiscoveryDNSUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/1.0/auto_discovery/dns/][%d] postAutoDiscoveryDnsUnauthorized ", 401)
}

func (o *PostAutoDiscoveryDNSUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostAutoDiscoveryDNSForbidden creates a PostAutoDiscoveryDNSForbidden with default headers values
func NewPostAutoDiscoveryDNSForbidden() *PostAutoDiscoveryDNSForbidden {
	return &PostAutoDiscoveryDNSForbidden{}
}

/*PostAutoDiscoveryDNSForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type PostAutoDiscoveryDNSForbidden struct {
}

func (o *PostAutoDiscoveryDNSForbidden) Error() string {
	return fmt.Sprintf("[POST /api/1.0/auto_discovery/dns/][%d] postAutoDiscoveryDnsForbidden ", 403)
}

func (o *PostAutoDiscoveryDNSForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostAutoDiscoveryDNSNotFound creates a PostAutoDiscoveryDNSNotFound with default headers values
func NewPostAutoDiscoveryDNSNotFound() *PostAutoDiscoveryDNSNotFound {
	return &PostAutoDiscoveryDNSNotFound{}
}

/*PostAutoDiscoveryDNSNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type PostAutoDiscoveryDNSNotFound struct {
}

func (o *PostAutoDiscoveryDNSNotFound) Error() string {
	return fmt.Sprintf("[POST /api/1.0/auto_discovery/dns/][%d] postAutoDiscoveryDnsNotFound ", 404)
}

func (o *PostAutoDiscoveryDNSNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostAutoDiscoveryDNSMethodNotAllowed creates a PostAutoDiscoveryDNSMethodNotAllowed with default headers values
func NewPostAutoDiscoveryDNSMethodNotAllowed() *PostAutoDiscoveryDNSMethodNotAllowed {
	return &PostAutoDiscoveryDNSMethodNotAllowed{}
}

/*PostAutoDiscoveryDNSMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type PostAutoDiscoveryDNSMethodNotAllowed struct {
}

func (o *PostAutoDiscoveryDNSMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /api/1.0/auto_discovery/dns/][%d] postAutoDiscoveryDnsMethodNotAllowed ", 405)
}

func (o *PostAutoDiscoveryDNSMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostAutoDiscoveryDNSGone creates a PostAutoDiscoveryDNSGone with default headers values
func NewPostAutoDiscoveryDNSGone() *PostAutoDiscoveryDNSGone {
	return &PostAutoDiscoveryDNSGone{}
}

/*PostAutoDiscoveryDNSGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type PostAutoDiscoveryDNSGone struct {
}

func (o *PostAutoDiscoveryDNSGone) Error() string {
	return fmt.Sprintf("[POST /api/1.0/auto_discovery/dns/][%d] postAutoDiscoveryDnsGone ", 410)
}

func (o *PostAutoDiscoveryDNSGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostAutoDiscoveryDNSInternalServerError creates a PostAutoDiscoveryDNSInternalServerError with default headers values
func NewPostAutoDiscoveryDNSInternalServerError() *PostAutoDiscoveryDNSInternalServerError {
	return &PostAutoDiscoveryDNSInternalServerError{}
}

/*PostAutoDiscoveryDNSInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type PostAutoDiscoveryDNSInternalServerError struct {
}

func (o *PostAutoDiscoveryDNSInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/1.0/auto_discovery/dns/][%d] postAutoDiscoveryDnsInternalServerError ", 500)
}

func (o *PostAutoDiscoveryDNSInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostAutoDiscoveryDNSServiceUnavailable creates a PostAutoDiscoveryDNSServiceUnavailable with default headers values
func NewPostAutoDiscoveryDNSServiceUnavailable() *PostAutoDiscoveryDNSServiceUnavailable {
	return &PostAutoDiscoveryDNSServiceUnavailable{}
}

/*PostAutoDiscoveryDNSServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type PostAutoDiscoveryDNSServiceUnavailable struct {
}

func (o *PostAutoDiscoveryDNSServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/1.0/auto_discovery/dns/][%d] postAutoDiscoveryDnsServiceUnavailable ", 503)
}

func (o *PostAutoDiscoveryDNSServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostAutoDiscoveryDNSOKBody post auto discovery DNS o k body
swagger:model PostAutoDiscoveryDNSOKBody
*/
type PostAutoDiscoveryDNSOKBody struct {

	// code
	Code interface{} `json:"code,omitempty"`

	// msg
	Msg interface{} `json:"msg,omitempty"`
}

// Validate validates this post auto discovery DNS o k body
func (o *PostAutoDiscoveryDNSOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAutoDiscoveryDNSOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAutoDiscoveryDNSOKBody) UnmarshalBinary(b []byte) error {
	var res PostAutoDiscoveryDNSOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
