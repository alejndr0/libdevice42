// Code generated by go-swagger; DO NOT EDIT.

package auto_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new auto discovery API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auto discovery API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAutoDiscoveryCertificate(params *GetAutoDiscoveryCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*GetAutoDiscoveryCertificateOK, error)

	GetAutoDiscoveryDNS(params *GetAutoDiscoveryDNSParams, authInfo runtime.ClientAuthInfoWriter) (*GetAutoDiscoveryDNSOK, error)

	GetAutoDiscoveryNetworks(params *GetAutoDiscoveryNetworksParams, authInfo runtime.ClientAuthInfoWriter) (*GetAutoDiscoveryNetworksOK, error)

	GetAutoDiscoveryPingsweep(params *GetAutoDiscoveryPingsweepParams, authInfo runtime.ClientAuthInfoWriter) (*GetAutoDiscoveryPingsweepOK, error)

	PostAutoDiscoveryBladeDisc(params *PostAutoDiscoveryBladeDiscParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryBladeDiscOK, error)

	PostAutoDiscoveryCertificate(params *PostAutoDiscoveryCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryCertificateOK, error)

	PostAutoDiscoveryCloudaccount(params *PostAutoDiscoveryCloudaccountParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryCloudaccountOK, error)

	PostAutoDiscoveryDNS(params *PostAutoDiscoveryDNSParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryDNSOK, error)

	PostAutoDiscoveryIpmi(params *PostAutoDiscoveryIpmiParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryIpmiOK, error)

	PostAutoDiscoveryNetworks(params *PostAutoDiscoveryNetworksParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryNetworksOK, error)

	PostAutoDiscoveryPingsweep(params *PostAutoDiscoveryPingsweepParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryPingsweepOK, error)

	PostAutoDiscoveryPowerDisc(params *PostAutoDiscoveryPowerDiscParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryPowerDiscOK, error)

	PostAutoDiscoverySnmpDisc(params *PostAutoDiscoverySnmpDiscParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoverySnmpDiscOK, error)

	PostAutoDiscoveryVserver(params *PostAutoDiscoveryVserverParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryVserverOK, error)

	PutAutoDiscoveryBladeDisc(params *PutAutoDiscoveryBladeDiscParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryBladeDiscOK, error)

	PutAutoDiscoveryCertificate(params *PutAutoDiscoveryCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryCertificateOK, error)

	PutAutoDiscoveryCloudaccount(params *PutAutoDiscoveryCloudaccountParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryCloudaccountOK, error)

	PutAutoDiscoveryDNS(params *PutAutoDiscoveryDNSParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryDNSOK, error)

	PutAutoDiscoveryIpmi(params *PutAutoDiscoveryIpmiParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryIpmiOK, error)

	PutAutoDiscoveryNetworks(params *PutAutoDiscoveryNetworksParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryNetworksOK, error)

	PutAutoDiscoveryPingsweep(params *PutAutoDiscoveryPingsweepParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryPingsweepOK, error)

	PutAutoDiscoveryPowerDisc(params *PutAutoDiscoveryPowerDiscParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryPowerDiscOK, error)

	PutAutoDiscoverySnmpDisc(params *PutAutoDiscoverySnmpDiscParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoverySnmpDiscOK, error)

	PutAutoDiscoveryVserver(params *PutAutoDiscoveryVserverParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryVserverOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAutoDiscoveryCertificate retrieves all auto discovery jobs for dns

  Get Certificate Auto Discovery Jobs
*/
func (a *Client) GetAutoDiscoveryCertificate(params *GetAutoDiscoveryCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*GetAutoDiscoveryCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutoDiscoveryCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuto_discoveryCertificate",
		Method:             "GET",
		PathPattern:        "/api/1.0/auto_discovery/certificate/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAutoDiscoveryCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutoDiscoveryCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuto_discoveryCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAutoDiscoveryDNS retrieves all auto discovery jobs for dns

  Get DNS Auto Discovery Jobs
*/
func (a *Client) GetAutoDiscoveryDNS(params *GetAutoDiscoveryDNSParams, authInfo runtime.ClientAuthInfoWriter) (*GetAutoDiscoveryDNSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutoDiscoveryDNSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuto_discoveryDns",
		Method:             "GET",
		PathPattern:        "/api/1.0/auto_discovery/dns/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAutoDiscoveryDNSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutoDiscoveryDNSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuto_discoveryDns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAutoDiscoveryNetworks retrieves all auto discovery jobs for networking devices

  Get Network Jobs
*/
func (a *Client) GetAutoDiscoveryNetworks(params *GetAutoDiscoveryNetworksParams, authInfo runtime.ClientAuthInfoWriter) (*GetAutoDiscoveryNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutoDiscoveryNetworksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuto_discoveryNetworks",
		Method:             "GET",
		PathPattern:        "/api/1.0/auto_discovery/networks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAutoDiscoveryNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutoDiscoveryNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuto_discoveryNetworks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAutoDiscoveryPingsweep retrieves all auto discovery pingsweep jobs

  Get Pingsweep Jobs
*/
func (a *Client) GetAutoDiscoveryPingsweep(params *GetAutoDiscoveryPingsweepParams, authInfo runtime.ClientAuthInfoWriter) (*GetAutoDiscoveryPingsweepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutoDiscoveryPingsweepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuto_discoveryPingsweep",
		Method:             "GET",
		PathPattern:        "/api/1.0/auto_discovery/pingsweep/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAutoDiscoveryPingsweepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutoDiscoveryPingsweepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuto_discoveryPingsweep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAutoDiscoveryBladeDisc adds or update blade autodiscovery job

  Add or update blade autodiscovery job
*/
func (a *Client) PostAutoDiscoveryBladeDisc(params *PostAutoDiscoveryBladeDiscParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryBladeDiscOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAutoDiscoveryBladeDiscParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuto_discoveryBlade_disc",
		Method:             "POST",
		PathPattern:        "/api/1.0/auto_discovery/blade_disc/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAutoDiscoveryBladeDiscReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAutoDiscoveryBladeDiscOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAuto_discoveryBlade_disc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAutoDiscoveryCertificate adds certificate auto discovery

  Add Certificate Auto Discovery job
*/
func (a *Client) PostAutoDiscoveryCertificate(params *PostAutoDiscoveryCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAutoDiscoveryCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuto_discoveryCertificate",
		Method:             "POST",
		PathPattern:        "/api/1.0/auto_discovery/certificate/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAutoDiscoveryCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAutoDiscoveryCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAuto_discoveryCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAutoDiscoveryCloudaccount adds or update cloud autodiscovery job

  Add or update cloud autodiscovery job. Required parameters: <ul><li>name</li><li>cloud_type</li> </ul><p>Required for Amazon: secret_key, account_id<br>Required for Azure: subscription_id<br>Required for CloudStack: url<br>Required for Linode: api_token<br> Required for OpenStack: ip, username, secret_key_id<br>Required for DigitalOcean: token_key
*/
func (a *Client) PostAutoDiscoveryCloudaccount(params *PostAutoDiscoveryCloudaccountParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryCloudaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAutoDiscoveryCloudaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuto_discoveryCloudaccount",
		Method:             "POST",
		PathPattern:        "/api/1.0/auto_discovery/cloudaccount/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAutoDiscoveryCloudaccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAutoDiscoveryCloudaccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAuto_discoveryCloudaccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAutoDiscoveryDNS adds DNS auto discovery

  Add DNS Auto Discovery job
*/
func (a *Client) PostAutoDiscoveryDNS(params *PostAutoDiscoveryDNSParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryDNSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAutoDiscoveryDNSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuto_discoveryDns",
		Method:             "POST",
		PathPattern:        "/api/1.0/auto_discovery/dns/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAutoDiscoveryDNSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAutoDiscoveryDNSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAuto_discoveryDns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAutoDiscoveryIpmi adds IP m i redfish auto discovery

  Add IPMI/Redfish Auto Discovery job
*/
func (a *Client) PostAutoDiscoveryIpmi(params *PostAutoDiscoveryIpmiParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryIpmiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAutoDiscoveryIpmiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuto_discoveryIpmi",
		Method:             "POST",
		PathPattern:        "/api/1.0/auto_discovery/ipmi/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAutoDiscoveryIpmiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAutoDiscoveryIpmiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAuto_discoveryIpmi: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAutoDiscoveryNetworks Add or update network job
*/
func (a *Client) PostAutoDiscoveryNetworks(params *PostAutoDiscoveryNetworksParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAutoDiscoveryNetworksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuto_discoveryNetworks",
		Method:             "POST",
		PathPattern:        "/api/1.0/auto_discovery/networks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAutoDiscoveryNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAutoDiscoveryNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAuto_discoveryNetworks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAutoDiscoveryPingsweep Add or update pingsweep job
*/
func (a *Client) PostAutoDiscoveryPingsweep(params *PostAutoDiscoveryPingsweepParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryPingsweepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAutoDiscoveryPingsweepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuto_discoveryPingsweep",
		Method:             "POST",
		PathPattern:        "/api/1.0/auto_discovery/pingsweep/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAutoDiscoveryPingsweepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAutoDiscoveryPingsweepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAuto_discoveryPingsweep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAutoDiscoveryPowerDisc adds or update power autodiscovery job

  Add or update power autodiscovery job
*/
func (a *Client) PostAutoDiscoveryPowerDisc(params *PostAutoDiscoveryPowerDiscParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryPowerDiscOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAutoDiscoveryPowerDiscParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuto_discoveryPower_disc",
		Method:             "POST",
		PathPattern:        "/api/1.0/auto_discovery/power_disc/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAutoDiscoveryPowerDiscReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAutoDiscoveryPowerDiscOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAuto_discoveryPower_disc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAutoDiscoverySnmpDisc adds or update other s n m p autodiscovery job

  Add or update other SNMP autodiscovery job
*/
func (a *Client) PostAutoDiscoverySnmpDisc(params *PostAutoDiscoverySnmpDiscParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoverySnmpDiscOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAutoDiscoverySnmpDiscParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuto_discoverySnmp_disc",
		Method:             "POST",
		PathPattern:        "/api/1.0/auto_discovery/snmp_disc/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAutoDiscoverySnmpDiscReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAutoDiscoverySnmpDiscOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAuto_discoverySnmp_disc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAutoDiscoveryVserver adds or update v server autodiscovery job

  Add or update vServer autodiscovery job
*/
func (a *Client) PostAutoDiscoveryVserver(params *PostAutoDiscoveryVserverParams, authInfo runtime.ClientAuthInfoWriter) (*PostAutoDiscoveryVserverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAutoDiscoveryVserverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postAuto_discoveryVserver",
		Method:             "POST",
		PathPattern:        "/api/1.0/auto_discovery/vserver/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAutoDiscoveryVserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAutoDiscoveryVserverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postAuto_discoveryVserver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAutoDiscoveryBladeDisc executes blade autodiscovery job

  Execute blade autodiscovery job. Required parameters: name or job_id
*/
func (a *Client) PutAutoDiscoveryBladeDisc(params *PutAutoDiscoveryBladeDiscParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryBladeDiscOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAutoDiscoveryBladeDiscParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuto_discoveryBlade_disc",
		Method:             "PUT",
		PathPattern:        "/api/1.0/auto_discovery/blade_disc/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAutoDiscoveryBladeDiscReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAutoDiscoveryBladeDiscOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAuto_discoveryBlade_disc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAutoDiscoveryCertificate executes certificate job

  Execute Certificate Auto Discovery Job
*/
func (a *Client) PutAutoDiscoveryCertificate(params *PutAutoDiscoveryCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAutoDiscoveryCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuto_discoveryCertificate",
		Method:             "PUT",
		PathPattern:        "/api/1.0/auto_discovery/certificate/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAutoDiscoveryCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAutoDiscoveryCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAuto_discoveryCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAutoDiscoveryCloudaccount executes cloud job

  Execute Cloud job
*/
func (a *Client) PutAutoDiscoveryCloudaccount(params *PutAutoDiscoveryCloudaccountParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryCloudaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAutoDiscoveryCloudaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuto_discoveryCloudaccount",
		Method:             "PUT",
		PathPattern:        "/api/1.0/auto_discovery/cloudaccount/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAutoDiscoveryCloudaccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAutoDiscoveryCloudaccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAuto_discoveryCloudaccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAutoDiscoveryDNS executes DNS job

  Execute DNS Auto Discovery Job
*/
func (a *Client) PutAutoDiscoveryDNS(params *PutAutoDiscoveryDNSParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryDNSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAutoDiscoveryDNSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuto_discoveryDns",
		Method:             "PUT",
		PathPattern:        "/api/1.0/auto_discovery/dns/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAutoDiscoveryDNSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAutoDiscoveryDNSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAuto_discoveryDns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAutoDiscoveryIpmi executes snmp autodiscovery job

  Execute snmp autodiscovery job
*/
func (a *Client) PutAutoDiscoveryIpmi(params *PutAutoDiscoveryIpmiParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryIpmiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAutoDiscoveryIpmiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuto_discoveryIpmi",
		Method:             "PUT",
		PathPattern:        "/api/1.0/auto_discovery/ipmi/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAutoDiscoveryIpmiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAutoDiscoveryIpmiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAuto_discoveryIpmi: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAutoDiscoveryNetworks executes network job

  Execute network job. Required parameters: name or job_id
*/
func (a *Client) PutAutoDiscoveryNetworks(params *PutAutoDiscoveryNetworksParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAutoDiscoveryNetworksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuto_discoveryNetworks",
		Method:             "PUT",
		PathPattern:        "/api/1.0/auto_discovery/networks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAutoDiscoveryNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAutoDiscoveryNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAuto_discoveryNetworks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAutoDiscoveryPingsweep executes pingsweep job

  Execute pingsweep job. Required parameters: name or job_id
*/
func (a *Client) PutAutoDiscoveryPingsweep(params *PutAutoDiscoveryPingsweepParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryPingsweepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAutoDiscoveryPingsweepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuto_discoveryPingsweep",
		Method:             "PUT",
		PathPattern:        "/api/1.0/auto_discovery/pingsweep/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAutoDiscoveryPingsweepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAutoDiscoveryPingsweepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAuto_discoveryPingsweep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAutoDiscoveryPowerDisc executes power autodiscovery job

  Execute power autodiscovery job
*/
func (a *Client) PutAutoDiscoveryPowerDisc(params *PutAutoDiscoveryPowerDiscParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryPowerDiscOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAutoDiscoveryPowerDiscParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuto_discoveryPower_disc",
		Method:             "PUT",
		PathPattern:        "/api/1.0/auto_discovery/power_disc/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAutoDiscoveryPowerDiscReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAutoDiscoveryPowerDiscOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAuto_discoveryPower_disc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAutoDiscoverySnmpDisc executes snmp autodiscovery job

  Execute snmp autodiscovery job
*/
func (a *Client) PutAutoDiscoverySnmpDisc(params *PutAutoDiscoverySnmpDiscParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoverySnmpDiscOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAutoDiscoverySnmpDiscParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuto_discoverySnmp_disc",
		Method:             "PUT",
		PathPattern:        "/api/1.0/auto_discovery/snmp_disc/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAutoDiscoverySnmpDiscReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAutoDiscoverySnmpDiscOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAuto_discoverySnmp_disc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAutoDiscoveryVserver executes vserver job

  Execute VServer job
*/
func (a *Client) PutAutoDiscoveryVserver(params *PutAutoDiscoveryVserverParams, authInfo runtime.ClientAuthInfoWriter) (*PutAutoDiscoveryVserverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAutoDiscoveryVserverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAuto_discoveryVserver",
		Method:             "PUT",
		PathPattern:        "/api/1.0/auto_discovery/vserver/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAutoDiscoveryVserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAutoDiscoveryVserverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putAuto_discoveryVserver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
