// Code generated by go-swagger; DO NOT EDIT.

package operating_systems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostDeviceOsParams creates a new PostDeviceOsParams object
// with the default values initialized.
func NewPostDeviceOsParams() *PostDeviceOsParams {
	var ()
	return &PostDeviceOsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostDeviceOsParamsWithTimeout creates a new PostDeviceOsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostDeviceOsParamsWithTimeout(timeout time.Duration) *PostDeviceOsParams {
	var ()
	return &PostDeviceOsParams{

		timeout: timeout,
	}
}

// NewPostDeviceOsParamsWithContext creates a new PostDeviceOsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostDeviceOsParamsWithContext(ctx context.Context) *PostDeviceOsParams {
	var ()
	return &PostDeviceOsParams{

		Context: ctx,
	}
}

// NewPostDeviceOsParamsWithHTTPClient creates a new PostDeviceOsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostDeviceOsParamsWithHTTPClient(client *http.Client) *PostDeviceOsParams {
	var ()
	return &PostDeviceOsParams{
		HTTPClient: client,
	}
}

/*PostDeviceOsParams contains all the parameters to send to the API endpoint
for the post device os operation typically these are written to a http.Request
*/
type PostDeviceOsParams struct {

	/*CountInLicensing
	  Whether or not to count OS in licensing

	*/
	CountInLicensing *string
	/*DeviceID
	  ID of the device OS is assigned to

	*/
	DeviceID string
	/*DeviceOsID
	  ID of specific operating system

	*/
	DeviceOsID string
	/*LicenseKey
	  OS license key

	*/
	LicenseKey *string
	/*Os
	  Operating system name

	*/
	Os *string
	/*Osver
	  Operating system version name

	*/
	Osver *string
	/*Osverno
	  Operating system version number

	*/
	Osverno *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post device os params
func (o *PostDeviceOsParams) WithTimeout(timeout time.Duration) *PostDeviceOsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post device os params
func (o *PostDeviceOsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post device os params
func (o *PostDeviceOsParams) WithContext(ctx context.Context) *PostDeviceOsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post device os params
func (o *PostDeviceOsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post device os params
func (o *PostDeviceOsParams) WithHTTPClient(client *http.Client) *PostDeviceOsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post device os params
func (o *PostDeviceOsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCountInLicensing adds the countInLicensing to the post device os params
func (o *PostDeviceOsParams) WithCountInLicensing(countInLicensing *string) *PostDeviceOsParams {
	o.SetCountInLicensing(countInLicensing)
	return o
}

// SetCountInLicensing adds the countInLicensing to the post device os params
func (o *PostDeviceOsParams) SetCountInLicensing(countInLicensing *string) {
	o.CountInLicensing = countInLicensing
}

// WithDeviceID adds the deviceID to the post device os params
func (o *PostDeviceOsParams) WithDeviceID(deviceID string) *PostDeviceOsParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the post device os params
func (o *PostDeviceOsParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithDeviceOsID adds the deviceOsID to the post device os params
func (o *PostDeviceOsParams) WithDeviceOsID(deviceOsID string) *PostDeviceOsParams {
	o.SetDeviceOsID(deviceOsID)
	return o
}

// SetDeviceOsID adds the deviceOsId to the post device os params
func (o *PostDeviceOsParams) SetDeviceOsID(deviceOsID string) {
	o.DeviceOsID = deviceOsID
}

// WithLicenseKey adds the licenseKey to the post device os params
func (o *PostDeviceOsParams) WithLicenseKey(licenseKey *string) *PostDeviceOsParams {
	o.SetLicenseKey(licenseKey)
	return o
}

// SetLicenseKey adds the licenseKey to the post device os params
func (o *PostDeviceOsParams) SetLicenseKey(licenseKey *string) {
	o.LicenseKey = licenseKey
}

// WithOs adds the os to the post device os params
func (o *PostDeviceOsParams) WithOs(os *string) *PostDeviceOsParams {
	o.SetOs(os)
	return o
}

// SetOs adds the os to the post device os params
func (o *PostDeviceOsParams) SetOs(os *string) {
	o.Os = os
}

// WithOsver adds the osver to the post device os params
func (o *PostDeviceOsParams) WithOsver(osver *string) *PostDeviceOsParams {
	o.SetOsver(osver)
	return o
}

// SetOsver adds the osver to the post device os params
func (o *PostDeviceOsParams) SetOsver(osver *string) {
	o.Osver = osver
}

// WithOsverno adds the osverno to the post device os params
func (o *PostDeviceOsParams) WithOsverno(osverno *string) *PostDeviceOsParams {
	o.SetOsverno(osverno)
	return o
}

// SetOsverno adds the osverno to the post device os params
func (o *PostDeviceOsParams) SetOsverno(osverno *string) {
	o.Osverno = osverno
}

// WriteToRequest writes these params to a swagger request
func (o *PostDeviceOsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CountInLicensing != nil {

		// form param count_in_licensing
		var frCountInLicensing string
		if o.CountInLicensing != nil {
			frCountInLicensing = *o.CountInLicensing
		}
		fCountInLicensing := frCountInLicensing
		if fCountInLicensing != "" {
			if err := r.SetFormParam("count_in_licensing", fCountInLicensing); err != nil {
				return err
			}
		}

	}

	// form param device_id
	frDeviceID := o.DeviceID
	fDeviceID := frDeviceID
	if fDeviceID != "" {
		if err := r.SetFormParam("device_id", fDeviceID); err != nil {
			return err
		}
	}

	// form param device_os_id
	frDeviceOsID := o.DeviceOsID
	fDeviceOsID := frDeviceOsID
	if fDeviceOsID != "" {
		if err := r.SetFormParam("device_os_id", fDeviceOsID); err != nil {
			return err
		}
	}

	if o.LicenseKey != nil {

		// form param license_key
		var frLicenseKey string
		if o.LicenseKey != nil {
			frLicenseKey = *o.LicenseKey
		}
		fLicenseKey := frLicenseKey
		if fLicenseKey != "" {
			if err := r.SetFormParam("license_key", fLicenseKey); err != nil {
				return err
			}
		}

	}

	if o.Os != nil {

		// form param os
		var frOs string
		if o.Os != nil {
			frOs = *o.Os
		}
		fOs := frOs
		if fOs != "" {
			if err := r.SetFormParam("os", fOs); err != nil {
				return err
			}
		}

	}

	if o.Osver != nil {

		// form param osver
		var frOsver string
		if o.Osver != nil {
			frOsver = *o.Osver
		}
		fOsver := frOsver
		if fOsver != "" {
			if err := r.SetFormParam("osver", fOsver); err != nil {
				return err
			}
		}

	}

	if o.Osverno != nil {

		// form param osverno
		var frOsverno string
		if o.Osverno != nil {
			frOsverno = *o.Osverno
		}
		fOsverno := frOsverno
		if fOsverno != "" {
			if err := r.SetFormParam("osverno", fOsverno); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
