// Code generated by go-swagger; DO NOT EDIT.

package operating_systems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostOperatingSystemsParams creates a new PostOperatingSystemsParams object
// with the default values initialized.
func NewPostOperatingSystemsParams() *PostOperatingSystemsParams {
	var ()
	return &PostOperatingSystemsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostOperatingSystemsParamsWithTimeout creates a new PostOperatingSystemsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostOperatingSystemsParamsWithTimeout(timeout time.Duration) *PostOperatingSystemsParams {
	var ()
	return &PostOperatingSystemsParams{

		timeout: timeout,
	}
}

// NewPostOperatingSystemsParamsWithContext creates a new PostOperatingSystemsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostOperatingSystemsParamsWithContext(ctx context.Context) *PostOperatingSystemsParams {
	var ()
	return &PostOperatingSystemsParams{

		Context: ctx,
	}
}

// NewPostOperatingSystemsParamsWithHTTPClient creates a new PostOperatingSystemsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostOperatingSystemsParamsWithHTTPClient(client *http.Client) *PostOperatingSystemsParams {
	var ()
	return &PostOperatingSystemsParams{
		HTTPClient: client,
	}
}

/*PostOperatingSystemsParams contains all the parameters to send to the API endpoint
for the post operating systems operation typically these are written to a http.Request
*/
type PostOperatingSystemsParams struct {

	/*Category
	  If multitenancy is on, admin groups that have access to this object are specified here, e.g. Prod_East:no,Corp:yes specifies that the admin groups for this object are Prod_East with view only permission and Corp with change permission.

	*/
	Category *string
	/*LicensedCount
	  Number of licensed instances of operating system

	*/
	LicensedCount *string
	/*LicensingModel*/
	LicensingModel *string
	/*Manufacturer
	  name of the hardware/software manufacturer.

	*/
	Manufacturer *string
	/*Name
	  name of the OS

	*/
	Name *string
	/*Notes
	  Any additional notes

	*/
	Notes *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post operating systems params
func (o *PostOperatingSystemsParams) WithTimeout(timeout time.Duration) *PostOperatingSystemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post operating systems params
func (o *PostOperatingSystemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post operating systems params
func (o *PostOperatingSystemsParams) WithContext(ctx context.Context) *PostOperatingSystemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post operating systems params
func (o *PostOperatingSystemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post operating systems params
func (o *PostOperatingSystemsParams) WithHTTPClient(client *http.Client) *PostOperatingSystemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post operating systems params
func (o *PostOperatingSystemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the post operating systems params
func (o *PostOperatingSystemsParams) WithCategory(category *string) *PostOperatingSystemsParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the post operating systems params
func (o *PostOperatingSystemsParams) SetCategory(category *string) {
	o.Category = category
}

// WithLicensedCount adds the licensedCount to the post operating systems params
func (o *PostOperatingSystemsParams) WithLicensedCount(licensedCount *string) *PostOperatingSystemsParams {
	o.SetLicensedCount(licensedCount)
	return o
}

// SetLicensedCount adds the licensedCount to the post operating systems params
func (o *PostOperatingSystemsParams) SetLicensedCount(licensedCount *string) {
	o.LicensedCount = licensedCount
}

// WithLicensingModel adds the licensingModel to the post operating systems params
func (o *PostOperatingSystemsParams) WithLicensingModel(licensingModel *string) *PostOperatingSystemsParams {
	o.SetLicensingModel(licensingModel)
	return o
}

// SetLicensingModel adds the licensingModel to the post operating systems params
func (o *PostOperatingSystemsParams) SetLicensingModel(licensingModel *string) {
	o.LicensingModel = licensingModel
}

// WithManufacturer adds the manufacturer to the post operating systems params
func (o *PostOperatingSystemsParams) WithManufacturer(manufacturer *string) *PostOperatingSystemsParams {
	o.SetManufacturer(manufacturer)
	return o
}

// SetManufacturer adds the manufacturer to the post operating systems params
func (o *PostOperatingSystemsParams) SetManufacturer(manufacturer *string) {
	o.Manufacturer = manufacturer
}

// WithName adds the name to the post operating systems params
func (o *PostOperatingSystemsParams) WithName(name *string) *PostOperatingSystemsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post operating systems params
func (o *PostOperatingSystemsParams) SetName(name *string) {
	o.Name = name
}

// WithNotes adds the notes to the post operating systems params
func (o *PostOperatingSystemsParams) WithNotes(notes *string) *PostOperatingSystemsParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the post operating systems params
func (o *PostOperatingSystemsParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WriteToRequest writes these params to a swagger request
func (o *PostOperatingSystemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// form param category
		var frCategory string
		if o.Category != nil {
			frCategory = *o.Category
		}
		fCategory := frCategory
		if fCategory != "" {
			if err := r.SetFormParam("category", fCategory); err != nil {
				return err
			}
		}

	}

	if o.LicensedCount != nil {

		// query param licensed_count
		var qrLicensedCount string
		if o.LicensedCount != nil {
			qrLicensedCount = *o.LicensedCount
		}
		qLicensedCount := qrLicensedCount
		if qLicensedCount != "" {
			if err := r.SetQueryParam("licensed_count", qLicensedCount); err != nil {
				return err
			}
		}

	}

	if o.LicensingModel != nil {

		// form param licensing_model
		var frLicensingModel string
		if o.LicensingModel != nil {
			frLicensingModel = *o.LicensingModel
		}
		fLicensingModel := frLicensingModel
		if fLicensingModel != "" {
			if err := r.SetFormParam("licensing_model", fLicensingModel); err != nil {
				return err
			}
		}

	}

	if o.Manufacturer != nil {

		// form param manufacturer
		var frManufacturer string
		if o.Manufacturer != nil {
			frManufacturer = *o.Manufacturer
		}
		fManufacturer := frManufacturer
		if fManufacturer != "" {
			if err := r.SetFormParam("manufacturer", fManufacturer); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}

	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
