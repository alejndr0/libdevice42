// Code generated by go-swagger; DO NOT EDIT.

package operating_systems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetDeviceOsParams creates a new GetDeviceOsParams object
// with the default values initialized.
func NewGetDeviceOsParams() *GetDeviceOsParams {
	var ()
	return &GetDeviceOsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeviceOsParamsWithTimeout creates a new GetDeviceOsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeviceOsParamsWithTimeout(timeout time.Duration) *GetDeviceOsParams {
	var ()
	return &GetDeviceOsParams{

		timeout: timeout,
	}
}

// NewGetDeviceOsParamsWithContext creates a new GetDeviceOsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeviceOsParamsWithContext(ctx context.Context) *GetDeviceOsParams {
	var ()
	return &GetDeviceOsParams{

		Context: ctx,
	}
}

// NewGetDeviceOsParamsWithHTTPClient creates a new GetDeviceOsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeviceOsParamsWithHTTPClient(client *http.Client) *GetDeviceOsParams {
	var ()
	return &GetDeviceOsParams{
		HTTPClient: client,
	}
}

/*GetDeviceOsParams contains all the parameters to send to the API endpoint
for the get device os operation typically these are written to a http.Request
*/
type GetDeviceOsParams struct {

	/*Os
	  filter by OS name (added in v8.3.0)

	*/
	Os *string
	/*OsID
	  Operating system ID

	*/
	OsID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get device os params
func (o *GetDeviceOsParams) WithTimeout(timeout time.Duration) *GetDeviceOsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get device os params
func (o *GetDeviceOsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get device os params
func (o *GetDeviceOsParams) WithContext(ctx context.Context) *GetDeviceOsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get device os params
func (o *GetDeviceOsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get device os params
func (o *GetDeviceOsParams) WithHTTPClient(client *http.Client) *GetDeviceOsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get device os params
func (o *GetDeviceOsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOs adds the os to the get device os params
func (o *GetDeviceOsParams) WithOs(os *string) *GetDeviceOsParams {
	o.SetOs(os)
	return o
}

// SetOs adds the os to the get device os params
func (o *GetDeviceOsParams) SetOs(os *string) {
	o.Os = os
}

// WithOsID adds the osID to the get device os params
func (o *GetDeviceOsParams) WithOsID(osID *string) *GetDeviceOsParams {
	o.SetOsID(osID)
	return o
}

// SetOsID adds the osId to the get device os params
func (o *GetDeviceOsParams) SetOsID(osID *string) {
	o.OsID = osID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeviceOsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Os != nil {

		// query param os
		var qrOs string
		if o.Os != nil {
			qrOs = *o.Os
		}
		qOs := qrOs
		if qOs != "" {
			if err := r.SetQueryParam("os", qOs); err != nil {
				return err
			}
		}

	}

	if o.OsID != nil {

		// query param os_id
		var qrOsID string
		if o.OsID != nil {
			qrOsID = *o.OsID
		}
		qOsID := qrOsID
		if qOsID != "" {
			if err := r.SetQueryParam("os_id", qOsID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
