// Code generated by go-swagger; DO NOT EDIT.

package parts_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostPartmodelsParams creates a new PostPartmodelsParams object
// with the default values initialized.
func NewPostPartmodelsParams() *PostPartmodelsParams {
	var ()
	return &PostPartmodelsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostPartmodelsParamsWithTimeout creates a new PostPartmodelsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostPartmodelsParamsWithTimeout(timeout time.Duration) *PostPartmodelsParams {
	var ()
	return &PostPartmodelsParams{

		timeout: timeout,
	}
}

// NewPostPartmodelsParamsWithContext creates a new PostPartmodelsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostPartmodelsParamsWithContext(ctx context.Context) *PostPartmodelsParams {
	var ()
	return &PostPartmodelsParams{

		Context: ctx,
	}
}

// NewPostPartmodelsParamsWithHTTPClient creates a new PostPartmodelsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostPartmodelsParamsWithHTTPClient(client *http.Client) *PostPartmodelsParams {
	var ()
	return &PostPartmodelsParams{
		HTTPClient: client,
	}
}

/*PostPartmodelsParams contains all the parameters to send to the API endpoint
for the post partmodels operation typically these are written to a http.Request
*/
type PostPartmodelsParams struct {

	/*Connectivity
	  New or existing (not used for CPU, RAM, HDD)

	*/
	Connectivity *string
	/*ConnectorType
	  Type of connector, ie rj45

	*/
	ConnectorType *string
	/*Cores
	  number of cores

	*/
	Cores *string
	/*Cpuspeed
	  enter in MHZ, e.g.: 3.5 GHZ use 3500

	*/
	Cpuspeed *string
	/*Description*/
	Description *string
	/*Hddrpm
	  new or existing

	*/
	Hddrpm *string
	/*Hddsize
	  enter in GB, e.g.: 250 GB enter 250

	*/
	Hddsize *string
	/*Hddtype
	  new or existing

	*/
	Hddtype *string
	/*Length
	  Cable length

	*/
	Length *string
	/*Location
	  Location/region of instance deployment

	*/
	Location *string
	/*Manufacturer
	  name of the hardware/software manufacturer.

	*/
	Manufacturer *string
	/*MediaType
	  Type of media

	*/
	MediaType *string
	/*Modelno
	  Model # of the part model

	*/
	Modelno *string
	/*Name
	  name of part model - new or existing

	*/
	Name *string
	/*Notes
	  Any additional notes

	*/
	Notes *string
	/*PartmodelID
	  use for updating existing part model

	*/
	PartmodelID *string
	/*Partno
	  Part # of the part model

	*/
	Partno *string
	/*Ramsize
	  enter in MB, e.g.: 8 GB enter 8192

	*/
	Ramsize *string
	/*Ramspeed
	  e.g.: 1600

	*/
	Ramspeed *string
	/*Ramtype
	  e.g.: DDR3

	*/
	Ramtype *string
	/*Threads
	  number of threads

	*/
	Threads *string
	/*TotalCount*/
	TotalCount *string
	/*Type
	  Part type - new or existing. Must be hdd or harddisk to update HDD model parameters (hddsize, hddtype, etc)

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post partmodels params
func (o *PostPartmodelsParams) WithTimeout(timeout time.Duration) *PostPartmodelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post partmodels params
func (o *PostPartmodelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post partmodels params
func (o *PostPartmodelsParams) WithContext(ctx context.Context) *PostPartmodelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post partmodels params
func (o *PostPartmodelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post partmodels params
func (o *PostPartmodelsParams) WithHTTPClient(client *http.Client) *PostPartmodelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post partmodels params
func (o *PostPartmodelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectivity adds the connectivity to the post partmodels params
func (o *PostPartmodelsParams) WithConnectivity(connectivity *string) *PostPartmodelsParams {
	o.SetConnectivity(connectivity)
	return o
}

// SetConnectivity adds the connectivity to the post partmodels params
func (o *PostPartmodelsParams) SetConnectivity(connectivity *string) {
	o.Connectivity = connectivity
}

// WithConnectorType adds the connectorType to the post partmodels params
func (o *PostPartmodelsParams) WithConnectorType(connectorType *string) *PostPartmodelsParams {
	o.SetConnectorType(connectorType)
	return o
}

// SetConnectorType adds the connectorType to the post partmodels params
func (o *PostPartmodelsParams) SetConnectorType(connectorType *string) {
	o.ConnectorType = connectorType
}

// WithCores adds the cores to the post partmodels params
func (o *PostPartmodelsParams) WithCores(cores *string) *PostPartmodelsParams {
	o.SetCores(cores)
	return o
}

// SetCores adds the cores to the post partmodels params
func (o *PostPartmodelsParams) SetCores(cores *string) {
	o.Cores = cores
}

// WithCpuspeed adds the cpuspeed to the post partmodels params
func (o *PostPartmodelsParams) WithCpuspeed(cpuspeed *string) *PostPartmodelsParams {
	o.SetCpuspeed(cpuspeed)
	return o
}

// SetCpuspeed adds the cpuspeed to the post partmodels params
func (o *PostPartmodelsParams) SetCpuspeed(cpuspeed *string) {
	o.Cpuspeed = cpuspeed
}

// WithDescription adds the description to the post partmodels params
func (o *PostPartmodelsParams) WithDescription(description *string) *PostPartmodelsParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the post partmodels params
func (o *PostPartmodelsParams) SetDescription(description *string) {
	o.Description = description
}

// WithHddrpm adds the hddrpm to the post partmodels params
func (o *PostPartmodelsParams) WithHddrpm(hddrpm *string) *PostPartmodelsParams {
	o.SetHddrpm(hddrpm)
	return o
}

// SetHddrpm adds the hddrpm to the post partmodels params
func (o *PostPartmodelsParams) SetHddrpm(hddrpm *string) {
	o.Hddrpm = hddrpm
}

// WithHddsize adds the hddsize to the post partmodels params
func (o *PostPartmodelsParams) WithHddsize(hddsize *string) *PostPartmodelsParams {
	o.SetHddsize(hddsize)
	return o
}

// SetHddsize adds the hddsize to the post partmodels params
func (o *PostPartmodelsParams) SetHddsize(hddsize *string) {
	o.Hddsize = hddsize
}

// WithHddtype adds the hddtype to the post partmodels params
func (o *PostPartmodelsParams) WithHddtype(hddtype *string) *PostPartmodelsParams {
	o.SetHddtype(hddtype)
	return o
}

// SetHddtype adds the hddtype to the post partmodels params
func (o *PostPartmodelsParams) SetHddtype(hddtype *string) {
	o.Hddtype = hddtype
}

// WithLength adds the length to the post partmodels params
func (o *PostPartmodelsParams) WithLength(length *string) *PostPartmodelsParams {
	o.SetLength(length)
	return o
}

// SetLength adds the length to the post partmodels params
func (o *PostPartmodelsParams) SetLength(length *string) {
	o.Length = length
}

// WithLocation adds the location to the post partmodels params
func (o *PostPartmodelsParams) WithLocation(location *string) *PostPartmodelsParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the post partmodels params
func (o *PostPartmodelsParams) SetLocation(location *string) {
	o.Location = location
}

// WithManufacturer adds the manufacturer to the post partmodels params
func (o *PostPartmodelsParams) WithManufacturer(manufacturer *string) *PostPartmodelsParams {
	o.SetManufacturer(manufacturer)
	return o
}

// SetManufacturer adds the manufacturer to the post partmodels params
func (o *PostPartmodelsParams) SetManufacturer(manufacturer *string) {
	o.Manufacturer = manufacturer
}

// WithMediaType adds the mediaType to the post partmodels params
func (o *PostPartmodelsParams) WithMediaType(mediaType *string) *PostPartmodelsParams {
	o.SetMediaType(mediaType)
	return o
}

// SetMediaType adds the mediaType to the post partmodels params
func (o *PostPartmodelsParams) SetMediaType(mediaType *string) {
	o.MediaType = mediaType
}

// WithModelno adds the modelno to the post partmodels params
func (o *PostPartmodelsParams) WithModelno(modelno *string) *PostPartmodelsParams {
	o.SetModelno(modelno)
	return o
}

// SetModelno adds the modelno to the post partmodels params
func (o *PostPartmodelsParams) SetModelno(modelno *string) {
	o.Modelno = modelno
}

// WithName adds the name to the post partmodels params
func (o *PostPartmodelsParams) WithName(name *string) *PostPartmodelsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post partmodels params
func (o *PostPartmodelsParams) SetName(name *string) {
	o.Name = name
}

// WithNotes adds the notes to the post partmodels params
func (o *PostPartmodelsParams) WithNotes(notes *string) *PostPartmodelsParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the post partmodels params
func (o *PostPartmodelsParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithPartmodelID adds the partmodelID to the post partmodels params
func (o *PostPartmodelsParams) WithPartmodelID(partmodelID *string) *PostPartmodelsParams {
	o.SetPartmodelID(partmodelID)
	return o
}

// SetPartmodelID adds the partmodelId to the post partmodels params
func (o *PostPartmodelsParams) SetPartmodelID(partmodelID *string) {
	o.PartmodelID = partmodelID
}

// WithPartno adds the partno to the post partmodels params
func (o *PostPartmodelsParams) WithPartno(partno *string) *PostPartmodelsParams {
	o.SetPartno(partno)
	return o
}

// SetPartno adds the partno to the post partmodels params
func (o *PostPartmodelsParams) SetPartno(partno *string) {
	o.Partno = partno
}

// WithRamsize adds the ramsize to the post partmodels params
func (o *PostPartmodelsParams) WithRamsize(ramsize *string) *PostPartmodelsParams {
	o.SetRamsize(ramsize)
	return o
}

// SetRamsize adds the ramsize to the post partmodels params
func (o *PostPartmodelsParams) SetRamsize(ramsize *string) {
	o.Ramsize = ramsize
}

// WithRamspeed adds the ramspeed to the post partmodels params
func (o *PostPartmodelsParams) WithRamspeed(ramspeed *string) *PostPartmodelsParams {
	o.SetRamspeed(ramspeed)
	return o
}

// SetRamspeed adds the ramspeed to the post partmodels params
func (o *PostPartmodelsParams) SetRamspeed(ramspeed *string) {
	o.Ramspeed = ramspeed
}

// WithRamtype adds the ramtype to the post partmodels params
func (o *PostPartmodelsParams) WithRamtype(ramtype *string) *PostPartmodelsParams {
	o.SetRamtype(ramtype)
	return o
}

// SetRamtype adds the ramtype to the post partmodels params
func (o *PostPartmodelsParams) SetRamtype(ramtype *string) {
	o.Ramtype = ramtype
}

// WithThreads adds the threads to the post partmodels params
func (o *PostPartmodelsParams) WithThreads(threads *string) *PostPartmodelsParams {
	o.SetThreads(threads)
	return o
}

// SetThreads adds the threads to the post partmodels params
func (o *PostPartmodelsParams) SetThreads(threads *string) {
	o.Threads = threads
}

// WithTotalCount adds the totalCount to the post partmodels params
func (o *PostPartmodelsParams) WithTotalCount(totalCount *string) *PostPartmodelsParams {
	o.SetTotalCount(totalCount)
	return o
}

// SetTotalCount adds the totalCount to the post partmodels params
func (o *PostPartmodelsParams) SetTotalCount(totalCount *string) {
	o.TotalCount = totalCount
}

// WithType adds the typeVar to the post partmodels params
func (o *PostPartmodelsParams) WithType(typeVar *string) *PostPartmodelsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the post partmodels params
func (o *PostPartmodelsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *PostPartmodelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Connectivity != nil {

		// form param connectivity
		var frConnectivity string
		if o.Connectivity != nil {
			frConnectivity = *o.Connectivity
		}
		fConnectivity := frConnectivity
		if fConnectivity != "" {
			if err := r.SetFormParam("connectivity", fConnectivity); err != nil {
				return err
			}
		}

	}

	if o.ConnectorType != nil {

		// form param connector_type
		var frConnectorType string
		if o.ConnectorType != nil {
			frConnectorType = *o.ConnectorType
		}
		fConnectorType := frConnectorType
		if fConnectorType != "" {
			if err := r.SetFormParam("connector_type", fConnectorType); err != nil {
				return err
			}
		}

	}

	if o.Cores != nil {

		// form param cores
		var frCores string
		if o.Cores != nil {
			frCores = *o.Cores
		}
		fCores := frCores
		if fCores != "" {
			if err := r.SetFormParam("cores", fCores); err != nil {
				return err
			}
		}

	}

	if o.Cpuspeed != nil {

		// form param cpuspeed
		var frCpuspeed string
		if o.Cpuspeed != nil {
			frCpuspeed = *o.Cpuspeed
		}
		fCpuspeed := frCpuspeed
		if fCpuspeed != "" {
			if err := r.SetFormParam("cpuspeed", fCpuspeed); err != nil {
				return err
			}
		}

	}

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}

	}

	if o.Hddrpm != nil {

		// form param hddrpm
		var frHddrpm string
		if o.Hddrpm != nil {
			frHddrpm = *o.Hddrpm
		}
		fHddrpm := frHddrpm
		if fHddrpm != "" {
			if err := r.SetFormParam("hddrpm", fHddrpm); err != nil {
				return err
			}
		}

	}

	if o.Hddsize != nil {

		// form param hddsize
		var frHddsize string
		if o.Hddsize != nil {
			frHddsize = *o.Hddsize
		}
		fHddsize := frHddsize
		if fHddsize != "" {
			if err := r.SetFormParam("hddsize", fHddsize); err != nil {
				return err
			}
		}

	}

	if o.Hddtype != nil {

		// form param hddtype
		var frHddtype string
		if o.Hddtype != nil {
			frHddtype = *o.Hddtype
		}
		fHddtype := frHddtype
		if fHddtype != "" {
			if err := r.SetFormParam("hddtype", fHddtype); err != nil {
				return err
			}
		}

	}

	if o.Length != nil {

		// form param length
		var frLength string
		if o.Length != nil {
			frLength = *o.Length
		}
		fLength := frLength
		if fLength != "" {
			if err := r.SetFormParam("length", fLength); err != nil {
				return err
			}
		}

	}

	if o.Location != nil {

		// form param location
		var frLocation string
		if o.Location != nil {
			frLocation = *o.Location
		}
		fLocation := frLocation
		if fLocation != "" {
			if err := r.SetFormParam("location", fLocation); err != nil {
				return err
			}
		}

	}

	if o.Manufacturer != nil {

		// form param manufacturer
		var frManufacturer string
		if o.Manufacturer != nil {
			frManufacturer = *o.Manufacturer
		}
		fManufacturer := frManufacturer
		if fManufacturer != "" {
			if err := r.SetFormParam("manufacturer", fManufacturer); err != nil {
				return err
			}
		}

	}

	if o.MediaType != nil {

		// form param media_type
		var frMediaType string
		if o.MediaType != nil {
			frMediaType = *o.MediaType
		}
		fMediaType := frMediaType
		if fMediaType != "" {
			if err := r.SetFormParam("media_type", fMediaType); err != nil {
				return err
			}
		}

	}

	if o.Modelno != nil {

		// form param modelno
		var frModelno string
		if o.Modelno != nil {
			frModelno = *o.Modelno
		}
		fModelno := frModelno
		if fModelno != "" {
			if err := r.SetFormParam("modelno", fModelno); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}

	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if o.PartmodelID != nil {

		// form param partmodel_id
		var frPartmodelID string
		if o.PartmodelID != nil {
			frPartmodelID = *o.PartmodelID
		}
		fPartmodelID := frPartmodelID
		if fPartmodelID != "" {
			if err := r.SetFormParam("partmodel_id", fPartmodelID); err != nil {
				return err
			}
		}

	}

	if o.Partno != nil {

		// form param partno
		var frPartno string
		if o.Partno != nil {
			frPartno = *o.Partno
		}
		fPartno := frPartno
		if fPartno != "" {
			if err := r.SetFormParam("partno", fPartno); err != nil {
				return err
			}
		}

	}

	if o.Ramsize != nil {

		// form param ramsize
		var frRamsize string
		if o.Ramsize != nil {
			frRamsize = *o.Ramsize
		}
		fRamsize := frRamsize
		if fRamsize != "" {
			if err := r.SetFormParam("ramsize", fRamsize); err != nil {
				return err
			}
		}

	}

	if o.Ramspeed != nil {

		// form param ramspeed
		var frRamspeed string
		if o.Ramspeed != nil {
			frRamspeed = *o.Ramspeed
		}
		fRamspeed := frRamspeed
		if fRamspeed != "" {
			if err := r.SetFormParam("ramspeed", fRamspeed); err != nil {
				return err
			}
		}

	}

	if o.Ramtype != nil {

		// form param ramtype
		var frRamtype string
		if o.Ramtype != nil {
			frRamtype = *o.Ramtype
		}
		fRamtype := frRamtype
		if fRamtype != "" {
			if err := r.SetFormParam("ramtype", fRamtype); err != nil {
				return err
			}
		}

	}

	if o.Threads != nil {

		// form param threads
		var frThreads string
		if o.Threads != nil {
			frThreads = *o.Threads
		}
		fThreads := frThreads
		if fThreads != "" {
			if err := r.SetFormParam("threads", fThreads); err != nil {
				return err
			}
		}

	}

	if o.TotalCount != nil {

		// form param total_count
		var frTotalCount string
		if o.TotalCount != nil {
			frTotalCount = *o.TotalCount
		}
		fTotalCount := frTotalCount
		if fTotalCount != "" {
			if err := r.SetFormParam("total_count", fTotalCount); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// form param type
		var frType string
		if o.Type != nil {
			frType = *o.Type
		}
		fType := frType
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
