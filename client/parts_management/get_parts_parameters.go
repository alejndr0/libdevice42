// Code generated by go-swagger; DO NOT EDIT.

package parts_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPartsParams creates a new GetPartsParams object
// with the default values initialized.
func NewGetPartsParams() *GetPartsParams {
	var ()
	return &GetPartsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPartsParamsWithTimeout creates a new GetPartsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPartsParamsWithTimeout(timeout time.Duration) *GetPartsParams {
	var ()
	return &GetPartsParams{

		timeout: timeout,
	}
}

// NewGetPartsParamsWithContext creates a new GetPartsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPartsParamsWithContext(ctx context.Context) *GetPartsParams {
	var ()
	return &GetPartsParams{

		Context: ctx,
	}
}

// NewGetPartsParamsWithHTTPClient creates a new GetPartsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPartsParamsWithHTTPClient(client *http.Client) *GetPartsParams {
	var ()
	return &GetPartsParams{
		HTTPClient: client,
	}
}

/*GetPartsParams contains all the parameters to send to the API endpoint
for the get parts operation typically these are written to a http.Request
*/
type GetPartsParams struct {

	/*AssetNo
	  filter by asset # (Added in v6.0.0)

	*/
	AssetNo *string
	/*CustomFieldsAnd
	  filter by custom fields, and filter, format of key1:value1,key2:value2

	*/
	CustomFieldsAnd *string
	/*CustomFieldsOr
	  filter by custom fields, or filter, format of key1:value1,key2:value2

	*/
	CustomFieldsOr *string
	/*Device
	  name of the device where part is checked out to

	*/
	Device *string
	/*DeviceID
	  id of the device where part is checked out to

	*/
	DeviceID *string
	/*DeviceSerial
	  serial number of the device, where part is checked out to

	*/
	DeviceSerial *string
	/*LastUpdatedGt
	  last updated greater than date YYYY-MM-DD format

	*/
	LastUpdatedGt *string
	/*LastUpdatedLt
	  last updated less than date YYYY-MM-DD format

	*/
	LastUpdatedLt *string
	/*PartID
	  id of the part (added in v6.3.3)

	*/
	PartID *string
	/*PartmodelID
	  id of the part model (added in v6.3.3)

	*/
	PartmodelID *string
	/*Rack
	  name of the rack where part is checked out to

	*/
	Rack *string
	/*RackID
	  id of the rack where part is checked out to

	*/
	RackID *string
	/*Room
	  name of the room where part is checked out to

	*/
	Room *string
	/*RoomID
	  id of the room where part is checked out to

	*/
	RoomID *string
	/*SerialNo
	  serial number of the part

	*/
	SerialNo *string
	/*Tags
	  filter by tags. comma separated for multiple tags (This is an OR filter, gets all the devices for all comma separated tags)

	*/
	Tags *string
	/*Type
	  type of the partmodel, cpu, mem, hdd for CPU, memory, and Harddisk. For others it must match the type name for part model

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get parts params
func (o *GetPartsParams) WithTimeout(timeout time.Duration) *GetPartsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get parts params
func (o *GetPartsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get parts params
func (o *GetPartsParams) WithContext(ctx context.Context) *GetPartsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get parts params
func (o *GetPartsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get parts params
func (o *GetPartsParams) WithHTTPClient(client *http.Client) *GetPartsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get parts params
func (o *GetPartsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssetNo adds the assetNo to the get parts params
func (o *GetPartsParams) WithAssetNo(assetNo *string) *GetPartsParams {
	o.SetAssetNo(assetNo)
	return o
}

// SetAssetNo adds the assetNo to the get parts params
func (o *GetPartsParams) SetAssetNo(assetNo *string) {
	o.AssetNo = assetNo
}

// WithCustomFieldsAnd adds the customFieldsAnd to the get parts params
func (o *GetPartsParams) WithCustomFieldsAnd(customFieldsAnd *string) *GetPartsParams {
	o.SetCustomFieldsAnd(customFieldsAnd)
	return o
}

// SetCustomFieldsAnd adds the customFieldsAnd to the get parts params
func (o *GetPartsParams) SetCustomFieldsAnd(customFieldsAnd *string) {
	o.CustomFieldsAnd = customFieldsAnd
}

// WithCustomFieldsOr adds the customFieldsOr to the get parts params
func (o *GetPartsParams) WithCustomFieldsOr(customFieldsOr *string) *GetPartsParams {
	o.SetCustomFieldsOr(customFieldsOr)
	return o
}

// SetCustomFieldsOr adds the customFieldsOr to the get parts params
func (o *GetPartsParams) SetCustomFieldsOr(customFieldsOr *string) {
	o.CustomFieldsOr = customFieldsOr
}

// WithDevice adds the device to the get parts params
func (o *GetPartsParams) WithDevice(device *string) *GetPartsParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the get parts params
func (o *GetPartsParams) SetDevice(device *string) {
	o.Device = device
}

// WithDeviceID adds the deviceID to the get parts params
func (o *GetPartsParams) WithDeviceID(deviceID *string) *GetPartsParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get parts params
func (o *GetPartsParams) SetDeviceID(deviceID *string) {
	o.DeviceID = deviceID
}

// WithDeviceSerial adds the deviceSerial to the get parts params
func (o *GetPartsParams) WithDeviceSerial(deviceSerial *string) *GetPartsParams {
	o.SetDeviceSerial(deviceSerial)
	return o
}

// SetDeviceSerial adds the deviceSerial to the get parts params
func (o *GetPartsParams) SetDeviceSerial(deviceSerial *string) {
	o.DeviceSerial = deviceSerial
}

// WithLastUpdatedGt adds the lastUpdatedGt to the get parts params
func (o *GetPartsParams) WithLastUpdatedGt(lastUpdatedGt *string) *GetPartsParams {
	o.SetLastUpdatedGt(lastUpdatedGt)
	return o
}

// SetLastUpdatedGt adds the lastUpdatedGt to the get parts params
func (o *GetPartsParams) SetLastUpdatedGt(lastUpdatedGt *string) {
	o.LastUpdatedGt = lastUpdatedGt
}

// WithLastUpdatedLt adds the lastUpdatedLt to the get parts params
func (o *GetPartsParams) WithLastUpdatedLt(lastUpdatedLt *string) *GetPartsParams {
	o.SetLastUpdatedLt(lastUpdatedLt)
	return o
}

// SetLastUpdatedLt adds the lastUpdatedLt to the get parts params
func (o *GetPartsParams) SetLastUpdatedLt(lastUpdatedLt *string) {
	o.LastUpdatedLt = lastUpdatedLt
}

// WithPartID adds the partID to the get parts params
func (o *GetPartsParams) WithPartID(partID *string) *GetPartsParams {
	o.SetPartID(partID)
	return o
}

// SetPartID adds the partId to the get parts params
func (o *GetPartsParams) SetPartID(partID *string) {
	o.PartID = partID
}

// WithPartmodelID adds the partmodelID to the get parts params
func (o *GetPartsParams) WithPartmodelID(partmodelID *string) *GetPartsParams {
	o.SetPartmodelID(partmodelID)
	return o
}

// SetPartmodelID adds the partmodelId to the get parts params
func (o *GetPartsParams) SetPartmodelID(partmodelID *string) {
	o.PartmodelID = partmodelID
}

// WithRack adds the rack to the get parts params
func (o *GetPartsParams) WithRack(rack *string) *GetPartsParams {
	o.SetRack(rack)
	return o
}

// SetRack adds the rack to the get parts params
func (o *GetPartsParams) SetRack(rack *string) {
	o.Rack = rack
}

// WithRackID adds the rackID to the get parts params
func (o *GetPartsParams) WithRackID(rackID *string) *GetPartsParams {
	o.SetRackID(rackID)
	return o
}

// SetRackID adds the rackId to the get parts params
func (o *GetPartsParams) SetRackID(rackID *string) {
	o.RackID = rackID
}

// WithRoom adds the room to the get parts params
func (o *GetPartsParams) WithRoom(room *string) *GetPartsParams {
	o.SetRoom(room)
	return o
}

// SetRoom adds the room to the get parts params
func (o *GetPartsParams) SetRoom(room *string) {
	o.Room = room
}

// WithRoomID adds the roomID to the get parts params
func (o *GetPartsParams) WithRoomID(roomID *string) *GetPartsParams {
	o.SetRoomID(roomID)
	return o
}

// SetRoomID adds the roomId to the get parts params
func (o *GetPartsParams) SetRoomID(roomID *string) {
	o.RoomID = roomID
}

// WithSerialNo adds the serialNo to the get parts params
func (o *GetPartsParams) WithSerialNo(serialNo *string) *GetPartsParams {
	o.SetSerialNo(serialNo)
	return o
}

// SetSerialNo adds the serialNo to the get parts params
func (o *GetPartsParams) SetSerialNo(serialNo *string) {
	o.SerialNo = serialNo
}

// WithTags adds the tags to the get parts params
func (o *GetPartsParams) WithTags(tags *string) *GetPartsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get parts params
func (o *GetPartsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithType adds the typeVar to the get parts params
func (o *GetPartsParams) WithType(typeVar *string) *GetPartsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get parts params
func (o *GetPartsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetPartsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AssetNo != nil {

		// query param asset_no
		var qrAssetNo string
		if o.AssetNo != nil {
			qrAssetNo = *o.AssetNo
		}
		qAssetNo := qrAssetNo
		if qAssetNo != "" {
			if err := r.SetQueryParam("asset_no", qAssetNo); err != nil {
				return err
			}
		}

	}

	if o.CustomFieldsAnd != nil {

		// query param custom_fields_and
		var qrCustomFieldsAnd string
		if o.CustomFieldsAnd != nil {
			qrCustomFieldsAnd = *o.CustomFieldsAnd
		}
		qCustomFieldsAnd := qrCustomFieldsAnd
		if qCustomFieldsAnd != "" {
			if err := r.SetQueryParam("custom_fields_and", qCustomFieldsAnd); err != nil {
				return err
			}
		}

	}

	if o.CustomFieldsOr != nil {

		// query param custom_fields_or
		var qrCustomFieldsOr string
		if o.CustomFieldsOr != nil {
			qrCustomFieldsOr = *o.CustomFieldsOr
		}
		qCustomFieldsOr := qrCustomFieldsOr
		if qCustomFieldsOr != "" {
			if err := r.SetQueryParam("custom_fields_or", qCustomFieldsOr); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// query param device
		var qrDevice string
		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {
			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}

	}

	if o.DeviceID != nil {

		// query param device_id
		var qrDeviceID string
		if o.DeviceID != nil {
			qrDeviceID = *o.DeviceID
		}
		qDeviceID := qrDeviceID
		if qDeviceID != "" {
			if err := r.SetQueryParam("device_id", qDeviceID); err != nil {
				return err
			}
		}

	}

	if o.DeviceSerial != nil {

		// query param device_serial
		var qrDeviceSerial string
		if o.DeviceSerial != nil {
			qrDeviceSerial = *o.DeviceSerial
		}
		qDeviceSerial := qrDeviceSerial
		if qDeviceSerial != "" {
			if err := r.SetQueryParam("device_serial", qDeviceSerial); err != nil {
				return err
			}
		}

	}

	if o.LastUpdatedGt != nil {

		// query param last_updated_gt
		var qrLastUpdatedGt string
		if o.LastUpdatedGt != nil {
			qrLastUpdatedGt = *o.LastUpdatedGt
		}
		qLastUpdatedGt := qrLastUpdatedGt
		if qLastUpdatedGt != "" {
			if err := r.SetQueryParam("last_updated_gt", qLastUpdatedGt); err != nil {
				return err
			}
		}

	}

	if o.LastUpdatedLt != nil {

		// query param last_updated_lt
		var qrLastUpdatedLt string
		if o.LastUpdatedLt != nil {
			qrLastUpdatedLt = *o.LastUpdatedLt
		}
		qLastUpdatedLt := qrLastUpdatedLt
		if qLastUpdatedLt != "" {
			if err := r.SetQueryParam("last_updated_lt", qLastUpdatedLt); err != nil {
				return err
			}
		}

	}

	if o.PartID != nil {

		// query param part_id
		var qrPartID string
		if o.PartID != nil {
			qrPartID = *o.PartID
		}
		qPartID := qrPartID
		if qPartID != "" {
			if err := r.SetQueryParam("part_id", qPartID); err != nil {
				return err
			}
		}

	}

	if o.PartmodelID != nil {

		// query param partmodel_id
		var qrPartmodelID string
		if o.PartmodelID != nil {
			qrPartmodelID = *o.PartmodelID
		}
		qPartmodelID := qrPartmodelID
		if qPartmodelID != "" {
			if err := r.SetQueryParam("partmodel_id", qPartmodelID); err != nil {
				return err
			}
		}

	}

	if o.Rack != nil {

		// query param rack
		var qrRack string
		if o.Rack != nil {
			qrRack = *o.Rack
		}
		qRack := qrRack
		if qRack != "" {
			if err := r.SetQueryParam("rack", qRack); err != nil {
				return err
			}
		}

	}

	if o.RackID != nil {

		// query param rack_id
		var qrRackID string
		if o.RackID != nil {
			qrRackID = *o.RackID
		}
		qRackID := qrRackID
		if qRackID != "" {
			if err := r.SetQueryParam("rack_id", qRackID); err != nil {
				return err
			}
		}

	}

	if o.Room != nil {

		// query param room
		var qrRoom string
		if o.Room != nil {
			qrRoom = *o.Room
		}
		qRoom := qrRoom
		if qRoom != "" {
			if err := r.SetQueryParam("room", qRoom); err != nil {
				return err
			}
		}

	}

	if o.RoomID != nil {

		// query param room_id
		var qrRoomID string
		if o.RoomID != nil {
			qrRoomID = *o.RoomID
		}
		qRoomID := qrRoomID
		if qRoomID != "" {
			if err := r.SetQueryParam("room_id", qRoomID); err != nil {
				return err
			}
		}

	}

	if o.SerialNo != nil {

		// query param serial_no
		var qrSerialNo string
		if o.SerialNo != nil {
			qrSerialNo = *o.SerialNo
		}
		qSerialNo := qrSerialNo
		if qSerialNo != "" {
			if err := r.SetQueryParam("serial_no", qSerialNo); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// query param tags
		var qrTags string
		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {
			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
