// Code generated by go-swagger; DO NOT EDIT.

package end_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new end users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for end users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteEndUsers(params *DeleteEndUsersParams) (*DeleteEndUsersOK, error)

	GetEndusers(params *GetEndusersParams) (*GetEndusersOK, error)

	PostEndUsers(params *PostEndUsersParams) (*PostEndUsersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteEndUsers deletes end user

  This API is used to delete the end user with the end user id supplied as the required argument.
*/
func (a *Client) DeleteEndUsers(params *DeleteEndUsersParams) (*DeleteEndUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEndUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEndUsers",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/endusers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteEndUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEndUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEndUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEndusers gets all end users

  Get End Users
*/
func (a *Client) GetEndusers(params *GetEndusersParams) (*GetEndusersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEndusersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEndusers",
		Method:             "GET",
		PathPattern:        "/api/1.0/endusers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEndusersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEndusersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEndusers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostEndUsers creates update end users

  Create / Update End Users
*/
func (a *Client) PostEndUsers(params *PostEndUsersParams) (*PostEndUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEndUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postEndUsers",
		Method:             "POST",
		PathPattern:        "/api/1.0/endusers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostEndUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEndUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postEndUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
