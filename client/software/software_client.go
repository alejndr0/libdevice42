// Code generated by go-swagger; DO NOT EDIT.

package software

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new software API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for software API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSoftwareComponent(params *DeleteSoftwareComponentParams) (*DeleteSoftwareComponentOK, error)

	DeleteSoftwareLicenseKeys(params *DeleteSoftwareLicenseKeysParams) (*DeleteSoftwareLicenseKeysOK, error)

	DeleteSoftwareDetail(params *DeleteSoftwareDetailParams) (*DeleteSoftwareDetailOK, error)

	GetSoftwareComponentDetails(params *GetSoftwareComponentDetailsParams) (*GetSoftwareComponentDetailsOK, error)

	GetSoftwareLicenseKeys(params *GetSoftwareLicenseKeysParams) (*GetSoftwareLicenseKeysOK, error)

	GetSoftwareDetails(params *GetSoftwareDetailsParams) (*GetSoftwareDetailsOK, error)

	PostUpdateServicePorts(params *PostUpdateServicePortsParams) (*PostUpdateServicePortsOK, error)

	PostUpdateSoftwareComponents(params *PostUpdateSoftwareComponentsParams) (*PostUpdateSoftwareComponentsOK, error)

	PostUpdateSoftwareLicenses(params *PostUpdateSoftwareLicensesParams) (*PostUpdateSoftwareLicensesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteSoftwareComponent deletes software component

  This API is used to delete the software detail with the software detail id supplied as the required argument. Note: You will only be able to delete the software if the supplied username has the correct permissions.
*/
func (a *Client) DeleteSoftwareComponent(params *DeleteSoftwareComponentParams) (*DeleteSoftwareComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwareComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSoftware_Component",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/software/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSoftwareComponentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSoftwareComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSoftware_Component: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSoftwareLicenseKeys deletes software license keys

  This API is used to delete the software license key with the software license key id supplied as the required argument. Note: You will only be able to delete the software key if the supplied username has the correct permissions.
*/
func (a *Client) DeleteSoftwareLicenseKeys(params *DeleteSoftwareLicenseKeysParams) (*DeleteSoftwareLicenseKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwareLicenseKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSoftware_License_Keys",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/software/license_keys/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSoftwareLicenseKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSoftwareLicenseKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSoftware_License_Keys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSoftwareDetail deletes software detail

  This API is used to delete the software detail with the software detail id supplied as the required argument. Note: You will only be able to delete the software if the supplied username has the correct permissions.
*/
func (a *Client) DeleteSoftwareDetail(params *DeleteSoftwareDetailParams) (*DeleteSoftwareDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwareDetailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSoftware_detail",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/software_details/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSoftwareDetailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSoftwareDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSoftware_detail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSoftwareComponentDetails gets software component details

  You can filter software details by following parameters in the query string
*/
func (a *Client) GetSoftwareComponentDetails(params *GetSoftwareComponentDetailsParams) (*GetSoftwareComponentDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwareComponentDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSoftware_Component_details",
		Method:             "GET",
		PathPattern:        "/api/1.0/software/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSoftwareComponentDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSoftwareComponentDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSoftware_Component_details: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSoftwareLicenseKeys gets software license keys

  You can filter software license keys by following parameters in the query string
*/
func (a *Client) GetSoftwareLicenseKeys(params *GetSoftwareLicenseKeysParams) (*GetSoftwareLicenseKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwareLicenseKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSoftware_License_Keys",
		Method:             "GET",
		PathPattern:        "/api/1.0/software/license_keys/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSoftwareLicenseKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSoftwareLicenseKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSoftware_License_Keys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSoftwareDetails Get Software details
*/
func (a *Client) GetSoftwareDetails(params *GetSoftwareDetailsParams) (*GetSoftwareDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwareDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSoftware_details",
		Method:             "GET",
		PathPattern:        "/api/1.0/software_details/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSoftwareDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSoftwareDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSoftware_details: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUpdateServicePorts Create / Update software details
*/
func (a *Client) PostUpdateServicePorts(params *PostUpdateServicePortsParams) (*PostUpdateServicePortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUpdateServicePortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUpdateService_ports",
		Method:             "POST",
		PathPattern:        "/api/1.0/software_details/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUpdateServicePortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUpdateServicePortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUpdateService_ports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUpdateSoftwareComponents Create / Update Software Components. Required parameters: <ul><li>name <b>OR</b> id</li> <li>licensing_model</li> <li>software_type</li>
*/
func (a *Client) PostUpdateSoftwareComponents(params *PostUpdateSoftwareComponentsParams) (*PostUpdateSoftwareComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUpdateSoftwareComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUpdateSoftware_Components",
		Method:             "POST",
		PathPattern:        "/api/1.0/software/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUpdateSoftwareComponentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUpdateSoftwareComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUpdateSoftware_Components: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUpdateSoftwareLicenses Create / Update Software Licenses. Required parameters: <ul><li>id <b>OR</b> software_id <b>OR</b> software_name</li>
*/
func (a *Client) PostUpdateSoftwareLicenses(params *PostUpdateSoftwareLicensesParams) (*PostUpdateSoftwareLicensesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUpdateSoftwareLicensesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUpdateSoftware_Licenses",
		Method:             "POST",
		PathPattern:        "/api/1.0/software/license_keys/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUpdateSoftwareLicensesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUpdateSoftwareLicensesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUpdateSoftware_Licenses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
