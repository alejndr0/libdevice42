// Code generated by go-swagger; DO NOT EDIT.

package software

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSoftwareDetailsParams creates a new GetSoftwareDetailsParams object
// with the default values initialized.
func NewGetSoftwareDetailsParams() *GetSoftwareDetailsParams {
	var ()
	return &GetSoftwareDetailsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSoftwareDetailsParamsWithTimeout creates a new GetSoftwareDetailsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSoftwareDetailsParamsWithTimeout(timeout time.Duration) *GetSoftwareDetailsParams {
	var ()
	return &GetSoftwareDetailsParams{

		timeout: timeout,
	}
}

// NewGetSoftwareDetailsParamsWithContext creates a new GetSoftwareDetailsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSoftwareDetailsParamsWithContext(ctx context.Context) *GetSoftwareDetailsParams {
	var ()
	return &GetSoftwareDetailsParams{

		Context: ctx,
	}
}

// NewGetSoftwareDetailsParamsWithHTTPClient creates a new GetSoftwareDetailsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSoftwareDetailsParamsWithHTTPClient(client *http.Client) *GetSoftwareDetailsParams {
	var ()
	return &GetSoftwareDetailsParams{
		HTTPClient: client,
	}
}

/*GetSoftwareDetailsParams contains all the parameters to send to the API endpoint
for the get software details operation typically these are written to a http.Request
*/
type GetSoftwareDetailsParams struct {

	/*Device
	  Device name

	*/
	Device *string
	/*DeviceID
	  filter by id of device

	*/
	DeviceID *string
	/*SoftwareDetailID
	  filter by id of the software

	*/
	SoftwareDetailID *string
	/*SoftwareID
	  filter by id of the software

	*/
	SoftwareID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get software details params
func (o *GetSoftwareDetailsParams) WithTimeout(timeout time.Duration) *GetSoftwareDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get software details params
func (o *GetSoftwareDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get software details params
func (o *GetSoftwareDetailsParams) WithContext(ctx context.Context) *GetSoftwareDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get software details params
func (o *GetSoftwareDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get software details params
func (o *GetSoftwareDetailsParams) WithHTTPClient(client *http.Client) *GetSoftwareDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get software details params
func (o *GetSoftwareDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevice adds the device to the get software details params
func (o *GetSoftwareDetailsParams) WithDevice(device *string) *GetSoftwareDetailsParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the get software details params
func (o *GetSoftwareDetailsParams) SetDevice(device *string) {
	o.Device = device
}

// WithDeviceID adds the deviceID to the get software details params
func (o *GetSoftwareDetailsParams) WithDeviceID(deviceID *string) *GetSoftwareDetailsParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get software details params
func (o *GetSoftwareDetailsParams) SetDeviceID(deviceID *string) {
	o.DeviceID = deviceID
}

// WithSoftwareDetailID adds the softwareDetailID to the get software details params
func (o *GetSoftwareDetailsParams) WithSoftwareDetailID(softwareDetailID *string) *GetSoftwareDetailsParams {
	o.SetSoftwareDetailID(softwareDetailID)
	return o
}

// SetSoftwareDetailID adds the softwareDetailId to the get software details params
func (o *GetSoftwareDetailsParams) SetSoftwareDetailID(softwareDetailID *string) {
	o.SoftwareDetailID = softwareDetailID
}

// WithSoftwareID adds the softwareID to the get software details params
func (o *GetSoftwareDetailsParams) WithSoftwareID(softwareID *string) *GetSoftwareDetailsParams {
	o.SetSoftwareID(softwareID)
	return o
}

// SetSoftwareID adds the softwareId to the get software details params
func (o *GetSoftwareDetailsParams) SetSoftwareID(softwareID *string) {
	o.SoftwareID = softwareID
}

// WriteToRequest writes these params to a swagger request
func (o *GetSoftwareDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Device != nil {

		// query param device
		var qrDevice string
		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {
			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}

	}

	if o.DeviceID != nil {

		// query param device_id
		var qrDeviceID string
		if o.DeviceID != nil {
			qrDeviceID = *o.DeviceID
		}
		qDeviceID := qrDeviceID
		if qDeviceID != "" {
			if err := r.SetQueryParam("device_id", qDeviceID); err != nil {
				return err
			}
		}

	}

	if o.SoftwareDetailID != nil {

		// query param software_detail_id
		var qrSoftwareDetailID string
		if o.SoftwareDetailID != nil {
			qrSoftwareDetailID = *o.SoftwareDetailID
		}
		qSoftwareDetailID := qrSoftwareDetailID
		if qSoftwareDetailID != "" {
			if err := r.SetQueryParam("software_detail_id", qSoftwareDetailID); err != nil {
				return err
			}
		}

	}

	if o.SoftwareID != nil {

		// query param software_id
		var qrSoftwareID string
		if o.SoftwareID != nil {
			qrSoftwareID = *o.SoftwareID
		}
		qSoftwareID := qrSoftwareID
		if qSoftwareID != "" {
			if err := r.SetQueryParam("software_id", qSoftwareID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
