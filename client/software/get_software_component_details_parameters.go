// Code generated by go-swagger; DO NOT EDIT.

package software

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSoftwareComponentDetailsParams creates a new GetSoftwareComponentDetailsParams object
// with the default values initialized.
func NewGetSoftwareComponentDetailsParams() *GetSoftwareComponentDetailsParams {
	var ()
	return &GetSoftwareComponentDetailsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSoftwareComponentDetailsParamsWithTimeout creates a new GetSoftwareComponentDetailsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSoftwareComponentDetailsParamsWithTimeout(timeout time.Duration) *GetSoftwareComponentDetailsParams {
	var ()
	return &GetSoftwareComponentDetailsParams{

		timeout: timeout,
	}
}

// NewGetSoftwareComponentDetailsParamsWithContext creates a new GetSoftwareComponentDetailsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSoftwareComponentDetailsParamsWithContext(ctx context.Context) *GetSoftwareComponentDetailsParams {
	var ()
	return &GetSoftwareComponentDetailsParams{

		Context: ctx,
	}
}

// NewGetSoftwareComponentDetailsParamsWithHTTPClient creates a new GetSoftwareComponentDetailsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSoftwareComponentDetailsParamsWithHTTPClient(client *http.Client) *GetSoftwareComponentDetailsParams {
	var ()
	return &GetSoftwareComponentDetailsParams{
		HTTPClient: client,
	}
}

/*GetSoftwareComponentDetailsParams contains all the parameters to send to the API endpoint
for the get software component details operation typically these are written to a http.Request
*/
type GetSoftwareComponentDetailsParams struct {

	/*Category
	  name of the category

	*/
	Category *string
	/*LicensingModel*/
	LicensingModel *string
	/*Name
	  filter by name (Added in v6.0.0)

	*/
	Name *string
	/*SoftwareType
	  Filter by software type (managed, unmanaged, prohibited or ignored)

	*/
	SoftwareType *string
	/*Tags
	  filter by tags. comma separated for multiple tags (This is an OR filter, gets all the devices for all comma separated tags)

	*/
	Tags *string
	/*TagsAnd
	  filter by all the tags, separated by comma. (This is an AND filter and all tags have to match for filter, this was added in v6.3.1)

	*/
	TagsAnd *string
	/*Vendor
	  Software vendor

	*/
	Vendor *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get software component details params
func (o *GetSoftwareComponentDetailsParams) WithTimeout(timeout time.Duration) *GetSoftwareComponentDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get software component details params
func (o *GetSoftwareComponentDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get software component details params
func (o *GetSoftwareComponentDetailsParams) WithContext(ctx context.Context) *GetSoftwareComponentDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get software component details params
func (o *GetSoftwareComponentDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get software component details params
func (o *GetSoftwareComponentDetailsParams) WithHTTPClient(client *http.Client) *GetSoftwareComponentDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get software component details params
func (o *GetSoftwareComponentDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the get software component details params
func (o *GetSoftwareComponentDetailsParams) WithCategory(category *string) *GetSoftwareComponentDetailsParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the get software component details params
func (o *GetSoftwareComponentDetailsParams) SetCategory(category *string) {
	o.Category = category
}

// WithLicensingModel adds the licensingModel to the get software component details params
func (o *GetSoftwareComponentDetailsParams) WithLicensingModel(licensingModel *string) *GetSoftwareComponentDetailsParams {
	o.SetLicensingModel(licensingModel)
	return o
}

// SetLicensingModel adds the licensingModel to the get software component details params
func (o *GetSoftwareComponentDetailsParams) SetLicensingModel(licensingModel *string) {
	o.LicensingModel = licensingModel
}

// WithName adds the name to the get software component details params
func (o *GetSoftwareComponentDetailsParams) WithName(name *string) *GetSoftwareComponentDetailsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get software component details params
func (o *GetSoftwareComponentDetailsParams) SetName(name *string) {
	o.Name = name
}

// WithSoftwareType adds the softwareType to the get software component details params
func (o *GetSoftwareComponentDetailsParams) WithSoftwareType(softwareType *string) *GetSoftwareComponentDetailsParams {
	o.SetSoftwareType(softwareType)
	return o
}

// SetSoftwareType adds the softwareType to the get software component details params
func (o *GetSoftwareComponentDetailsParams) SetSoftwareType(softwareType *string) {
	o.SoftwareType = softwareType
}

// WithTags adds the tags to the get software component details params
func (o *GetSoftwareComponentDetailsParams) WithTags(tags *string) *GetSoftwareComponentDetailsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get software component details params
func (o *GetSoftwareComponentDetailsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithTagsAnd adds the tagsAnd to the get software component details params
func (o *GetSoftwareComponentDetailsParams) WithTagsAnd(tagsAnd *string) *GetSoftwareComponentDetailsParams {
	o.SetTagsAnd(tagsAnd)
	return o
}

// SetTagsAnd adds the tagsAnd to the get software component details params
func (o *GetSoftwareComponentDetailsParams) SetTagsAnd(tagsAnd *string) {
	o.TagsAnd = tagsAnd
}

// WithVendor adds the vendor to the get software component details params
func (o *GetSoftwareComponentDetailsParams) WithVendor(vendor *string) *GetSoftwareComponentDetailsParams {
	o.SetVendor(vendor)
	return o
}

// SetVendor adds the vendor to the get software component details params
func (o *GetSoftwareComponentDetailsParams) SetVendor(vendor *string) {
	o.Vendor = vendor
}

// WriteToRequest writes these params to a swagger request
func (o *GetSoftwareComponentDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// query param category
		var qrCategory string
		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {
			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}

	}

	if o.LicensingModel != nil {

		// form param licensing_model
		var frLicensingModel string
		if o.LicensingModel != nil {
			frLicensingModel = *o.LicensingModel
		}
		fLicensingModel := frLicensingModel
		if fLicensingModel != "" {
			if err := r.SetFormParam("licensing_model", fLicensingModel); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.SoftwareType != nil {

		// query param software_type
		var qrSoftwareType string
		if o.SoftwareType != nil {
			qrSoftwareType = *o.SoftwareType
		}
		qSoftwareType := qrSoftwareType
		if qSoftwareType != "" {
			if err := r.SetQueryParam("software_type", qSoftwareType); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// query param tags
		var qrTags string
		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {
			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}

	}

	if o.TagsAnd != nil {

		// query param tags_and
		var qrTagsAnd string
		if o.TagsAnd != nil {
			qrTagsAnd = *o.TagsAnd
		}
		qTagsAnd := qrTagsAnd
		if qTagsAnd != "" {
			if err := r.SetQueryParam("tags_and", qTagsAnd); err != nil {
				return err
			}
		}

	}

	if o.Vendor != nil {

		// query param vendor
		var qrVendor string
		if o.Vendor != nil {
			qrVendor = *o.Vendor
		}
		qVendor := qrVendor
		if qVendor != "" {
			if err := r.SetQueryParam("vendor", qVendor); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
