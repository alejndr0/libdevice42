// Code generated by go-swagger; DO NOT EDIT.

package software

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSoftwareLicenseKeysParams creates a new GetSoftwareLicenseKeysParams object
// with the default values initialized.
func NewGetSoftwareLicenseKeysParams() *GetSoftwareLicenseKeysParams {
	var ()
	return &GetSoftwareLicenseKeysParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSoftwareLicenseKeysParamsWithTimeout creates a new GetSoftwareLicenseKeysParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSoftwareLicenseKeysParamsWithTimeout(timeout time.Duration) *GetSoftwareLicenseKeysParams {
	var ()
	return &GetSoftwareLicenseKeysParams{

		timeout: timeout,
	}
}

// NewGetSoftwareLicenseKeysParamsWithContext creates a new GetSoftwareLicenseKeysParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSoftwareLicenseKeysParamsWithContext(ctx context.Context) *GetSoftwareLicenseKeysParams {
	var ()
	return &GetSoftwareLicenseKeysParams{

		Context: ctx,
	}
}

// NewGetSoftwareLicenseKeysParamsWithHTTPClient creates a new GetSoftwareLicenseKeysParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSoftwareLicenseKeysParamsWithHTTPClient(client *http.Client) *GetSoftwareLicenseKeysParams {
	var ()
	return &GetSoftwareLicenseKeysParams{
		HTTPClient: client,
	}
}

/*GetSoftwareLicenseKeysParams contains all the parameters to send to the API endpoint
for the get software license keys operation typically these are written to a http.Request
*/
type GetSoftwareLicenseKeysParams struct {

	/*SoftwareID
	  filter by id of the software

	*/
	SoftwareID *string
	/*SoftwareName
	  filter by name of the software component

	*/
	SoftwareName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get software license keys params
func (o *GetSoftwareLicenseKeysParams) WithTimeout(timeout time.Duration) *GetSoftwareLicenseKeysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get software license keys params
func (o *GetSoftwareLicenseKeysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get software license keys params
func (o *GetSoftwareLicenseKeysParams) WithContext(ctx context.Context) *GetSoftwareLicenseKeysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get software license keys params
func (o *GetSoftwareLicenseKeysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get software license keys params
func (o *GetSoftwareLicenseKeysParams) WithHTTPClient(client *http.Client) *GetSoftwareLicenseKeysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get software license keys params
func (o *GetSoftwareLicenseKeysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSoftwareID adds the softwareID to the get software license keys params
func (o *GetSoftwareLicenseKeysParams) WithSoftwareID(softwareID *string) *GetSoftwareLicenseKeysParams {
	o.SetSoftwareID(softwareID)
	return o
}

// SetSoftwareID adds the softwareId to the get software license keys params
func (o *GetSoftwareLicenseKeysParams) SetSoftwareID(softwareID *string) {
	o.SoftwareID = softwareID
}

// WithSoftwareName adds the softwareName to the get software license keys params
func (o *GetSoftwareLicenseKeysParams) WithSoftwareName(softwareName *string) *GetSoftwareLicenseKeysParams {
	o.SetSoftwareName(softwareName)
	return o
}

// SetSoftwareName adds the softwareName to the get software license keys params
func (o *GetSoftwareLicenseKeysParams) SetSoftwareName(softwareName *string) {
	o.SoftwareName = softwareName
}

// WriteToRequest writes these params to a swagger request
func (o *GetSoftwareLicenseKeysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SoftwareID != nil {

		// query param software_id
		var qrSoftwareID string
		if o.SoftwareID != nil {
			qrSoftwareID = *o.SoftwareID
		}
		qSoftwareID := qrSoftwareID
		if qSoftwareID != "" {
			if err := r.SetQueryParam("software_id", qSoftwareID); err != nil {
				return err
			}
		}

	}

	if o.SoftwareName != nil {

		// query param software_name
		var qrSoftwareName string
		if o.SoftwareName != nil {
			qrSoftwareName = *o.SoftwareName
		}
		qSoftwareName := qrSoftwareName
		if qSoftwareName != "" {
			if err := r.SetQueryParam("software_name", qSoftwareName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
