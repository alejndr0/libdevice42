// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostIPAMSwitchportsParams creates a new PostIPAMSwitchportsParams object
// with the default values initialized.
func NewPostIPAMSwitchportsParams() *PostIPAMSwitchportsParams {
	var ()
	return &PostIPAMSwitchportsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostIPAMSwitchportsParamsWithTimeout creates a new PostIPAMSwitchportsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostIPAMSwitchportsParamsWithTimeout(timeout time.Duration) *PostIPAMSwitchportsParams {
	var ()
	return &PostIPAMSwitchportsParams{

		timeout: timeout,
	}
}

// NewPostIPAMSwitchportsParamsWithContext creates a new PostIPAMSwitchportsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostIPAMSwitchportsParamsWithContext(ctx context.Context) *PostIPAMSwitchportsParams {
	var ()
	return &PostIPAMSwitchportsParams{

		Context: ctx,
	}
}

// NewPostIPAMSwitchportsParamsWithHTTPClient creates a new PostIPAMSwitchportsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostIPAMSwitchportsParamsWithHTTPClient(client *http.Client) *PostIPAMSwitchportsParams {
	var ()
	return &PostIPAMSwitchportsParams{
		HTTPClient: client,
	}
}

/*PostIPAMSwitchportsParams contains all the parameters to send to the API endpoint
for the post IP a m switchports operation typically these are written to a http.Request
*/
type PostIPAMSwitchportsParams struct {

	/*Count
	  Whether to include the port in total count or not.

	*/
	Count *string
	/*Description*/
	Description *string
	/*Device
	  name of the direcly connected device (Added in v5.8.2) (used to connect remote port for legacy support)

	*/
	Device *string
	/*Device2
	  name of the device2 that port belongs to. (added in v5.8.1)

	*/
	Device2 *string
	/*Hwaddress
	  mac or wwn. Required if no port.

	*/
	Hwaddress *string
	/*Label*/
	Label *string
	/*Module
	  name of the blade that port belongs to. Blade device must be part of the switch. (added in v5.8.1)

	*/
	Module *string
	/*Mtu
	  add value for mtu

	*/
	Mtu *string
	/*Name
	  add name of port

	*/
	Name *string
	/*NewPort
	  rename exisiting port

	*/
	NewPort *string
	/*ParentPort*/
	ParentPort *string
	/*ParentPortDevice*/
	ParentPortDevice *string
	/*Port
	  child is optional assuming you have a parent created. Required if no hwaddress

	*/
	Port *string
	/*RemoteDevice
	  Name of the switch for remote connected switch port.

	*/
	RemoteDevice *string
	/*RemotePort
	  Name of the port for remote connected switch port.

	*/
	RemotePort *string
	/*RemotePortClear
	  if set to yes, will clear the remote port

	*/
	RemotePortClear *string
	/*RemotePortID
	  ID of the remote connected switch port.

	*/
	RemotePortID *string
	/*SlavePorts
	  comma separated port names

	*/
	SlavePorts *string
	/*Speed
	  update port speed

	*/
	Speed *string
	/*Switch
	  d42 will look for existing port and switch combination and if it exists, will update that port.

	*/
	Switch *string
	/*Tags
	  add or update tags to a switchport

	*/
	Tags *string
	/*TagsRemove
	  remove tags from a switchport

	*/
	TagsRemove *string
	/*Type
	  Must exist in device42 (add via UI)

	*/
	Type *string
	/*Up
	  = yes for up. = no for down.

	*/
	Up *string
	/*UpAdmin
	  Whether port is administratively up or down. = yes for up. = no for down.

	*/
	UpAdmin *string
	/*VlanID
	  ID of the vlan

	*/
	VlanID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithTimeout(timeout time.Duration) *PostIPAMSwitchportsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithContext(ctx context.Context) *PostIPAMSwitchportsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithHTTPClient(client *http.Client) *PostIPAMSwitchportsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithCount(count *string) *PostIPAMSwitchportsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetCount(count *string) {
	o.Count = count
}

// WithDescription adds the description to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithDescription(description *string) *PostIPAMSwitchportsParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetDescription(description *string) {
	o.Description = description
}

// WithDevice adds the device to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithDevice(device *string) *PostIPAMSwitchportsParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetDevice(device *string) {
	o.Device = device
}

// WithDevice2 adds the device2 to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithDevice2(device2 *string) *PostIPAMSwitchportsParams {
	o.SetDevice2(device2)
	return o
}

// SetDevice2 adds the device2 to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetDevice2(device2 *string) {
	o.Device2 = device2
}

// WithHwaddress adds the hwaddress to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithHwaddress(hwaddress *string) *PostIPAMSwitchportsParams {
	o.SetHwaddress(hwaddress)
	return o
}

// SetHwaddress adds the hwaddress to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetHwaddress(hwaddress *string) {
	o.Hwaddress = hwaddress
}

// WithLabel adds the label to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithLabel(label *string) *PostIPAMSwitchportsParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetLabel(label *string) {
	o.Label = label
}

// WithModule adds the module to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithModule(module *string) *PostIPAMSwitchportsParams {
	o.SetModule(module)
	return o
}

// SetModule adds the module to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetModule(module *string) {
	o.Module = module
}

// WithMtu adds the mtu to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithMtu(mtu *string) *PostIPAMSwitchportsParams {
	o.SetMtu(mtu)
	return o
}

// SetMtu adds the mtu to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetMtu(mtu *string) {
	o.Mtu = mtu
}

// WithName adds the name to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithName(name *string) *PostIPAMSwitchportsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetName(name *string) {
	o.Name = name
}

// WithNewPort adds the newPort to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithNewPort(newPort *string) *PostIPAMSwitchportsParams {
	o.SetNewPort(newPort)
	return o
}

// SetNewPort adds the newPort to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetNewPort(newPort *string) {
	o.NewPort = newPort
}

// WithParentPort adds the parentPort to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithParentPort(parentPort *string) *PostIPAMSwitchportsParams {
	o.SetParentPort(parentPort)
	return o
}

// SetParentPort adds the parentPort to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetParentPort(parentPort *string) {
	o.ParentPort = parentPort
}

// WithParentPortDevice adds the parentPortDevice to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithParentPortDevice(parentPortDevice *string) *PostIPAMSwitchportsParams {
	o.SetParentPortDevice(parentPortDevice)
	return o
}

// SetParentPortDevice adds the parentPortDevice to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetParentPortDevice(parentPortDevice *string) {
	o.ParentPortDevice = parentPortDevice
}

// WithPort adds the port to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithPort(port *string) *PostIPAMSwitchportsParams {
	o.SetPort(port)
	return o
}

// SetPort adds the port to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetPort(port *string) {
	o.Port = port
}

// WithRemoteDevice adds the remoteDevice to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithRemoteDevice(remoteDevice *string) *PostIPAMSwitchportsParams {
	o.SetRemoteDevice(remoteDevice)
	return o
}

// SetRemoteDevice adds the remoteDevice to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetRemoteDevice(remoteDevice *string) {
	o.RemoteDevice = remoteDevice
}

// WithRemotePort adds the remotePort to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithRemotePort(remotePort *string) *PostIPAMSwitchportsParams {
	o.SetRemotePort(remotePort)
	return o
}

// SetRemotePort adds the remotePort to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetRemotePort(remotePort *string) {
	o.RemotePort = remotePort
}

// WithRemotePortClear adds the remotePortClear to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithRemotePortClear(remotePortClear *string) *PostIPAMSwitchportsParams {
	o.SetRemotePortClear(remotePortClear)
	return o
}

// SetRemotePortClear adds the remotePortClear to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetRemotePortClear(remotePortClear *string) {
	o.RemotePortClear = remotePortClear
}

// WithRemotePortID adds the remotePortID to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithRemotePortID(remotePortID *string) *PostIPAMSwitchportsParams {
	o.SetRemotePortID(remotePortID)
	return o
}

// SetRemotePortID adds the remotePortId to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetRemotePortID(remotePortID *string) {
	o.RemotePortID = remotePortID
}

// WithSlavePorts adds the slavePorts to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithSlavePorts(slavePorts *string) *PostIPAMSwitchportsParams {
	o.SetSlavePorts(slavePorts)
	return o
}

// SetSlavePorts adds the slavePorts to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetSlavePorts(slavePorts *string) {
	o.SlavePorts = slavePorts
}

// WithSpeed adds the speed to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithSpeed(speed *string) *PostIPAMSwitchportsParams {
	o.SetSpeed(speed)
	return o
}

// SetSpeed adds the speed to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetSpeed(speed *string) {
	o.Speed = speed
}

// WithSwitch adds the switchVar to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithSwitch(switchVar *string) *PostIPAMSwitchportsParams {
	o.SetSwitch(switchVar)
	return o
}

// SetSwitch adds the switch to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetSwitch(switchVar *string) {
	o.Switch = switchVar
}

// WithTags adds the tags to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithTags(tags *string) *PostIPAMSwitchportsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithTagsRemove adds the tagsRemove to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithTagsRemove(tagsRemove *string) *PostIPAMSwitchportsParams {
	o.SetTagsRemove(tagsRemove)
	return o
}

// SetTagsRemove adds the tagsRemove to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetTagsRemove(tagsRemove *string) {
	o.TagsRemove = tagsRemove
}

// WithType adds the typeVar to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithType(typeVar *string) *PostIPAMSwitchportsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUp adds the up to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithUp(up *string) *PostIPAMSwitchportsParams {
	o.SetUp(up)
	return o
}

// SetUp adds the up to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetUp(up *string) {
	o.Up = up
}

// WithUpAdmin adds the upAdmin to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithUpAdmin(upAdmin *string) *PostIPAMSwitchportsParams {
	o.SetUpAdmin(upAdmin)
	return o
}

// SetUpAdmin adds the upAdmin to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetUpAdmin(upAdmin *string) {
	o.UpAdmin = upAdmin
}

// WithVlanID adds the vlanID to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) WithVlanID(vlanID *string) *PostIPAMSwitchportsParams {
	o.SetVlanID(vlanID)
	return o
}

// SetVlanID adds the vlanId to the post IP a m switchports params
func (o *PostIPAMSwitchportsParams) SetVlanID(vlanID *string) {
	o.VlanID = vlanID
}

// WriteToRequest writes these params to a swagger request
func (o *PostIPAMSwitchportsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// form param count
		var frCount string
		if o.Count != nil {
			frCount = *o.Count
		}
		fCount := frCount
		if fCount != "" {
			if err := r.SetFormParam("count", fCount); err != nil {
				return err
			}
		}

	}

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// form param device
		var frDevice string
		if o.Device != nil {
			frDevice = *o.Device
		}
		fDevice := frDevice
		if fDevice != "" {
			if err := r.SetFormParam("device", fDevice); err != nil {
				return err
			}
		}

	}

	if o.Device2 != nil {

		// form param device2
		var frDevice2 string
		if o.Device2 != nil {
			frDevice2 = *o.Device2
		}
		fDevice2 := frDevice2
		if fDevice2 != "" {
			if err := r.SetFormParam("device2", fDevice2); err != nil {
				return err
			}
		}

	}

	if o.Hwaddress != nil {

		// form param hwaddress
		var frHwaddress string
		if o.Hwaddress != nil {
			frHwaddress = *o.Hwaddress
		}
		fHwaddress := frHwaddress
		if fHwaddress != "" {
			if err := r.SetFormParam("hwaddress", fHwaddress); err != nil {
				return err
			}
		}

	}

	if o.Label != nil {

		// form param label
		var frLabel string
		if o.Label != nil {
			frLabel = *o.Label
		}
		fLabel := frLabel
		if fLabel != "" {
			if err := r.SetFormParam("label", fLabel); err != nil {
				return err
			}
		}

	}

	if o.Module != nil {

		// form param module
		var frModule string
		if o.Module != nil {
			frModule = *o.Module
		}
		fModule := frModule
		if fModule != "" {
			if err := r.SetFormParam("module", fModule); err != nil {
				return err
			}
		}

	}

	if o.Mtu != nil {

		// form param mtu
		var frMtu string
		if o.Mtu != nil {
			frMtu = *o.Mtu
		}
		fMtu := frMtu
		if fMtu != "" {
			if err := r.SetFormParam("mtu", fMtu); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}

	}

	if o.NewPort != nil {

		// form param new_port
		var frNewPort string
		if o.NewPort != nil {
			frNewPort = *o.NewPort
		}
		fNewPort := frNewPort
		if fNewPort != "" {
			if err := r.SetFormParam("new_port", fNewPort); err != nil {
				return err
			}
		}

	}

	if o.ParentPort != nil {

		// form param parent_port
		var frParentPort string
		if o.ParentPort != nil {
			frParentPort = *o.ParentPort
		}
		fParentPort := frParentPort
		if fParentPort != "" {
			if err := r.SetFormParam("parent_port", fParentPort); err != nil {
				return err
			}
		}

	}

	if o.ParentPortDevice != nil {

		// form param parent_port_device
		var frParentPortDevice string
		if o.ParentPortDevice != nil {
			frParentPortDevice = *o.ParentPortDevice
		}
		fParentPortDevice := frParentPortDevice
		if fParentPortDevice != "" {
			if err := r.SetFormParam("parent_port_device", fParentPortDevice); err != nil {
				return err
			}
		}

	}

	if o.Port != nil {

		// form param port
		var frPort string
		if o.Port != nil {
			frPort = *o.Port
		}
		fPort := frPort
		if fPort != "" {
			if err := r.SetFormParam("port", fPort); err != nil {
				return err
			}
		}

	}

	if o.RemoteDevice != nil {

		// form param remote_device
		var frRemoteDevice string
		if o.RemoteDevice != nil {
			frRemoteDevice = *o.RemoteDevice
		}
		fRemoteDevice := frRemoteDevice
		if fRemoteDevice != "" {
			if err := r.SetFormParam("remote_device", fRemoteDevice); err != nil {
				return err
			}
		}

	}

	if o.RemotePort != nil {

		// form param remote_port
		var frRemotePort string
		if o.RemotePort != nil {
			frRemotePort = *o.RemotePort
		}
		fRemotePort := frRemotePort
		if fRemotePort != "" {
			if err := r.SetFormParam("remote_port", fRemotePort); err != nil {
				return err
			}
		}

	}

	if o.RemotePortClear != nil {

		// form param remote_port_clear
		var frRemotePortClear string
		if o.RemotePortClear != nil {
			frRemotePortClear = *o.RemotePortClear
		}
		fRemotePortClear := frRemotePortClear
		if fRemotePortClear != "" {
			if err := r.SetFormParam("remote_port_clear", fRemotePortClear); err != nil {
				return err
			}
		}

	}

	if o.RemotePortID != nil {

		// form param remote_port_id
		var frRemotePortID string
		if o.RemotePortID != nil {
			frRemotePortID = *o.RemotePortID
		}
		fRemotePortID := frRemotePortID
		if fRemotePortID != "" {
			if err := r.SetFormParam("remote_port_id", fRemotePortID); err != nil {
				return err
			}
		}

	}

	if o.SlavePorts != nil {

		// form param slave_ports
		var frSlavePorts string
		if o.SlavePorts != nil {
			frSlavePorts = *o.SlavePorts
		}
		fSlavePorts := frSlavePorts
		if fSlavePorts != "" {
			if err := r.SetFormParam("slave_ports", fSlavePorts); err != nil {
				return err
			}
		}

	}

	if o.Speed != nil {

		// form param speed
		var frSpeed string
		if o.Speed != nil {
			frSpeed = *o.Speed
		}
		fSpeed := frSpeed
		if fSpeed != "" {
			if err := r.SetFormParam("speed", fSpeed); err != nil {
				return err
			}
		}

	}

	if o.Switch != nil {

		// form param switch
		var frSwitch string
		if o.Switch != nil {
			frSwitch = *o.Switch
		}
		fSwitch := frSwitch
		if fSwitch != "" {
			if err := r.SetFormParam("switch", fSwitch); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// form param tags
		var frTags string
		if o.Tags != nil {
			frTags = *o.Tags
		}
		fTags := frTags
		if fTags != "" {
			if err := r.SetFormParam("tags", fTags); err != nil {
				return err
			}
		}

	}

	if o.TagsRemove != nil {

		// form param tags_remove
		var frTagsRemove string
		if o.TagsRemove != nil {
			frTagsRemove = *o.TagsRemove
		}
		fTagsRemove := frTagsRemove
		if fTagsRemove != "" {
			if err := r.SetFormParam("tags_remove", fTagsRemove); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// form param type
		var frType string
		if o.Type != nil {
			frType = *o.Type
		}
		fType := frType
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}

	}

	if o.Up != nil {

		// form param up
		var frUp string
		if o.Up != nil {
			frUp = *o.Up
		}
		fUp := frUp
		if fUp != "" {
			if err := r.SetFormParam("up", fUp); err != nil {
				return err
			}
		}

	}

	if o.UpAdmin != nil {

		// form param up_admin
		var frUpAdmin string
		if o.UpAdmin != nil {
			frUpAdmin = *o.UpAdmin
		}
		fUpAdmin := frUpAdmin
		if fUpAdmin != "" {
			if err := r.SetFormParam("up_admin", fUpAdmin); err != nil {
				return err
			}
		}

	}

	if o.VlanID != nil {

		// form param vlan_id
		var frVlanID string
		if o.VlanID != nil {
			frVlanID = *o.VlanID
		}
		fVlanID := frVlanID
		if fVlanID != "" {
			if err := r.SetFormParam("vlan_id", fVlanID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
