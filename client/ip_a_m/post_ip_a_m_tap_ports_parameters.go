// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostIPAMTapPortsParams creates a new PostIPAMTapPortsParams object
// with the default values initialized.
func NewPostIPAMTapPortsParams() *PostIPAMTapPortsParams {
	var ()
	return &PostIPAMTapPortsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostIPAMTapPortsParamsWithTimeout creates a new PostIPAMTapPortsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostIPAMTapPortsParamsWithTimeout(timeout time.Duration) *PostIPAMTapPortsParams {
	var ()
	return &PostIPAMTapPortsParams{

		timeout: timeout,
	}
}

// NewPostIPAMTapPortsParamsWithContext creates a new PostIPAMTapPortsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostIPAMTapPortsParamsWithContext(ctx context.Context) *PostIPAMTapPortsParams {
	var ()
	return &PostIPAMTapPortsParams{

		Context: ctx,
	}
}

// NewPostIPAMTapPortsParamsWithHTTPClient creates a new PostIPAMTapPortsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostIPAMTapPortsParamsWithHTTPClient(client *http.Client) *PostIPAMTapPortsParams {
	var ()
	return &PostIPAMTapPortsParams{
		HTTPClient: client,
	}
}

/*PostIPAMTapPortsParams contains all the parameters to send to the API endpoint
for the post IP a m tap ports operation typically these are written to a http.Request
*/
type PostIPAMTapPortsParams struct {

	/*ID
	  Tap Port ID

	*/
	ID *string
	/*Label*/
	Label *string
	/*MonitorDirection
	  Direction - to, both (optional, only for PortCap: Monitor)

	*/
	MonitorDirection *string
	/*MonitorPort1ID*/
	MonitorPort1ID *string
	/*MonitorPort2ID*/
	MonitorPort2ID *string
	/*MorrorPort*/
	MorrorPort *string
	/*Name*/
	Name *string
	/*NetportID*/
	NetportID *string
	/*PatchPanelPortID*/
	PatchPanelPortID *string
	/*PortCapability
	  Port Capability - Device, Monitor

	*/
	PortCapability *string
	/*PortToFromID*/
	PortToFromID *string
	/*PortType
	  Port Type name - RJ45, RJ11, Fiber SC, Fiber FC

	*/
	PortType *string
	/*PortTypeID*/
	PortTypeID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithTimeout(timeout time.Duration) *PostIPAMTapPortsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithContext(ctx context.Context) *PostIPAMTapPortsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithHTTPClient(client *http.Client) *PostIPAMTapPortsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithID(id *string) *PostIPAMTapPortsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetID(id *string) {
	o.ID = id
}

// WithLabel adds the label to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithLabel(label *string) *PostIPAMTapPortsParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetLabel(label *string) {
	o.Label = label
}

// WithMonitorDirection adds the monitorDirection to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithMonitorDirection(monitorDirection *string) *PostIPAMTapPortsParams {
	o.SetMonitorDirection(monitorDirection)
	return o
}

// SetMonitorDirection adds the monitorDirection to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetMonitorDirection(monitorDirection *string) {
	o.MonitorDirection = monitorDirection
}

// WithMonitorPort1ID adds the monitorPort1ID to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithMonitorPort1ID(monitorPort1ID *string) *PostIPAMTapPortsParams {
	o.SetMonitorPort1ID(monitorPort1ID)
	return o
}

// SetMonitorPort1ID adds the monitorPort1Id to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetMonitorPort1ID(monitorPort1ID *string) {
	o.MonitorPort1ID = monitorPort1ID
}

// WithMonitorPort2ID adds the monitorPort2ID to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithMonitorPort2ID(monitorPort2ID *string) *PostIPAMTapPortsParams {
	o.SetMonitorPort2ID(monitorPort2ID)
	return o
}

// SetMonitorPort2ID adds the monitorPort2Id to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetMonitorPort2ID(monitorPort2ID *string) {
	o.MonitorPort2ID = monitorPort2ID
}

// WithMorrorPort adds the morrorPort to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithMorrorPort(morrorPort *string) *PostIPAMTapPortsParams {
	o.SetMorrorPort(morrorPort)
	return o
}

// SetMorrorPort adds the morrorPort to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetMorrorPort(morrorPort *string) {
	o.MorrorPort = morrorPort
}

// WithName adds the name to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithName(name *string) *PostIPAMTapPortsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetName(name *string) {
	o.Name = name
}

// WithNetportID adds the netportID to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithNetportID(netportID *string) *PostIPAMTapPortsParams {
	o.SetNetportID(netportID)
	return o
}

// SetNetportID adds the netportId to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetNetportID(netportID *string) {
	o.NetportID = netportID
}

// WithPatchPanelPortID adds the patchPanelPortID to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithPatchPanelPortID(patchPanelPortID *string) *PostIPAMTapPortsParams {
	o.SetPatchPanelPortID(patchPanelPortID)
	return o
}

// SetPatchPanelPortID adds the patchPanelPortId to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetPatchPanelPortID(patchPanelPortID *string) {
	o.PatchPanelPortID = patchPanelPortID
}

// WithPortCapability adds the portCapability to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithPortCapability(portCapability *string) *PostIPAMTapPortsParams {
	o.SetPortCapability(portCapability)
	return o
}

// SetPortCapability adds the portCapability to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetPortCapability(portCapability *string) {
	o.PortCapability = portCapability
}

// WithPortToFromID adds the portToFromID to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithPortToFromID(portToFromID *string) *PostIPAMTapPortsParams {
	o.SetPortToFromID(portToFromID)
	return o
}

// SetPortToFromID adds the portToFromId to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetPortToFromID(portToFromID *string) {
	o.PortToFromID = portToFromID
}

// WithPortType adds the portType to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithPortType(portType *string) *PostIPAMTapPortsParams {
	o.SetPortType(portType)
	return o
}

// SetPortType adds the portType to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetPortType(portType *string) {
	o.PortType = portType
}

// WithPortTypeID adds the portTypeID to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) WithPortTypeID(portTypeID *string) *PostIPAMTapPortsParams {
	o.SetPortTypeID(portTypeID)
	return o
}

// SetPortTypeID adds the portTypeId to the post IP a m tap ports params
func (o *PostIPAMTapPortsParams) SetPortTypeID(portTypeID *string) {
	o.PortTypeID = portTypeID
}

// WriteToRequest writes these params to a swagger request
func (o *PostIPAMTapPortsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ID != nil {

		// form param id
		var frID string
		if o.ID != nil {
			frID = *o.ID
		}
		fID := frID
		if fID != "" {
			if err := r.SetFormParam("id", fID); err != nil {
				return err
			}
		}

	}

	if o.Label != nil {

		// form param label
		var frLabel string
		if o.Label != nil {
			frLabel = *o.Label
		}
		fLabel := frLabel
		if fLabel != "" {
			if err := r.SetFormParam("label", fLabel); err != nil {
				return err
			}
		}

	}

	if o.MonitorDirection != nil {

		// form param monitor_direction
		var frMonitorDirection string
		if o.MonitorDirection != nil {
			frMonitorDirection = *o.MonitorDirection
		}
		fMonitorDirection := frMonitorDirection
		if fMonitorDirection != "" {
			if err := r.SetFormParam("monitor_direction", fMonitorDirection); err != nil {
				return err
			}
		}

	}

	if o.MonitorPort1ID != nil {

		// form param monitor_port_1_id
		var frMonitorPort1ID string
		if o.MonitorPort1ID != nil {
			frMonitorPort1ID = *o.MonitorPort1ID
		}
		fMonitorPort1ID := frMonitorPort1ID
		if fMonitorPort1ID != "" {
			if err := r.SetFormParam("monitor_port_1_id", fMonitorPort1ID); err != nil {
				return err
			}
		}

	}

	if o.MonitorPort2ID != nil {

		// form param monitor_port_2_id
		var frMonitorPort2ID string
		if o.MonitorPort2ID != nil {
			frMonitorPort2ID = *o.MonitorPort2ID
		}
		fMonitorPort2ID := frMonitorPort2ID
		if fMonitorPort2ID != "" {
			if err := r.SetFormParam("monitor_port_2_id", fMonitorPort2ID); err != nil {
				return err
			}
		}

	}

	if o.MorrorPort != nil {

		// form param morror_port
		var frMorrorPort string
		if o.MorrorPort != nil {
			frMorrorPort = *o.MorrorPort
		}
		fMorrorPort := frMorrorPort
		if fMorrorPort != "" {
			if err := r.SetFormParam("morror_port", fMorrorPort); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}

	}

	if o.NetportID != nil {

		// form param netport_id
		var frNetportID string
		if o.NetportID != nil {
			frNetportID = *o.NetportID
		}
		fNetportID := frNetportID
		if fNetportID != "" {
			if err := r.SetFormParam("netport_id", fNetportID); err != nil {
				return err
			}
		}

	}

	if o.PatchPanelPortID != nil {

		// form param patch_panel_port_id
		var frPatchPanelPortID string
		if o.PatchPanelPortID != nil {
			frPatchPanelPortID = *o.PatchPanelPortID
		}
		fPatchPanelPortID := frPatchPanelPortID
		if fPatchPanelPortID != "" {
			if err := r.SetFormParam("patch_panel_port_id", fPatchPanelPortID); err != nil {
				return err
			}
		}

	}

	if o.PortCapability != nil {

		// form param port_capability
		var frPortCapability string
		if o.PortCapability != nil {
			frPortCapability = *o.PortCapability
		}
		fPortCapability := frPortCapability
		if fPortCapability != "" {
			if err := r.SetFormParam("port_capability", fPortCapability); err != nil {
				return err
			}
		}

	}

	if o.PortToFromID != nil {

		// form param port_to_from_id
		var frPortToFromID string
		if o.PortToFromID != nil {
			frPortToFromID = *o.PortToFromID
		}
		fPortToFromID := frPortToFromID
		if fPortToFromID != "" {
			if err := r.SetFormParam("port_to_from_id", fPortToFromID); err != nil {
				return err
			}
		}

	}

	if o.PortType != nil {

		// form param port_type
		var frPortType string
		if o.PortType != nil {
			frPortType = *o.PortType
		}
		fPortType := frPortType
		if fPortType != "" {
			if err := r.SetFormParam("port_type", fPortType); err != nil {
				return err
			}
		}

	}

	if o.PortTypeID != nil {

		// form param port_type_id
		var frPortTypeID string
		if o.PortTypeID != nil {
			frPortTypeID = *o.PortTypeID
		}
		fPortTypeID := frPortTypeID
		if fPortTypeID != "" {
			if err := r.SetFormParam("port_type_id", fPortTypeID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
