// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetIPAMSearchParams creates a new GetIPAMSearchParams object
// with the default values initialized.
func NewGetIPAMSearchParams() *GetIPAMSearchParams {
	var ()
	return &GetIPAMSearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIPAMSearchParamsWithTimeout creates a new GetIPAMSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIPAMSearchParamsWithTimeout(timeout time.Duration) *GetIPAMSearchParams {
	var ()
	return &GetIPAMSearchParams{

		timeout: timeout,
	}
}

// NewGetIPAMSearchParamsWithContext creates a new GetIPAMSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIPAMSearchParamsWithContext(ctx context.Context) *GetIPAMSearchParams {
	var ()
	return &GetIPAMSearchParams{

		Context: ctx,
	}
}

// NewGetIPAMSearchParamsWithHTTPClient creates a new GetIPAMSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIPAMSearchParamsWithHTTPClient(client *http.Client) *GetIPAMSearchParams {
	var ()
	return &GetIPAMSearchParams{
		HTTPClient: client,
	}
}

/*GetIPAMSearchParams contains all the parameters to send to the API endpoint
for the get IP a m search operation typically these are written to a http.Request
*/
type GetIPAMSearchParams struct {

	/*Query
	  enter “ip”

	*/
	Query string
	/*String
	  the IP address to search for

	*/
	String string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get IP a m search params
func (o *GetIPAMSearchParams) WithTimeout(timeout time.Duration) *GetIPAMSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get IP a m search params
func (o *GetIPAMSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get IP a m search params
func (o *GetIPAMSearchParams) WithContext(ctx context.Context) *GetIPAMSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get IP a m search params
func (o *GetIPAMSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get IP a m search params
func (o *GetIPAMSearchParams) WithHTTPClient(client *http.Client) *GetIPAMSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get IP a m search params
func (o *GetIPAMSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQuery adds the query to the get IP a m search params
func (o *GetIPAMSearchParams) WithQuery(query string) *GetIPAMSearchParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get IP a m search params
func (o *GetIPAMSearchParams) SetQuery(query string) {
	o.Query = query
}

// WithString adds the string to the get IP a m search params
func (o *GetIPAMSearchParams) WithString(string string) *GetIPAMSearchParams {
	o.SetString(string)
	return o
}

// SetString adds the string to the get IP a m search params
func (o *GetIPAMSearchParams) SetString(string string) {
	o.String = string
}

// WriteToRequest writes these params to a swagger request
func (o *GetIPAMSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param query
	qrQuery := o.Query
	qQuery := qrQuery
	if qQuery != "" {
		if err := r.SetQueryParam("query", qQuery); err != nil {
			return err
		}
	}

	// query param string
	qrString := o.String
	qString := qrString
	if qString != "" {
		if err := r.SetQueryParam("string", qString); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
