// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetIPAMSwitchportsParams creates a new GetIPAMSwitchportsParams object
// with the default values initialized.
func NewGetIPAMSwitchportsParams() *GetIPAMSwitchportsParams {
	var ()
	return &GetIPAMSwitchportsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIPAMSwitchportsParamsWithTimeout creates a new GetIPAMSwitchportsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIPAMSwitchportsParamsWithTimeout(timeout time.Duration) *GetIPAMSwitchportsParams {
	var ()
	return &GetIPAMSwitchportsParams{

		timeout: timeout,
	}
}

// NewGetIPAMSwitchportsParamsWithContext creates a new GetIPAMSwitchportsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIPAMSwitchportsParamsWithContext(ctx context.Context) *GetIPAMSwitchportsParams {
	var ()
	return &GetIPAMSwitchportsParams{

		Context: ctx,
	}
}

// NewGetIPAMSwitchportsParamsWithHTTPClient creates a new GetIPAMSwitchportsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIPAMSwitchportsParamsWithHTTPClient(client *http.Client) *GetIPAMSwitchportsParams {
	var ()
	return &GetIPAMSwitchportsParams{
		HTTPClient: client,
	}
}

/*GetIPAMSwitchportsParams contains all the parameters to send to the API endpoint
for the get IP a m switchports operation typically these are written to a http.Request
*/
type GetIPAMSwitchportsParams struct {

	/*FirstAddedGt
	  first added greater date YYYY-MM-DD format

	*/
	FirstAddedGt *string
	/*FirstAddedLt
	  first added less than date YYYY-MM-DD format

	*/
	FirstAddedLt *string
	/*IncludeCols
	  do not return all columns just the ones specified. For example, ?include_cols=name, device_id, rack will only result in name, device_id, and rack included in the output. The following column names can be part of include_cols: name, device_id, rack, name, device_id, serial_no, asset_no, uuid, notes, in_service, service_level, type, id, last_updated, tags, customer_id, customer, hw_model, hw_size, manufacturer, hw_depth, rack, start_at, rack_id, orientation, row, room, building, blade_host_name, blade_host_id, slot_number, virtual_host_name, location, device_sub_type, os, osarch, osver, osverno, custom_fields, device_purchase_line_items, device_external_links, ip_addresses, mac_addresses, cpucount, cpucore, cpuspeed, ram, hddcount, hddsize, hddraid, hddraid_type, hdd_details, pdu_mapping_url,modules, vms, devices, aliases, xpos, ucs_manager

	*/
	IncludeCols *string
	/*LastUpdatedGt
	  last updated greater than date YYYY-MM-DD format

	*/
	LastUpdatedGt *string
	/*LastUpdatedLt
	  last updated less than date YYYY-MM-DD format

	*/
	LastUpdatedLt *string
	/*Switch2ID
	  ID of the 2nd network device port is on

	*/
	Switch2ID *string
	/*SwitchID
	  ID of the network device port is on

	*/
	SwitchID *string
	/*Tags
	  filter by tags. comma separated for multiple tags (This is an OR filter, gets all the devices for all comma separated tags)

	*/
	Tags *string
	/*TagsAnd
	  filter by all the tags, separated by comma. (This is an AND filter and all tags have to match for filter, this was added in v6.3.1)

	*/
	TagsAnd *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) WithTimeout(timeout time.Duration) *GetIPAMSwitchportsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) WithContext(ctx context.Context) *GetIPAMSwitchportsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) WithHTTPClient(client *http.Client) *GetIPAMSwitchportsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFirstAddedGt adds the firstAddedGt to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) WithFirstAddedGt(firstAddedGt *string) *GetIPAMSwitchportsParams {
	o.SetFirstAddedGt(firstAddedGt)
	return o
}

// SetFirstAddedGt adds the firstAddedGt to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) SetFirstAddedGt(firstAddedGt *string) {
	o.FirstAddedGt = firstAddedGt
}

// WithFirstAddedLt adds the firstAddedLt to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) WithFirstAddedLt(firstAddedLt *string) *GetIPAMSwitchportsParams {
	o.SetFirstAddedLt(firstAddedLt)
	return o
}

// SetFirstAddedLt adds the firstAddedLt to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) SetFirstAddedLt(firstAddedLt *string) {
	o.FirstAddedLt = firstAddedLt
}

// WithIncludeCols adds the includeCols to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) WithIncludeCols(includeCols *string) *GetIPAMSwitchportsParams {
	o.SetIncludeCols(includeCols)
	return o
}

// SetIncludeCols adds the includeCols to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) SetIncludeCols(includeCols *string) {
	o.IncludeCols = includeCols
}

// WithLastUpdatedGt adds the lastUpdatedGt to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) WithLastUpdatedGt(lastUpdatedGt *string) *GetIPAMSwitchportsParams {
	o.SetLastUpdatedGt(lastUpdatedGt)
	return o
}

// SetLastUpdatedGt adds the lastUpdatedGt to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) SetLastUpdatedGt(lastUpdatedGt *string) {
	o.LastUpdatedGt = lastUpdatedGt
}

// WithLastUpdatedLt adds the lastUpdatedLt to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) WithLastUpdatedLt(lastUpdatedLt *string) *GetIPAMSwitchportsParams {
	o.SetLastUpdatedLt(lastUpdatedLt)
	return o
}

// SetLastUpdatedLt adds the lastUpdatedLt to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) SetLastUpdatedLt(lastUpdatedLt *string) {
	o.LastUpdatedLt = lastUpdatedLt
}

// WithSwitch2ID adds the switch2ID to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) WithSwitch2ID(switch2ID *string) *GetIPAMSwitchportsParams {
	o.SetSwitch2ID(switch2ID)
	return o
}

// SetSwitch2ID adds the switch2Id to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) SetSwitch2ID(switch2ID *string) {
	o.Switch2ID = switch2ID
}

// WithSwitchID adds the switchID to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) WithSwitchID(switchID *string) *GetIPAMSwitchportsParams {
	o.SetSwitchID(switchID)
	return o
}

// SetSwitchID adds the switchId to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) SetSwitchID(switchID *string) {
	o.SwitchID = switchID
}

// WithTags adds the tags to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) WithTags(tags *string) *GetIPAMSwitchportsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithTagsAnd adds the tagsAnd to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) WithTagsAnd(tagsAnd *string) *GetIPAMSwitchportsParams {
	o.SetTagsAnd(tagsAnd)
	return o
}

// SetTagsAnd adds the tagsAnd to the get IP a m switchports params
func (o *GetIPAMSwitchportsParams) SetTagsAnd(tagsAnd *string) {
	o.TagsAnd = tagsAnd
}

// WriteToRequest writes these params to a swagger request
func (o *GetIPAMSwitchportsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FirstAddedGt != nil {

		// query param first_added_gt
		var qrFirstAddedGt string
		if o.FirstAddedGt != nil {
			qrFirstAddedGt = *o.FirstAddedGt
		}
		qFirstAddedGt := qrFirstAddedGt
		if qFirstAddedGt != "" {
			if err := r.SetQueryParam("first_added_gt", qFirstAddedGt); err != nil {
				return err
			}
		}

	}

	if o.FirstAddedLt != nil {

		// query param first_added_lt
		var qrFirstAddedLt string
		if o.FirstAddedLt != nil {
			qrFirstAddedLt = *o.FirstAddedLt
		}
		qFirstAddedLt := qrFirstAddedLt
		if qFirstAddedLt != "" {
			if err := r.SetQueryParam("first_added_lt", qFirstAddedLt); err != nil {
				return err
			}
		}

	}

	if o.IncludeCols != nil {

		// query param include_cols
		var qrIncludeCols string
		if o.IncludeCols != nil {
			qrIncludeCols = *o.IncludeCols
		}
		qIncludeCols := qrIncludeCols
		if qIncludeCols != "" {
			if err := r.SetQueryParam("include_cols", qIncludeCols); err != nil {
				return err
			}
		}

	}

	if o.LastUpdatedGt != nil {

		// query param last_updated_gt
		var qrLastUpdatedGt string
		if o.LastUpdatedGt != nil {
			qrLastUpdatedGt = *o.LastUpdatedGt
		}
		qLastUpdatedGt := qrLastUpdatedGt
		if qLastUpdatedGt != "" {
			if err := r.SetQueryParam("last_updated_gt", qLastUpdatedGt); err != nil {
				return err
			}
		}

	}

	if o.LastUpdatedLt != nil {

		// query param last_updated_lt
		var qrLastUpdatedLt string
		if o.LastUpdatedLt != nil {
			qrLastUpdatedLt = *o.LastUpdatedLt
		}
		qLastUpdatedLt := qrLastUpdatedLt
		if qLastUpdatedLt != "" {
			if err := r.SetQueryParam("last_updated_lt", qLastUpdatedLt); err != nil {
				return err
			}
		}

	}

	if o.Switch2ID != nil {

		// query param switch2_id
		var qrSwitch2ID string
		if o.Switch2ID != nil {
			qrSwitch2ID = *o.Switch2ID
		}
		qSwitch2ID := qrSwitch2ID
		if qSwitch2ID != "" {
			if err := r.SetQueryParam("switch2_id", qSwitch2ID); err != nil {
				return err
			}
		}

	}

	if o.SwitchID != nil {

		// query param switch_id
		var qrSwitchID string
		if o.SwitchID != nil {
			qrSwitchID = *o.SwitchID
		}
		qSwitchID := qrSwitchID
		if qSwitchID != "" {
			if err := r.SetQueryParam("switch_id", qSwitchID); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// query param tags
		var qrTags string
		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {
			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}

	}

	if o.TagsAnd != nil {

		// query param tags_and
		var qrTagsAnd string
		if o.TagsAnd != nil {
			qrTagsAnd = *o.TagsAnd
		}
		qTagsAnd := qrTagsAnd
		if qTagsAnd != "" {
			if err := r.SetQueryParam("tags_and", qTagsAnd); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
