// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostIPAMDNSRecordsParams creates a new PostIPAMDNSRecordsParams object
// with the default values initialized.
func NewPostIPAMDNSRecordsParams() *PostIPAMDNSRecordsParams {
	var ()
	return &PostIPAMDNSRecordsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostIPAMDNSRecordsParamsWithTimeout creates a new PostIPAMDNSRecordsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostIPAMDNSRecordsParamsWithTimeout(timeout time.Duration) *PostIPAMDNSRecordsParams {
	var ()
	return &PostIPAMDNSRecordsParams{

		timeout: timeout,
	}
}

// NewPostIPAMDNSRecordsParamsWithContext creates a new PostIPAMDNSRecordsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostIPAMDNSRecordsParamsWithContext(ctx context.Context) *PostIPAMDNSRecordsParams {
	var ()
	return &PostIPAMDNSRecordsParams{

		Context: ctx,
	}
}

// NewPostIPAMDNSRecordsParamsWithHTTPClient creates a new PostIPAMDNSRecordsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostIPAMDNSRecordsParamsWithHTTPClient(client *http.Client) *PostIPAMDNSRecordsParams {
	var ()
	return &PostIPAMDNSRecordsParams{
		HTTPClient: client,
	}
}

/*PostIPAMDNSRecordsParams contains all the parameters to send to the API endpoint
for the post IP a m dns records operation typically these are written to a http.Request
*/
type PostIPAMDNSRecordsParams struct {

	/*Content
	  Content (e.g. IP address for type A)

	*/
	Content *string
	/*Domain
	  name of the domain

	*/
	Domain string
	/*Name
	  Record value (e.g. www) use @ for blank.

	*/
	Name *string
	/*Nameserver
	  If you have overlapping domain names, this is required to differentiate between the two

	*/
	Nameserver *string
	/*Prio
	  Priority for MX record.

	*/
	Prio *string
	/*Tags
	  set tags for record

	*/
	Tags *string
	/*TagsRemove
	  remove tags for record

	*/
	TagsRemove *string
	/*TTL
	  TTL Value

	*/
	TTL *string
	/*Type
	  Type of record

	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) WithTimeout(timeout time.Duration) *PostIPAMDNSRecordsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) WithContext(ctx context.Context) *PostIPAMDNSRecordsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) WithHTTPClient(client *http.Client) *PostIPAMDNSRecordsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContent adds the content to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) WithContent(content *string) *PostIPAMDNSRecordsParams {
	o.SetContent(content)
	return o
}

// SetContent adds the content to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) SetContent(content *string) {
	o.Content = content
}

// WithDomain adds the domain to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) WithDomain(domain string) *PostIPAMDNSRecordsParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) SetDomain(domain string) {
	o.Domain = domain
}

// WithName adds the name to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) WithName(name *string) *PostIPAMDNSRecordsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) SetName(name *string) {
	o.Name = name
}

// WithNameserver adds the nameserver to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) WithNameserver(nameserver *string) *PostIPAMDNSRecordsParams {
	o.SetNameserver(nameserver)
	return o
}

// SetNameserver adds the nameserver to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) SetNameserver(nameserver *string) {
	o.Nameserver = nameserver
}

// WithPrio adds the prio to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) WithPrio(prio *string) *PostIPAMDNSRecordsParams {
	o.SetPrio(prio)
	return o
}

// SetPrio adds the prio to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) SetPrio(prio *string) {
	o.Prio = prio
}

// WithTags adds the tags to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) WithTags(tags *string) *PostIPAMDNSRecordsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithTagsRemove adds the tagsRemove to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) WithTagsRemove(tagsRemove *string) *PostIPAMDNSRecordsParams {
	o.SetTagsRemove(tagsRemove)
	return o
}

// SetTagsRemove adds the tagsRemove to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) SetTagsRemove(tagsRemove *string) {
	o.TagsRemove = tagsRemove
}

// WithTTL adds the ttl to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) WithTTL(ttl *string) *PostIPAMDNSRecordsParams {
	o.SetTTL(ttl)
	return o
}

// SetTTL adds the ttl to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) SetTTL(ttl *string) {
	o.TTL = ttl
}

// WithType adds the typeVar to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) WithType(typeVar string) *PostIPAMDNSRecordsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the post IP a m dns records params
func (o *PostIPAMDNSRecordsParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *PostIPAMDNSRecordsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Content != nil {

		// form param content
		var frContent string
		if o.Content != nil {
			frContent = *o.Content
		}
		fContent := frContent
		if fContent != "" {
			if err := r.SetFormParam("content", fContent); err != nil {
				return err
			}
		}

	}

	// form param domain
	frDomain := o.Domain
	fDomain := frDomain
	if fDomain != "" {
		if err := r.SetFormParam("domain", fDomain); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}

	}

	if o.Nameserver != nil {

		// form param nameserver
		var frNameserver string
		if o.Nameserver != nil {
			frNameserver = *o.Nameserver
		}
		fNameserver := frNameserver
		if fNameserver != "" {
			if err := r.SetFormParam("nameserver", fNameserver); err != nil {
				return err
			}
		}

	}

	if o.Prio != nil {

		// form param prio
		var frPrio string
		if o.Prio != nil {
			frPrio = *o.Prio
		}
		fPrio := frPrio
		if fPrio != "" {
			if err := r.SetFormParam("prio", fPrio); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// form param tags
		var frTags string
		if o.Tags != nil {
			frTags = *o.Tags
		}
		fTags := frTags
		if fTags != "" {
			if err := r.SetFormParam("tags", fTags); err != nil {
				return err
			}
		}

	}

	if o.TagsRemove != nil {

		// form param tags_remove
		var frTagsRemove string
		if o.TagsRemove != nil {
			frTagsRemove = *o.TagsRemove
		}
		fTagsRemove := frTagsRemove
		if fTagsRemove != "" {
			if err := r.SetFormParam("tags_remove", fTagsRemove); err != nil {
				return err
			}
		}

	}

	if o.TTL != nil {

		// form param ttl
		var frTTL string
		if o.TTL != nil {
			frTTL = *o.TTL
		}
		fTTL := frTTL
		if fTTL != "" {
			if err := r.SetFormParam("ttl", fTTL); err != nil {
				return err
			}
		}

	}

	// form param type
	frType := o.Type
	fType := frType
	if fType != "" {
		if err := r.SetFormParam("type", fType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
