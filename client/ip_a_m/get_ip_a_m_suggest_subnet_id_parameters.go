// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetIPAMSuggestSubnetIDParams creates a new GetIPAMSuggestSubnetIDParams object
// with the default values initialized.
func NewGetIPAMSuggestSubnetIDParams() *GetIPAMSuggestSubnetIDParams {
	var ()
	return &GetIPAMSuggestSubnetIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIPAMSuggestSubnetIDParamsWithTimeout creates a new GetIPAMSuggestSubnetIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIPAMSuggestSubnetIDParamsWithTimeout(timeout time.Duration) *GetIPAMSuggestSubnetIDParams {
	var ()
	return &GetIPAMSuggestSubnetIDParams{

		timeout: timeout,
	}
}

// NewGetIPAMSuggestSubnetIDParamsWithContext creates a new GetIPAMSuggestSubnetIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIPAMSuggestSubnetIDParamsWithContext(ctx context.Context) *GetIPAMSuggestSubnetIDParams {
	var ()
	return &GetIPAMSuggestSubnetIDParams{

		Context: ctx,
	}
}

// NewGetIPAMSuggestSubnetIDParamsWithHTTPClient creates a new GetIPAMSuggestSubnetIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIPAMSuggestSubnetIDParamsWithHTTPClient(client *http.Client) *GetIPAMSuggestSubnetIDParams {
	var ()
	return &GetIPAMSuggestSubnetIDParams{
		HTTPClient: client,
	}
}

/*GetIPAMSuggestSubnetIDParams contains all the parameters to send to the API endpoint
for the get IP a m suggest subnet Id operation typically these are written to a http.Request
*/
type GetIPAMSuggestSubnetIDParams struct {

	/*ID
	  ID of the parent subnet

	*/
	ID int64
	/*IfParentAllocated
	  yes or no

	*/
	IfParentAllocated *string
	/*IfParentAssigned
	  yes or no

	*/
	IfParentAssigned *string
	/*MaskBits
	  mask bits (added in v7.2.0)

	*/
	MaskBits string
	/*Name
	  filter by name (Added in v6.0.0)

	*/
	Name *string
	/*Subnet
	  name of the subnet

	*/
	Subnet *string
	/*SubnetID
	  ID of the subnet (added in v7.2.0)

	*/
	SubnetID *string
	/*VrfGroup
	  VRF group name

	*/
	VrfGroup *string
	/*VrfGroupID
	  ID of the VRF group

	*/
	VrfGroupID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) WithTimeout(timeout time.Duration) *GetIPAMSuggestSubnetIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) WithContext(ctx context.Context) *GetIPAMSuggestSubnetIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) WithHTTPClient(client *http.Client) *GetIPAMSuggestSubnetIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) WithID(id int64) *GetIPAMSuggestSubnetIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) SetID(id int64) {
	o.ID = id
}

// WithIfParentAllocated adds the ifParentAllocated to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) WithIfParentAllocated(ifParentAllocated *string) *GetIPAMSuggestSubnetIDParams {
	o.SetIfParentAllocated(ifParentAllocated)
	return o
}

// SetIfParentAllocated adds the ifParentAllocated to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) SetIfParentAllocated(ifParentAllocated *string) {
	o.IfParentAllocated = ifParentAllocated
}

// WithIfParentAssigned adds the ifParentAssigned to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) WithIfParentAssigned(ifParentAssigned *string) *GetIPAMSuggestSubnetIDParams {
	o.SetIfParentAssigned(ifParentAssigned)
	return o
}

// SetIfParentAssigned adds the ifParentAssigned to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) SetIfParentAssigned(ifParentAssigned *string) {
	o.IfParentAssigned = ifParentAssigned
}

// WithMaskBits adds the maskBits to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) WithMaskBits(maskBits string) *GetIPAMSuggestSubnetIDParams {
	o.SetMaskBits(maskBits)
	return o
}

// SetMaskBits adds the maskBits to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) SetMaskBits(maskBits string) {
	o.MaskBits = maskBits
}

// WithName adds the name to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) WithName(name *string) *GetIPAMSuggestSubnetIDParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) SetName(name *string) {
	o.Name = name
}

// WithSubnet adds the subnet to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) WithSubnet(subnet *string) *GetIPAMSuggestSubnetIDParams {
	o.SetSubnet(subnet)
	return o
}

// SetSubnet adds the subnet to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) SetSubnet(subnet *string) {
	o.Subnet = subnet
}

// WithSubnetID adds the subnetID to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) WithSubnetID(subnetID *string) *GetIPAMSuggestSubnetIDParams {
	o.SetSubnetID(subnetID)
	return o
}

// SetSubnetID adds the subnetId to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) SetSubnetID(subnetID *string) {
	o.SubnetID = subnetID
}

// WithVrfGroup adds the vrfGroup to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) WithVrfGroup(vrfGroup *string) *GetIPAMSuggestSubnetIDParams {
	o.SetVrfGroup(vrfGroup)
	return o
}

// SetVrfGroup adds the vrfGroup to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) SetVrfGroup(vrfGroup *string) {
	o.VrfGroup = vrfGroup
}

// WithVrfGroupID adds the vrfGroupID to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) WithVrfGroupID(vrfGroupID *string) *GetIPAMSuggestSubnetIDParams {
	o.SetVrfGroupID(vrfGroupID)
	return o
}

// SetVrfGroupID adds the vrfGroupId to the get IP a m suggest subnet Id params
func (o *GetIPAMSuggestSubnetIDParams) SetVrfGroupID(vrfGroupID *string) {
	o.VrfGroupID = vrfGroupID
}

// WriteToRequest writes these params to a swagger request
func (o *GetIPAMSuggestSubnetIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.IfParentAllocated != nil {

		// query param if_parent_allocated
		var qrIfParentAllocated string
		if o.IfParentAllocated != nil {
			qrIfParentAllocated = *o.IfParentAllocated
		}
		qIfParentAllocated := qrIfParentAllocated
		if qIfParentAllocated != "" {
			if err := r.SetQueryParam("if_parent_allocated", qIfParentAllocated); err != nil {
				return err
			}
		}

	}

	if o.IfParentAssigned != nil {

		// query param if_parent_assigned
		var qrIfParentAssigned string
		if o.IfParentAssigned != nil {
			qrIfParentAssigned = *o.IfParentAssigned
		}
		qIfParentAssigned := qrIfParentAssigned
		if qIfParentAssigned != "" {
			if err := r.SetQueryParam("if_parent_assigned", qIfParentAssigned); err != nil {
				return err
			}
		}

	}

	// query param mask_bits
	qrMaskBits := o.MaskBits
	qMaskBits := qrMaskBits
	if qMaskBits != "" {
		if err := r.SetQueryParam("mask_bits", qMaskBits); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Subnet != nil {

		// query param subnet
		var qrSubnet string
		if o.Subnet != nil {
			qrSubnet = *o.Subnet
		}
		qSubnet := qrSubnet
		if qSubnet != "" {
			if err := r.SetQueryParam("subnet", qSubnet); err != nil {
				return err
			}
		}

	}

	if o.SubnetID != nil {

		// query param subnet_id
		var qrSubnetID string
		if o.SubnetID != nil {
			qrSubnetID = *o.SubnetID
		}
		qSubnetID := qrSubnetID
		if qSubnetID != "" {
			if err := r.SetQueryParam("subnet_id", qSubnetID); err != nil {
				return err
			}
		}

	}

	if o.VrfGroup != nil {

		// query param vrf_group
		var qrVrfGroup string
		if o.VrfGroup != nil {
			qrVrfGroup = *o.VrfGroup
		}
		qVrfGroup := qrVrfGroup
		if qVrfGroup != "" {
			if err := r.SetQueryParam("vrf_group", qVrfGroup); err != nil {
				return err
			}
		}

	}

	if o.VrfGroupID != nil {

		// query param vrf_group_id
		var qrVrfGroupID string
		if o.VrfGroupID != nil {
			qrVrfGroupID = *o.VrfGroupID
		}
		qVrfGroupID := qrVrfGroupID
		if qVrfGroupID != "" {
			if err := r.SetQueryParam("vrf_group_id", qVrfGroupID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
