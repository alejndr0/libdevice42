// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostIPAMIpnatParams creates a new PostIPAMIpnatParams object
// with the default values initialized.
func NewPostIPAMIpnatParams() *PostIPAMIpnatParams {
	var ()
	return &PostIPAMIpnatParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostIPAMIpnatParamsWithTimeout creates a new PostIPAMIpnatParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostIPAMIpnatParamsWithTimeout(timeout time.Duration) *PostIPAMIpnatParams {
	var ()
	return &PostIPAMIpnatParams{

		timeout: timeout,
	}
}

// NewPostIPAMIpnatParamsWithContext creates a new PostIPAMIpnatParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostIPAMIpnatParamsWithContext(ctx context.Context) *PostIPAMIpnatParams {
	var ()
	return &PostIPAMIpnatParams{

		Context: ctx,
	}
}

// NewPostIPAMIpnatParamsWithHTTPClient creates a new PostIPAMIpnatParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostIPAMIpnatParamsWithHTTPClient(client *http.Client) *PostIPAMIpnatParams {
	var ()
	return &PostIPAMIpnatParams{
		HTTPClient: client,
	}
}

/*PostIPAMIpnatParams contains all the parameters to send to the API endpoint
for the post IP a m ipnat operation typically these are written to a http.Request
*/
type PostIPAMIpnatParams struct {

	/*IPAddressFrom
	  The external IP address

	*/
	IPAddressFrom string
	/*IPAddressFromEnd
	  used for mapping a range of addresses rather than a single IP

	*/
	IPAddressFromEnd *string
	/*IPAddressTo
	  The internal IP address

	*/
	IPAddressTo string
	/*IPAddressToEnd
	  used for mapping a range of addresses rather than a single IP

	*/
	IPAddressToEnd *string
	/*Name
	  Name of the NAT IP entry

	*/
	Name string
	/*Notes
	  Any additional notes

	*/
	Notes *string
	/*Protocol
	  the transport protocol, ie TCP

	*/
	Protocol *string
	/*SourcePortEnd
	  used for mapping a range of ports rather than a single port

	*/
	SourcePortEnd *string
	/*SourcePortStart
	  Starting port for source IP range

	*/
	SourcePortStart *string
	/*TargetPortEnd
	  used for mapping a range of ports rather than a single port

	*/
	TargetPortEnd *string
	/*TargetPortStart
	  Starting port for target IP range

	*/
	TargetPortStart *string
	/*TwoWayRelation
	  true if the internal IP addressed is masked with the external IP address for outbound traffic in addition to inbound traffic. Default is false.

	*/
	TwoWayRelation *string
	/*VrfGroupFrom
	  Originating VRF Group Name

	*/
	VrfGroupFrom *string
	/*VrfGroupIDFrom
	  Originating VRF Group ID

	*/
	VrfGroupIDFrom *string
	/*VrfGroupIDTo
	  Destination VRF Group ID

	*/
	VrfGroupIDTo *string
	/*VrfGroupTo
	  Destination VRF Group Name

	*/
	VrfGroupTo *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithTimeout(timeout time.Duration) *PostIPAMIpnatParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithContext(ctx context.Context) *PostIPAMIpnatParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithHTTPClient(client *http.Client) *PostIPAMIpnatParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIPAddressFrom adds the iPAddressFrom to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithIPAddressFrom(iPAddressFrom string) *PostIPAMIpnatParams {
	o.SetIPAddressFrom(iPAddressFrom)
	return o
}

// SetIPAddressFrom adds the ipAddressFrom to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetIPAddressFrom(iPAddressFrom string) {
	o.IPAddressFrom = iPAddressFrom
}

// WithIPAddressFromEnd adds the iPAddressFromEnd to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithIPAddressFromEnd(iPAddressFromEnd *string) *PostIPAMIpnatParams {
	o.SetIPAddressFromEnd(iPAddressFromEnd)
	return o
}

// SetIPAddressFromEnd adds the ipAddressFromEnd to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetIPAddressFromEnd(iPAddressFromEnd *string) {
	o.IPAddressFromEnd = iPAddressFromEnd
}

// WithIPAddressTo adds the iPAddressTo to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithIPAddressTo(iPAddressTo string) *PostIPAMIpnatParams {
	o.SetIPAddressTo(iPAddressTo)
	return o
}

// SetIPAddressTo adds the ipAddressTo to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetIPAddressTo(iPAddressTo string) {
	o.IPAddressTo = iPAddressTo
}

// WithIPAddressToEnd adds the iPAddressToEnd to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithIPAddressToEnd(iPAddressToEnd *string) *PostIPAMIpnatParams {
	o.SetIPAddressToEnd(iPAddressToEnd)
	return o
}

// SetIPAddressToEnd adds the ipAddressToEnd to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetIPAddressToEnd(iPAddressToEnd *string) {
	o.IPAddressToEnd = iPAddressToEnd
}

// WithName adds the name to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithName(name string) *PostIPAMIpnatParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetName(name string) {
	o.Name = name
}

// WithNotes adds the notes to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithNotes(notes *string) *PostIPAMIpnatParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithProtocol adds the protocol to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithProtocol(protocol *string) *PostIPAMIpnatParams {
	o.SetProtocol(protocol)
	return o
}

// SetProtocol adds the protocol to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetProtocol(protocol *string) {
	o.Protocol = protocol
}

// WithSourcePortEnd adds the sourcePortEnd to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithSourcePortEnd(sourcePortEnd *string) *PostIPAMIpnatParams {
	o.SetSourcePortEnd(sourcePortEnd)
	return o
}

// SetSourcePortEnd adds the sourcePortEnd to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetSourcePortEnd(sourcePortEnd *string) {
	o.SourcePortEnd = sourcePortEnd
}

// WithSourcePortStart adds the sourcePortStart to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithSourcePortStart(sourcePortStart *string) *PostIPAMIpnatParams {
	o.SetSourcePortStart(sourcePortStart)
	return o
}

// SetSourcePortStart adds the sourcePortStart to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetSourcePortStart(sourcePortStart *string) {
	o.SourcePortStart = sourcePortStart
}

// WithTargetPortEnd adds the targetPortEnd to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithTargetPortEnd(targetPortEnd *string) *PostIPAMIpnatParams {
	o.SetTargetPortEnd(targetPortEnd)
	return o
}

// SetTargetPortEnd adds the targetPortEnd to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetTargetPortEnd(targetPortEnd *string) {
	o.TargetPortEnd = targetPortEnd
}

// WithTargetPortStart adds the targetPortStart to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithTargetPortStart(targetPortStart *string) *PostIPAMIpnatParams {
	o.SetTargetPortStart(targetPortStart)
	return o
}

// SetTargetPortStart adds the targetPortStart to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetTargetPortStart(targetPortStart *string) {
	o.TargetPortStart = targetPortStart
}

// WithTwoWayRelation adds the twoWayRelation to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithTwoWayRelation(twoWayRelation *string) *PostIPAMIpnatParams {
	o.SetTwoWayRelation(twoWayRelation)
	return o
}

// SetTwoWayRelation adds the twoWayRelation to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetTwoWayRelation(twoWayRelation *string) {
	o.TwoWayRelation = twoWayRelation
}

// WithVrfGroupFrom adds the vrfGroupFrom to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithVrfGroupFrom(vrfGroupFrom *string) *PostIPAMIpnatParams {
	o.SetVrfGroupFrom(vrfGroupFrom)
	return o
}

// SetVrfGroupFrom adds the vrfGroupFrom to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetVrfGroupFrom(vrfGroupFrom *string) {
	o.VrfGroupFrom = vrfGroupFrom
}

// WithVrfGroupIDFrom adds the vrfGroupIDFrom to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithVrfGroupIDFrom(vrfGroupIDFrom *string) *PostIPAMIpnatParams {
	o.SetVrfGroupIDFrom(vrfGroupIDFrom)
	return o
}

// SetVrfGroupIDFrom adds the vrfGroupIdFrom to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetVrfGroupIDFrom(vrfGroupIDFrom *string) {
	o.VrfGroupIDFrom = vrfGroupIDFrom
}

// WithVrfGroupIDTo adds the vrfGroupIDTo to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithVrfGroupIDTo(vrfGroupIDTo *string) *PostIPAMIpnatParams {
	o.SetVrfGroupIDTo(vrfGroupIDTo)
	return o
}

// SetVrfGroupIDTo adds the vrfGroupIdTo to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetVrfGroupIDTo(vrfGroupIDTo *string) {
	o.VrfGroupIDTo = vrfGroupIDTo
}

// WithVrfGroupTo adds the vrfGroupTo to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) WithVrfGroupTo(vrfGroupTo *string) *PostIPAMIpnatParams {
	o.SetVrfGroupTo(vrfGroupTo)
	return o
}

// SetVrfGroupTo adds the vrfGroupTo to the post IP a m ipnat params
func (o *PostIPAMIpnatParams) SetVrfGroupTo(vrfGroupTo *string) {
	o.VrfGroupTo = vrfGroupTo
}

// WriteToRequest writes these params to a swagger request
func (o *PostIPAMIpnatParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param ip_address_from
	frIPAddressFrom := o.IPAddressFrom
	fIPAddressFrom := frIPAddressFrom
	if fIPAddressFrom != "" {
		if err := r.SetFormParam("ip_address_from", fIPAddressFrom); err != nil {
			return err
		}
	}

	if o.IPAddressFromEnd != nil {

		// form param ip_address_from_end
		var frIPAddressFromEnd string
		if o.IPAddressFromEnd != nil {
			frIPAddressFromEnd = *o.IPAddressFromEnd
		}
		fIPAddressFromEnd := frIPAddressFromEnd
		if fIPAddressFromEnd != "" {
			if err := r.SetFormParam("ip_address_from_end", fIPAddressFromEnd); err != nil {
				return err
			}
		}

	}

	// form param ip_address_to
	frIPAddressTo := o.IPAddressTo
	fIPAddressTo := frIPAddressTo
	if fIPAddressTo != "" {
		if err := r.SetFormParam("ip_address_to", fIPAddressTo); err != nil {
			return err
		}
	}

	if o.IPAddressToEnd != nil {

		// form param ip_address_to_end
		var frIPAddressToEnd string
		if o.IPAddressToEnd != nil {
			frIPAddressToEnd = *o.IPAddressToEnd
		}
		fIPAddressToEnd := frIPAddressToEnd
		if fIPAddressToEnd != "" {
			if err := r.SetFormParam("ip_address_to_end", fIPAddressToEnd); err != nil {
				return err
			}
		}

	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if o.Protocol != nil {

		// form param protocol
		var frProtocol string
		if o.Protocol != nil {
			frProtocol = *o.Protocol
		}
		fProtocol := frProtocol
		if fProtocol != "" {
			if err := r.SetFormParam("protocol", fProtocol); err != nil {
				return err
			}
		}

	}

	if o.SourcePortEnd != nil {

		// form param source_port_end
		var frSourcePortEnd string
		if o.SourcePortEnd != nil {
			frSourcePortEnd = *o.SourcePortEnd
		}
		fSourcePortEnd := frSourcePortEnd
		if fSourcePortEnd != "" {
			if err := r.SetFormParam("source_port_end", fSourcePortEnd); err != nil {
				return err
			}
		}

	}

	if o.SourcePortStart != nil {

		// form param source_port_start
		var frSourcePortStart string
		if o.SourcePortStart != nil {
			frSourcePortStart = *o.SourcePortStart
		}
		fSourcePortStart := frSourcePortStart
		if fSourcePortStart != "" {
			if err := r.SetFormParam("source_port_start", fSourcePortStart); err != nil {
				return err
			}
		}

	}

	if o.TargetPortEnd != nil {

		// form param target_port_end
		var frTargetPortEnd string
		if o.TargetPortEnd != nil {
			frTargetPortEnd = *o.TargetPortEnd
		}
		fTargetPortEnd := frTargetPortEnd
		if fTargetPortEnd != "" {
			if err := r.SetFormParam("target_port_end", fTargetPortEnd); err != nil {
				return err
			}
		}

	}

	if o.TargetPortStart != nil {

		// form param target_port_start
		var frTargetPortStart string
		if o.TargetPortStart != nil {
			frTargetPortStart = *o.TargetPortStart
		}
		fTargetPortStart := frTargetPortStart
		if fTargetPortStart != "" {
			if err := r.SetFormParam("target_port_start", fTargetPortStart); err != nil {
				return err
			}
		}

	}

	if o.TwoWayRelation != nil {

		// form param two_way_relation
		var frTwoWayRelation string
		if o.TwoWayRelation != nil {
			frTwoWayRelation = *o.TwoWayRelation
		}
		fTwoWayRelation := frTwoWayRelation
		if fTwoWayRelation != "" {
			if err := r.SetFormParam("two_way_relation", fTwoWayRelation); err != nil {
				return err
			}
		}

	}

	if o.VrfGroupFrom != nil {

		// form param vrf_group_from
		var frVrfGroupFrom string
		if o.VrfGroupFrom != nil {
			frVrfGroupFrom = *o.VrfGroupFrom
		}
		fVrfGroupFrom := frVrfGroupFrom
		if fVrfGroupFrom != "" {
			if err := r.SetFormParam("vrf_group_from", fVrfGroupFrom); err != nil {
				return err
			}
		}

	}

	if o.VrfGroupIDFrom != nil {

		// form param vrf_group_id_from
		var frVrfGroupIDFrom string
		if o.VrfGroupIDFrom != nil {
			frVrfGroupIDFrom = *o.VrfGroupIDFrom
		}
		fVrfGroupIDFrom := frVrfGroupIDFrom
		if fVrfGroupIDFrom != "" {
			if err := r.SetFormParam("vrf_group_id_from", fVrfGroupIDFrom); err != nil {
				return err
			}
		}

	}

	if o.VrfGroupIDTo != nil {

		// form param vrf_group_id_to
		var frVrfGroupIDTo string
		if o.VrfGroupIDTo != nil {
			frVrfGroupIDTo = *o.VrfGroupIDTo
		}
		fVrfGroupIDTo := frVrfGroupIDTo
		if fVrfGroupIDTo != "" {
			if err := r.SetFormParam("vrf_group_id_to", fVrfGroupIDTo); err != nil {
				return err
			}
		}

	}

	if o.VrfGroupTo != nil {

		// form param vrf_group_to
		var frVrfGroupTo string
		if o.VrfGroupTo != nil {
			frVrfGroupTo = *o.VrfGroupTo
		}
		fVrfGroupTo := frVrfGroupTo
		if fVrfGroupTo != "" {
			if err := r.SetFormParam("vrf_group_to", fVrfGroupTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
