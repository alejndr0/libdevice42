// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetIPAMIpsParams creates a new GetIPAMIpsParams object
// with the default values initialized.
func NewGetIPAMIpsParams() *GetIPAMIpsParams {
	var ()
	return &GetIPAMIpsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIPAMIpsParamsWithTimeout creates a new GetIPAMIpsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIPAMIpsParamsWithTimeout(timeout time.Duration) *GetIPAMIpsParams {
	var ()
	return &GetIPAMIpsParams{

		timeout: timeout,
	}
}

// NewGetIPAMIpsParamsWithContext creates a new GetIPAMIpsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIPAMIpsParamsWithContext(ctx context.Context) *GetIPAMIpsParams {
	var ()
	return &GetIPAMIpsParams{

		Context: ctx,
	}
}

// NewGetIPAMIpsParamsWithHTTPClient creates a new GetIPAMIpsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIPAMIpsParamsWithHTTPClient(client *http.Client) *GetIPAMIpsParams {
	var ()
	return &GetIPAMIpsParams{
		HTTPClient: client,
	}
}

/*GetIPAMIpsParams contains all the parameters to send to the API endpoint
for the get IP a m ips operation typically these are written to a http.Request
*/
type GetIPAMIpsParams struct {

	/*Available
	  could be yes or no

	*/
	Available *string
	/*CustomFieldsAnd
	  filter by custom fields, and filter, format of key1:value1,key2:value2

	*/
	CustomFieldsAnd *string
	/*CustomFieldsOr
	  filter by custom fields, or filter, format of key1:value1,key2:value2

	*/
	CustomFieldsOr *string
	/*Device
	  Device name

	*/
	Device *string
	/*FirstAddedGt
	  first added greater date YYYY-MM-DD format

	*/
	FirstAddedGt *string
	/*FirstAddedLt
	  first added less than date YYYY-MM-DD format

	*/
	FirstAddedLt *string
	/*IP
	  ip address (added in v6.3.0)

	*/
	IP *string
	/*IPID
	  D42 ID of the IP

	*/
	IPID *string
	/*Ips
	  Details for all the IPs

	*/
	Ips *string
	/*Label*/
	Label *string
	/*LastUpdatedGt
	  last updated greater than date YYYY-MM-DD format

	*/
	LastUpdatedGt *string
	/*LastUpdatedLt
	  last updated less than date YYYY-MM-DD format

	*/
	LastUpdatedLt *string
	/*Limit
	  return this number of devices

	*/
	Limit *string
	/*Mac
	  mac address

	*/
	Mac *string
	/*Offset
	  start with this device (e.g. limit=100&offset=50 means start with the 50th device and return the next 100 devices)

	*/
	Offset *string
	/*Subnet
	  name of the subnet

	*/
	Subnet *string
	/*SubnetID
	  ID of the subnet (added in v7.2.0)

	*/
	SubnetID *string
	/*Tags
	  filter by tags. comma separated for multiple tags (This is an OR filter, gets all the devices for all comma separated tags)

	*/
	Tags *string
	/*TagsAnd
	  filter by all the tags, separated by comma. (This is an AND filter and all tags have to match for filter, this was added in v6.3.1)

	*/
	TagsAnd *string
	/*TotalCount
	  Count of IPs returned (use with offset as max results are limited to 1000)

	*/
	TotalCount *string
	/*Type*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get IP a m ips params
func (o *GetIPAMIpsParams) WithTimeout(timeout time.Duration) *GetIPAMIpsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get IP a m ips params
func (o *GetIPAMIpsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get IP a m ips params
func (o *GetIPAMIpsParams) WithContext(ctx context.Context) *GetIPAMIpsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get IP a m ips params
func (o *GetIPAMIpsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get IP a m ips params
func (o *GetIPAMIpsParams) WithHTTPClient(client *http.Client) *GetIPAMIpsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get IP a m ips params
func (o *GetIPAMIpsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAvailable adds the available to the get IP a m ips params
func (o *GetIPAMIpsParams) WithAvailable(available *string) *GetIPAMIpsParams {
	o.SetAvailable(available)
	return o
}

// SetAvailable adds the available to the get IP a m ips params
func (o *GetIPAMIpsParams) SetAvailable(available *string) {
	o.Available = available
}

// WithCustomFieldsAnd adds the customFieldsAnd to the get IP a m ips params
func (o *GetIPAMIpsParams) WithCustomFieldsAnd(customFieldsAnd *string) *GetIPAMIpsParams {
	o.SetCustomFieldsAnd(customFieldsAnd)
	return o
}

// SetCustomFieldsAnd adds the customFieldsAnd to the get IP a m ips params
func (o *GetIPAMIpsParams) SetCustomFieldsAnd(customFieldsAnd *string) {
	o.CustomFieldsAnd = customFieldsAnd
}

// WithCustomFieldsOr adds the customFieldsOr to the get IP a m ips params
func (o *GetIPAMIpsParams) WithCustomFieldsOr(customFieldsOr *string) *GetIPAMIpsParams {
	o.SetCustomFieldsOr(customFieldsOr)
	return o
}

// SetCustomFieldsOr adds the customFieldsOr to the get IP a m ips params
func (o *GetIPAMIpsParams) SetCustomFieldsOr(customFieldsOr *string) {
	o.CustomFieldsOr = customFieldsOr
}

// WithDevice adds the device to the get IP a m ips params
func (o *GetIPAMIpsParams) WithDevice(device *string) *GetIPAMIpsParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the get IP a m ips params
func (o *GetIPAMIpsParams) SetDevice(device *string) {
	o.Device = device
}

// WithFirstAddedGt adds the firstAddedGt to the get IP a m ips params
func (o *GetIPAMIpsParams) WithFirstAddedGt(firstAddedGt *string) *GetIPAMIpsParams {
	o.SetFirstAddedGt(firstAddedGt)
	return o
}

// SetFirstAddedGt adds the firstAddedGt to the get IP a m ips params
func (o *GetIPAMIpsParams) SetFirstAddedGt(firstAddedGt *string) {
	o.FirstAddedGt = firstAddedGt
}

// WithFirstAddedLt adds the firstAddedLt to the get IP a m ips params
func (o *GetIPAMIpsParams) WithFirstAddedLt(firstAddedLt *string) *GetIPAMIpsParams {
	o.SetFirstAddedLt(firstAddedLt)
	return o
}

// SetFirstAddedLt adds the firstAddedLt to the get IP a m ips params
func (o *GetIPAMIpsParams) SetFirstAddedLt(firstAddedLt *string) {
	o.FirstAddedLt = firstAddedLt
}

// WithIP adds the ip to the get IP a m ips params
func (o *GetIPAMIpsParams) WithIP(ip *string) *GetIPAMIpsParams {
	o.SetIP(ip)
	return o
}

// SetIP adds the ip to the get IP a m ips params
func (o *GetIPAMIpsParams) SetIP(ip *string) {
	o.IP = ip
}

// WithIPID adds the iPID to the get IP a m ips params
func (o *GetIPAMIpsParams) WithIPID(iPID *string) *GetIPAMIpsParams {
	o.SetIPID(iPID)
	return o
}

// SetIPID adds the ipId to the get IP a m ips params
func (o *GetIPAMIpsParams) SetIPID(iPID *string) {
	o.IPID = iPID
}

// WithIps adds the ips to the get IP a m ips params
func (o *GetIPAMIpsParams) WithIps(ips *string) *GetIPAMIpsParams {
	o.SetIps(ips)
	return o
}

// SetIps adds the ips to the get IP a m ips params
func (o *GetIPAMIpsParams) SetIps(ips *string) {
	o.Ips = ips
}

// WithLabel adds the label to the get IP a m ips params
func (o *GetIPAMIpsParams) WithLabel(label *string) *GetIPAMIpsParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the get IP a m ips params
func (o *GetIPAMIpsParams) SetLabel(label *string) {
	o.Label = label
}

// WithLastUpdatedGt adds the lastUpdatedGt to the get IP a m ips params
func (o *GetIPAMIpsParams) WithLastUpdatedGt(lastUpdatedGt *string) *GetIPAMIpsParams {
	o.SetLastUpdatedGt(lastUpdatedGt)
	return o
}

// SetLastUpdatedGt adds the lastUpdatedGt to the get IP a m ips params
func (o *GetIPAMIpsParams) SetLastUpdatedGt(lastUpdatedGt *string) {
	o.LastUpdatedGt = lastUpdatedGt
}

// WithLastUpdatedLt adds the lastUpdatedLt to the get IP a m ips params
func (o *GetIPAMIpsParams) WithLastUpdatedLt(lastUpdatedLt *string) *GetIPAMIpsParams {
	o.SetLastUpdatedLt(lastUpdatedLt)
	return o
}

// SetLastUpdatedLt adds the lastUpdatedLt to the get IP a m ips params
func (o *GetIPAMIpsParams) SetLastUpdatedLt(lastUpdatedLt *string) {
	o.LastUpdatedLt = lastUpdatedLt
}

// WithLimit adds the limit to the get IP a m ips params
func (o *GetIPAMIpsParams) WithLimit(limit *string) *GetIPAMIpsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get IP a m ips params
func (o *GetIPAMIpsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithMac adds the mac to the get IP a m ips params
func (o *GetIPAMIpsParams) WithMac(mac *string) *GetIPAMIpsParams {
	o.SetMac(mac)
	return o
}

// SetMac adds the mac to the get IP a m ips params
func (o *GetIPAMIpsParams) SetMac(mac *string) {
	o.Mac = mac
}

// WithOffset adds the offset to the get IP a m ips params
func (o *GetIPAMIpsParams) WithOffset(offset *string) *GetIPAMIpsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get IP a m ips params
func (o *GetIPAMIpsParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithSubnet adds the subnet to the get IP a m ips params
func (o *GetIPAMIpsParams) WithSubnet(subnet *string) *GetIPAMIpsParams {
	o.SetSubnet(subnet)
	return o
}

// SetSubnet adds the subnet to the get IP a m ips params
func (o *GetIPAMIpsParams) SetSubnet(subnet *string) {
	o.Subnet = subnet
}

// WithSubnetID adds the subnetID to the get IP a m ips params
func (o *GetIPAMIpsParams) WithSubnetID(subnetID *string) *GetIPAMIpsParams {
	o.SetSubnetID(subnetID)
	return o
}

// SetSubnetID adds the subnetId to the get IP a m ips params
func (o *GetIPAMIpsParams) SetSubnetID(subnetID *string) {
	o.SubnetID = subnetID
}

// WithTags adds the tags to the get IP a m ips params
func (o *GetIPAMIpsParams) WithTags(tags *string) *GetIPAMIpsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get IP a m ips params
func (o *GetIPAMIpsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithTagsAnd adds the tagsAnd to the get IP a m ips params
func (o *GetIPAMIpsParams) WithTagsAnd(tagsAnd *string) *GetIPAMIpsParams {
	o.SetTagsAnd(tagsAnd)
	return o
}

// SetTagsAnd adds the tagsAnd to the get IP a m ips params
func (o *GetIPAMIpsParams) SetTagsAnd(tagsAnd *string) {
	o.TagsAnd = tagsAnd
}

// WithTotalCount adds the totalCount to the get IP a m ips params
func (o *GetIPAMIpsParams) WithTotalCount(totalCount *string) *GetIPAMIpsParams {
	o.SetTotalCount(totalCount)
	return o
}

// SetTotalCount adds the totalCount to the get IP a m ips params
func (o *GetIPAMIpsParams) SetTotalCount(totalCount *string) {
	o.TotalCount = totalCount
}

// WithType adds the typeVar to the get IP a m ips params
func (o *GetIPAMIpsParams) WithType(typeVar *string) *GetIPAMIpsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get IP a m ips params
func (o *GetIPAMIpsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetIPAMIpsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Available != nil {

		// query param available
		var qrAvailable string
		if o.Available != nil {
			qrAvailable = *o.Available
		}
		qAvailable := qrAvailable
		if qAvailable != "" {
			if err := r.SetQueryParam("available", qAvailable); err != nil {
				return err
			}
		}

	}

	if o.CustomFieldsAnd != nil {

		// query param custom_fields_and
		var qrCustomFieldsAnd string
		if o.CustomFieldsAnd != nil {
			qrCustomFieldsAnd = *o.CustomFieldsAnd
		}
		qCustomFieldsAnd := qrCustomFieldsAnd
		if qCustomFieldsAnd != "" {
			if err := r.SetQueryParam("custom_fields_and", qCustomFieldsAnd); err != nil {
				return err
			}
		}

	}

	if o.CustomFieldsOr != nil {

		// query param custom_fields_or
		var qrCustomFieldsOr string
		if o.CustomFieldsOr != nil {
			qrCustomFieldsOr = *o.CustomFieldsOr
		}
		qCustomFieldsOr := qrCustomFieldsOr
		if qCustomFieldsOr != "" {
			if err := r.SetQueryParam("custom_fields_or", qCustomFieldsOr); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// query param device
		var qrDevice string
		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {
			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}

	}

	if o.FirstAddedGt != nil {

		// query param first_added_gt
		var qrFirstAddedGt string
		if o.FirstAddedGt != nil {
			qrFirstAddedGt = *o.FirstAddedGt
		}
		qFirstAddedGt := qrFirstAddedGt
		if qFirstAddedGt != "" {
			if err := r.SetQueryParam("first_added_gt", qFirstAddedGt); err != nil {
				return err
			}
		}

	}

	if o.FirstAddedLt != nil {

		// query param first_added_lt
		var qrFirstAddedLt string
		if o.FirstAddedLt != nil {
			qrFirstAddedLt = *o.FirstAddedLt
		}
		qFirstAddedLt := qrFirstAddedLt
		if qFirstAddedLt != "" {
			if err := r.SetQueryParam("first_added_lt", qFirstAddedLt); err != nil {
				return err
			}
		}

	}

	if o.IP != nil {

		// query param ip
		var qrIP string
		if o.IP != nil {
			qrIP = *o.IP
		}
		qIP := qrIP
		if qIP != "" {
			if err := r.SetQueryParam("ip", qIP); err != nil {
				return err
			}
		}

	}

	if o.IPID != nil {

		// query param ip_id
		var qrIPID string
		if o.IPID != nil {
			qrIPID = *o.IPID
		}
		qIPID := qrIPID
		if qIPID != "" {
			if err := r.SetQueryParam("ip_id", qIPID); err != nil {
				return err
			}
		}

	}

	if o.Ips != nil {

		// query param ips
		var qrIps string
		if o.Ips != nil {
			qrIps = *o.Ips
		}
		qIps := qrIps
		if qIps != "" {
			if err := r.SetQueryParam("ips", qIps); err != nil {
				return err
			}
		}

	}

	if o.Label != nil {

		// query param label
		var qrLabel string
		if o.Label != nil {
			qrLabel = *o.Label
		}
		qLabel := qrLabel
		if qLabel != "" {
			if err := r.SetQueryParam("label", qLabel); err != nil {
				return err
			}
		}

	}

	if o.LastUpdatedGt != nil {

		// query param last_updated_gt
		var qrLastUpdatedGt string
		if o.LastUpdatedGt != nil {
			qrLastUpdatedGt = *o.LastUpdatedGt
		}
		qLastUpdatedGt := qrLastUpdatedGt
		if qLastUpdatedGt != "" {
			if err := r.SetQueryParam("last_updated_gt", qLastUpdatedGt); err != nil {
				return err
			}
		}

	}

	if o.LastUpdatedLt != nil {

		// query param last_updated_lt
		var qrLastUpdatedLt string
		if o.LastUpdatedLt != nil {
			qrLastUpdatedLt = *o.LastUpdatedLt
		}
		qLastUpdatedLt := qrLastUpdatedLt
		if qLastUpdatedLt != "" {
			if err := r.SetQueryParam("last_updated_lt", qLastUpdatedLt); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Mac != nil {

		// query param mac
		var qrMac string
		if o.Mac != nil {
			qrMac = *o.Mac
		}
		qMac := qrMac
		if qMac != "" {
			if err := r.SetQueryParam("mac", qMac); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Subnet != nil {

		// query param subnet
		var qrSubnet string
		if o.Subnet != nil {
			qrSubnet = *o.Subnet
		}
		qSubnet := qrSubnet
		if qSubnet != "" {
			if err := r.SetQueryParam("subnet", qSubnet); err != nil {
				return err
			}
		}

	}

	if o.SubnetID != nil {

		// query param subnet_id
		var qrSubnetID string
		if o.SubnetID != nil {
			qrSubnetID = *o.SubnetID
		}
		qSubnetID := qrSubnetID
		if qSubnetID != "" {
			if err := r.SetQueryParam("subnet_id", qSubnetID); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// query param tags
		var qrTags string
		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {
			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}

	}

	if o.TagsAnd != nil {

		// query param tags_and
		var qrTagsAnd string
		if o.TagsAnd != nil {
			qrTagsAnd = *o.TagsAnd
		}
		qTagsAnd := qrTagsAnd
		if qTagsAnd != "" {
			if err := r.SetQueryParam("tags_and", qTagsAnd); err != nil {
				return err
			}
		}

	}

	if o.TotalCount != nil {

		// query param total_count
		var qrTotalCount string
		if o.TotalCount != nil {
			qrTotalCount = *o.TotalCount
		}
		qTotalCount := qrTotalCount
		if qTotalCount != "" {
			if err := r.SetQueryParam("total_count", qTotalCount); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
