// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostIPAMsubnetcategoryParams creates a new PostIPAMsubnetcategoryParams object
// with the default values initialized.
func NewPostIPAMsubnetcategoryParams() *PostIPAMsubnetcategoryParams {
	var ()
	return &PostIPAMsubnetcategoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostIPAMsubnetcategoryParamsWithTimeout creates a new PostIPAMsubnetcategoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostIPAMsubnetcategoryParamsWithTimeout(timeout time.Duration) *PostIPAMsubnetcategoryParams {
	var ()
	return &PostIPAMsubnetcategoryParams{

		timeout: timeout,
	}
}

// NewPostIPAMsubnetcategoryParamsWithContext creates a new PostIPAMsubnetcategoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostIPAMsubnetcategoryParamsWithContext(ctx context.Context) *PostIPAMsubnetcategoryParams {
	var ()
	return &PostIPAMsubnetcategoryParams{

		Context: ctx,
	}
}

// NewPostIPAMsubnetcategoryParamsWithHTTPClient creates a new PostIPAMsubnetcategoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostIPAMsubnetcategoryParamsWithHTTPClient(client *http.Client) *PostIPAMsubnetcategoryParams {
	var ()
	return &PostIPAMsubnetcategoryParams{
		HTTPClient: client,
	}
}

/*PostIPAMsubnetcategoryParams contains all the parameters to send to the API endpoint
for the post IP a msubnetcategory operation typically these are written to a http.Request
*/
type PostIPAMsubnetcategoryParams struct {

	/*Description*/
	Description *string
	/*Groups
	  If multitenancy is on, admin groups that have access to this object are specified here, e.g. Prod_East:no,Corp:yes specifies that the admin groups for this object are Prod_East with view only permission and Corp with change permission. If this parameter is present with no value, all groups are deleted.

	*/
	Groups *string
	/*IsItDefault
	  Defaults to no. Only one category can be yes. If yes, this is the subnet category to use if none specified in an API or auto-discovery update.

	*/
	IsItDefault *string
	/*Name
	  Name of the Subnet Category you want to add edit or create

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) WithTimeout(timeout time.Duration) *PostIPAMsubnetcategoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) WithContext(ctx context.Context) *PostIPAMsubnetcategoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) WithHTTPClient(client *http.Client) *PostIPAMsubnetcategoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) WithDescription(description *string) *PostIPAMsubnetcategoryParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) SetDescription(description *string) {
	o.Description = description
}

// WithGroups adds the groups to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) WithGroups(groups *string) *PostIPAMsubnetcategoryParams {
	o.SetGroups(groups)
	return o
}

// SetGroups adds the groups to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) SetGroups(groups *string) {
	o.Groups = groups
}

// WithIsItDefault adds the isItDefault to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) WithIsItDefault(isItDefault *string) *PostIPAMsubnetcategoryParams {
	o.SetIsItDefault(isItDefault)
	return o
}

// SetIsItDefault adds the isItDefault to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) SetIsItDefault(isItDefault *string) {
	o.IsItDefault = isItDefault
}

// WithName adds the name to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) WithName(name string) *PostIPAMsubnetcategoryParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post IP a msubnetcategory params
func (o *PostIPAMsubnetcategoryParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *PostIPAMsubnetcategoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}

	}

	if o.Groups != nil {

		// form param groups
		var frGroups string
		if o.Groups != nil {
			frGroups = *o.Groups
		}
		fGroups := frGroups
		if fGroups != "" {
			if err := r.SetFormParam("groups", fGroups); err != nil {
				return err
			}
		}

	}

	if o.IsItDefault != nil {

		// form param is_it_default
		var frIsItDefault string
		if o.IsItDefault != nil {
			frIsItDefault = *o.IsItDefault
		}
		fIsItDefault := frIsItDefault
		if fIsItDefault != "" {
			if err := r.SetFormParam("is_it_default", fIsItDefault); err != nil {
				return err
			}
		}

	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
