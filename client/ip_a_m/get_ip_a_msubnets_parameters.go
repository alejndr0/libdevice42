// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetIPAMsubnetsParams creates a new GetIPAMsubnetsParams object
// with the default values initialized.
func NewGetIPAMsubnetsParams() *GetIPAMsubnetsParams {
	var ()
	return &GetIPAMsubnetsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIPAMsubnetsParamsWithTimeout creates a new GetIPAMsubnetsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIPAMsubnetsParamsWithTimeout(timeout time.Duration) *GetIPAMsubnetsParams {
	var ()
	return &GetIPAMsubnetsParams{

		timeout: timeout,
	}
}

// NewGetIPAMsubnetsParamsWithContext creates a new GetIPAMsubnetsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIPAMsubnetsParamsWithContext(ctx context.Context) *GetIPAMsubnetsParams {
	var ()
	return &GetIPAMsubnetsParams{

		Context: ctx,
	}
}

// NewGetIPAMsubnetsParamsWithHTTPClient creates a new GetIPAMsubnetsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIPAMsubnetsParamsWithHTTPClient(client *http.Client) *GetIPAMsubnetsParams {
	var ()
	return &GetIPAMsubnetsParams{
		HTTPClient: client,
	}
}

/*GetIPAMsubnetsParams contains all the parameters to send to the API endpoint
for the get IP a msubnets operation typically these are written to a http.Request
*/
type GetIPAMsubnetsParams struct {

	/*Category
	  name of the category

	*/
	Category *string
	/*CategoryID
	  ID of the category

	*/
	CategoryID *string
	/*CustomFieldsAnd
	  filter by custom fields, and filter, format of key1:value1,key2:value2

	*/
	CustomFieldsAnd *string
	/*CustomFieldsOr
	  filter by custom fields, or filter, format of key1:value1,key2:value2

	*/
	CustomFieldsOr *string
	/*Customer
	  filter by customer name

	*/
	Customer *string
	/*CustomerID
	  ID of the customer (Added in v6.3.0)

	*/
	CustomerID *string
	/*Description
	  matching description (added in v7.2.0)

	*/
	Description *string
	/*Gateway
	  Gateway (added in v7.2.0)

	*/
	Gateway *string
	/*MaskBits
	  mask bits

	*/
	MaskBits *string
	/*MaskBitsGt
	  greater than mask bits (added in v7.2.0)

	*/
	MaskBitsGt *string
	/*MaskBitsLt
	  less than mask bits (added in v7.2.0)

	*/
	MaskBitsLt *string
	/*Name
	  name of the subnet

	*/
	Name *string
	/*Network
	  Optional

	*/
	Network *string
	/*ParentSubnet
	  parent subnet name

	*/
	ParentSubnet *string
	/*ParentSubnetID
	  ID of the parent subnet

	*/
	ParentSubnetID *string
	/*RangeBegin
	  Range Begin (added in v7.2.0)

	*/
	RangeBegin *string
	/*RangeEnd
	  Range End (added in v7.2.0)

	*/
	RangeEnd *string
	/*ServiceLevel
	  filter by service level name

	*/
	ServiceLevel *string
	/*SubnetID
	  ID of the subnet (added in v7.2.0)

	*/
	SubnetID *string
	/*Tags
	  filter by tags. comma separated for multiple tags (This is an OR filter, gets all the devices for all comma separated tags)

	*/
	Tags *string
	/*TagsAnd
	  filter by all the tags, separated by comma. (This is an AND filter and all tags have to match for filter, this was added in v6.3.1)

	*/
	TagsAnd *string
	/*VlanID
	  ID of the vlan

	*/
	VlanID *string
	/*VrfGroup
	  VRF group name

	*/
	VrfGroup *string
	/*VrfGroupID
	  ID of the VRF group

	*/
	VrfGroupID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithTimeout(timeout time.Duration) *GetIPAMsubnetsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithContext(ctx context.Context) *GetIPAMsubnetsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithHTTPClient(client *http.Client) *GetIPAMsubnetsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithCategory(category *string) *GetIPAMsubnetsParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetCategory(category *string) {
	o.Category = category
}

// WithCategoryID adds the categoryID to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithCategoryID(categoryID *string) *GetIPAMsubnetsParams {
	o.SetCategoryID(categoryID)
	return o
}

// SetCategoryID adds the categoryId to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetCategoryID(categoryID *string) {
	o.CategoryID = categoryID
}

// WithCustomFieldsAnd adds the customFieldsAnd to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithCustomFieldsAnd(customFieldsAnd *string) *GetIPAMsubnetsParams {
	o.SetCustomFieldsAnd(customFieldsAnd)
	return o
}

// SetCustomFieldsAnd adds the customFieldsAnd to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetCustomFieldsAnd(customFieldsAnd *string) {
	o.CustomFieldsAnd = customFieldsAnd
}

// WithCustomFieldsOr adds the customFieldsOr to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithCustomFieldsOr(customFieldsOr *string) *GetIPAMsubnetsParams {
	o.SetCustomFieldsOr(customFieldsOr)
	return o
}

// SetCustomFieldsOr adds the customFieldsOr to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetCustomFieldsOr(customFieldsOr *string) {
	o.CustomFieldsOr = customFieldsOr
}

// WithCustomer adds the customer to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithCustomer(customer *string) *GetIPAMsubnetsParams {
	o.SetCustomer(customer)
	return o
}

// SetCustomer adds the customer to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetCustomer(customer *string) {
	o.Customer = customer
}

// WithCustomerID adds the customerID to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithCustomerID(customerID *string) *GetIPAMsubnetsParams {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetCustomerID(customerID *string) {
	o.CustomerID = customerID
}

// WithDescription adds the description to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithDescription(description *string) *GetIPAMsubnetsParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetDescription(description *string) {
	o.Description = description
}

// WithGateway adds the gateway to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithGateway(gateway *string) *GetIPAMsubnetsParams {
	o.SetGateway(gateway)
	return o
}

// SetGateway adds the gateway to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetGateway(gateway *string) {
	o.Gateway = gateway
}

// WithMaskBits adds the maskBits to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithMaskBits(maskBits *string) *GetIPAMsubnetsParams {
	o.SetMaskBits(maskBits)
	return o
}

// SetMaskBits adds the maskBits to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetMaskBits(maskBits *string) {
	o.MaskBits = maskBits
}

// WithMaskBitsGt adds the maskBitsGt to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithMaskBitsGt(maskBitsGt *string) *GetIPAMsubnetsParams {
	o.SetMaskBitsGt(maskBitsGt)
	return o
}

// SetMaskBitsGt adds the maskBitsGt to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetMaskBitsGt(maskBitsGt *string) {
	o.MaskBitsGt = maskBitsGt
}

// WithMaskBitsLt adds the maskBitsLt to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithMaskBitsLt(maskBitsLt *string) *GetIPAMsubnetsParams {
	o.SetMaskBitsLt(maskBitsLt)
	return o
}

// SetMaskBitsLt adds the maskBitsLt to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetMaskBitsLt(maskBitsLt *string) {
	o.MaskBitsLt = maskBitsLt
}

// WithName adds the name to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithName(name *string) *GetIPAMsubnetsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetName(name *string) {
	o.Name = name
}

// WithNetwork adds the network to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithNetwork(network *string) *GetIPAMsubnetsParams {
	o.SetNetwork(network)
	return o
}

// SetNetwork adds the network to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetNetwork(network *string) {
	o.Network = network
}

// WithParentSubnet adds the parentSubnet to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithParentSubnet(parentSubnet *string) *GetIPAMsubnetsParams {
	o.SetParentSubnet(parentSubnet)
	return o
}

// SetParentSubnet adds the parentSubnet to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetParentSubnet(parentSubnet *string) {
	o.ParentSubnet = parentSubnet
}

// WithParentSubnetID adds the parentSubnetID to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithParentSubnetID(parentSubnetID *string) *GetIPAMsubnetsParams {
	o.SetParentSubnetID(parentSubnetID)
	return o
}

// SetParentSubnetID adds the parentSubnetId to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetParentSubnetID(parentSubnetID *string) {
	o.ParentSubnetID = parentSubnetID
}

// WithRangeBegin adds the rangeBegin to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithRangeBegin(rangeBegin *string) *GetIPAMsubnetsParams {
	o.SetRangeBegin(rangeBegin)
	return o
}

// SetRangeBegin adds the rangeBegin to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetRangeBegin(rangeBegin *string) {
	o.RangeBegin = rangeBegin
}

// WithRangeEnd adds the rangeEnd to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithRangeEnd(rangeEnd *string) *GetIPAMsubnetsParams {
	o.SetRangeEnd(rangeEnd)
	return o
}

// SetRangeEnd adds the rangeEnd to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetRangeEnd(rangeEnd *string) {
	o.RangeEnd = rangeEnd
}

// WithServiceLevel adds the serviceLevel to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithServiceLevel(serviceLevel *string) *GetIPAMsubnetsParams {
	o.SetServiceLevel(serviceLevel)
	return o
}

// SetServiceLevel adds the serviceLevel to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetServiceLevel(serviceLevel *string) {
	o.ServiceLevel = serviceLevel
}

// WithSubnetID adds the subnetID to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithSubnetID(subnetID *string) *GetIPAMsubnetsParams {
	o.SetSubnetID(subnetID)
	return o
}

// SetSubnetID adds the subnetId to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetSubnetID(subnetID *string) {
	o.SubnetID = subnetID
}

// WithTags adds the tags to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithTags(tags *string) *GetIPAMsubnetsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithTagsAnd adds the tagsAnd to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithTagsAnd(tagsAnd *string) *GetIPAMsubnetsParams {
	o.SetTagsAnd(tagsAnd)
	return o
}

// SetTagsAnd adds the tagsAnd to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetTagsAnd(tagsAnd *string) {
	o.TagsAnd = tagsAnd
}

// WithVlanID adds the vlanID to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithVlanID(vlanID *string) *GetIPAMsubnetsParams {
	o.SetVlanID(vlanID)
	return o
}

// SetVlanID adds the vlanId to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetVlanID(vlanID *string) {
	o.VlanID = vlanID
}

// WithVrfGroup adds the vrfGroup to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithVrfGroup(vrfGroup *string) *GetIPAMsubnetsParams {
	o.SetVrfGroup(vrfGroup)
	return o
}

// SetVrfGroup adds the vrfGroup to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetVrfGroup(vrfGroup *string) {
	o.VrfGroup = vrfGroup
}

// WithVrfGroupID adds the vrfGroupID to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) WithVrfGroupID(vrfGroupID *string) *GetIPAMsubnetsParams {
	o.SetVrfGroupID(vrfGroupID)
	return o
}

// SetVrfGroupID adds the vrfGroupId to the get IP a msubnets params
func (o *GetIPAMsubnetsParams) SetVrfGroupID(vrfGroupID *string) {
	o.VrfGroupID = vrfGroupID
}

// WriteToRequest writes these params to a swagger request
func (o *GetIPAMsubnetsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// query param category
		var qrCategory string
		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {
			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}

	}

	if o.CategoryID != nil {

		// query param category_id
		var qrCategoryID string
		if o.CategoryID != nil {
			qrCategoryID = *o.CategoryID
		}
		qCategoryID := qrCategoryID
		if qCategoryID != "" {
			if err := r.SetQueryParam("category_id", qCategoryID); err != nil {
				return err
			}
		}

	}

	if o.CustomFieldsAnd != nil {

		// query param custom_fields_and
		var qrCustomFieldsAnd string
		if o.CustomFieldsAnd != nil {
			qrCustomFieldsAnd = *o.CustomFieldsAnd
		}
		qCustomFieldsAnd := qrCustomFieldsAnd
		if qCustomFieldsAnd != "" {
			if err := r.SetQueryParam("custom_fields_and", qCustomFieldsAnd); err != nil {
				return err
			}
		}

	}

	if o.CustomFieldsOr != nil {

		// query param custom_fields_or
		var qrCustomFieldsOr string
		if o.CustomFieldsOr != nil {
			qrCustomFieldsOr = *o.CustomFieldsOr
		}
		qCustomFieldsOr := qrCustomFieldsOr
		if qCustomFieldsOr != "" {
			if err := r.SetQueryParam("custom_fields_or", qCustomFieldsOr); err != nil {
				return err
			}
		}

	}

	if o.Customer != nil {

		// query param customer
		var qrCustomer string
		if o.Customer != nil {
			qrCustomer = *o.Customer
		}
		qCustomer := qrCustomer
		if qCustomer != "" {
			if err := r.SetQueryParam("customer", qCustomer); err != nil {
				return err
			}
		}

	}

	if o.CustomerID != nil {

		// query param customer_id
		var qrCustomerID string
		if o.CustomerID != nil {
			qrCustomerID = *o.CustomerID
		}
		qCustomerID := qrCustomerID
		if qCustomerID != "" {
			if err := r.SetQueryParam("customer_id", qCustomerID); err != nil {
				return err
			}
		}

	}

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	if o.Gateway != nil {

		// query param gateway
		var qrGateway string
		if o.Gateway != nil {
			qrGateway = *o.Gateway
		}
		qGateway := qrGateway
		if qGateway != "" {
			if err := r.SetQueryParam("gateway", qGateway); err != nil {
				return err
			}
		}

	}

	if o.MaskBits != nil {

		// query param mask_bits
		var qrMaskBits string
		if o.MaskBits != nil {
			qrMaskBits = *o.MaskBits
		}
		qMaskBits := qrMaskBits
		if qMaskBits != "" {
			if err := r.SetQueryParam("mask_bits", qMaskBits); err != nil {
				return err
			}
		}

	}

	if o.MaskBitsGt != nil {

		// query param mask_bits_gt
		var qrMaskBitsGt string
		if o.MaskBitsGt != nil {
			qrMaskBitsGt = *o.MaskBitsGt
		}
		qMaskBitsGt := qrMaskBitsGt
		if qMaskBitsGt != "" {
			if err := r.SetQueryParam("mask_bits_gt", qMaskBitsGt); err != nil {
				return err
			}
		}

	}

	if o.MaskBitsLt != nil {

		// query param mask_bits_lt
		var qrMaskBitsLt string
		if o.MaskBitsLt != nil {
			qrMaskBitsLt = *o.MaskBitsLt
		}
		qMaskBitsLt := qrMaskBitsLt
		if qMaskBitsLt != "" {
			if err := r.SetQueryParam("mask_bits_lt", qMaskBitsLt); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Network != nil {

		// query param network
		var qrNetwork string
		if o.Network != nil {
			qrNetwork = *o.Network
		}
		qNetwork := qrNetwork
		if qNetwork != "" {
			if err := r.SetQueryParam("network", qNetwork); err != nil {
				return err
			}
		}

	}

	if o.ParentSubnet != nil {

		// query param parent_subnet
		var qrParentSubnet string
		if o.ParentSubnet != nil {
			qrParentSubnet = *o.ParentSubnet
		}
		qParentSubnet := qrParentSubnet
		if qParentSubnet != "" {
			if err := r.SetQueryParam("parent_subnet", qParentSubnet); err != nil {
				return err
			}
		}

	}

	if o.ParentSubnetID != nil {

		// query param parent_subnet_id
		var qrParentSubnetID string
		if o.ParentSubnetID != nil {
			qrParentSubnetID = *o.ParentSubnetID
		}
		qParentSubnetID := qrParentSubnetID
		if qParentSubnetID != "" {
			if err := r.SetQueryParam("parent_subnet_id", qParentSubnetID); err != nil {
				return err
			}
		}

	}

	if o.RangeBegin != nil {

		// query param range_begin
		var qrRangeBegin string
		if o.RangeBegin != nil {
			qrRangeBegin = *o.RangeBegin
		}
		qRangeBegin := qrRangeBegin
		if qRangeBegin != "" {
			if err := r.SetQueryParam("range_begin", qRangeBegin); err != nil {
				return err
			}
		}

	}

	if o.RangeEnd != nil {

		// query param range_end
		var qrRangeEnd string
		if o.RangeEnd != nil {
			qrRangeEnd = *o.RangeEnd
		}
		qRangeEnd := qrRangeEnd
		if qRangeEnd != "" {
			if err := r.SetQueryParam("range_end", qRangeEnd); err != nil {
				return err
			}
		}

	}

	if o.ServiceLevel != nil {

		// query param service_level
		var qrServiceLevel string
		if o.ServiceLevel != nil {
			qrServiceLevel = *o.ServiceLevel
		}
		qServiceLevel := qrServiceLevel
		if qServiceLevel != "" {
			if err := r.SetQueryParam("service_level", qServiceLevel); err != nil {
				return err
			}
		}

	}

	if o.SubnetID != nil {

		// query param subnet_id
		var qrSubnetID string
		if o.SubnetID != nil {
			qrSubnetID = *o.SubnetID
		}
		qSubnetID := qrSubnetID
		if qSubnetID != "" {
			if err := r.SetQueryParam("subnet_id", qSubnetID); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// query param tags
		var qrTags string
		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {
			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}

	}

	if o.TagsAnd != nil {

		// query param tags_and
		var qrTagsAnd string
		if o.TagsAnd != nil {
			qrTagsAnd = *o.TagsAnd
		}
		qTagsAnd := qrTagsAnd
		if qTagsAnd != "" {
			if err := r.SetQueryParam("tags_and", qTagsAnd); err != nil {
				return err
			}
		}

	}

	if o.VlanID != nil {

		// query param vlan_id
		var qrVlanID string
		if o.VlanID != nil {
			qrVlanID = *o.VlanID
		}
		qVlanID := qrVlanID
		if qVlanID != "" {
			if err := r.SetQueryParam("vlan_id", qVlanID); err != nil {
				return err
			}
		}

	}

	if o.VrfGroup != nil {

		// query param vrf_group
		var qrVrfGroup string
		if o.VrfGroup != nil {
			qrVrfGroup = *o.VrfGroup
		}
		qVrfGroup := qrVrfGroup
		if qVrfGroup != "" {
			if err := r.SetQueryParam("vrf_group", qVrfGroup); err != nil {
				return err
			}
		}

	}

	if o.VrfGroupID != nil {

		// query param vrf_group_id
		var qrVrfGroupID string
		if o.VrfGroupID != nil {
			qrVrfGroupID = *o.VrfGroupID
		}
		qVrfGroupID := qrVrfGroupID
		if qVrfGroupID != "" {
			if err := r.SetQueryParam("vrf_group_id", qVrfGroupID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
