// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutIPAMIpnatParams creates a new PutIPAMIpnatParams object
// with the default values initialized.
func NewPutIPAMIpnatParams() *PutIPAMIpnatParams {
	var ()
	return &PutIPAMIpnatParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutIPAMIpnatParamsWithTimeout creates a new PutIPAMIpnatParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutIPAMIpnatParamsWithTimeout(timeout time.Duration) *PutIPAMIpnatParams {
	var ()
	return &PutIPAMIpnatParams{

		timeout: timeout,
	}
}

// NewPutIPAMIpnatParamsWithContext creates a new PutIPAMIpnatParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutIPAMIpnatParamsWithContext(ctx context.Context) *PutIPAMIpnatParams {
	var ()
	return &PutIPAMIpnatParams{

		Context: ctx,
	}
}

// NewPutIPAMIpnatParamsWithHTTPClient creates a new PutIPAMIpnatParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutIPAMIpnatParamsWithHTTPClient(client *http.Client) *PutIPAMIpnatParams {
	var ()
	return &PutIPAMIpnatParams{
		HTTPClient: client,
	}
}

/*PutIPAMIpnatParams contains all the parameters to send to the API endpoint
for the put IP a m ipnat operation typically these are written to a http.Request
*/
type PutIPAMIpnatParams struct {

	/*ID
	  ID of the NAT entry - Required if not in the URL

	*/
	ID string
	/*IPAddressFrom
	  The external IP address

	*/
	IPAddressFrom *string
	/*IPAddressTo
	  The internal IP address

	*/
	IPAddressTo *string
	/*Name
	  Name of the NAT IP entry

	*/
	Name *string
	/*Notes
	  Any additional notes

	*/
	Notes *string
	/*TwoWayRelation
	  true if the internal IP addressed is masked with the external IP address for outbound traffic in addition to inbound traffic. Default is false.

	*/
	TwoWayRelation *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) WithTimeout(timeout time.Duration) *PutIPAMIpnatParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) WithContext(ctx context.Context) *PutIPAMIpnatParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) WithHTTPClient(client *http.Client) *PutIPAMIpnatParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) WithID(id string) *PutIPAMIpnatParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) SetID(id string) {
	o.ID = id
}

// WithIPAddressFrom adds the iPAddressFrom to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) WithIPAddressFrom(iPAddressFrom *string) *PutIPAMIpnatParams {
	o.SetIPAddressFrom(iPAddressFrom)
	return o
}

// SetIPAddressFrom adds the ipAddressFrom to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) SetIPAddressFrom(iPAddressFrom *string) {
	o.IPAddressFrom = iPAddressFrom
}

// WithIPAddressTo adds the iPAddressTo to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) WithIPAddressTo(iPAddressTo *string) *PutIPAMIpnatParams {
	o.SetIPAddressTo(iPAddressTo)
	return o
}

// SetIPAddressTo adds the ipAddressTo to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) SetIPAddressTo(iPAddressTo *string) {
	o.IPAddressTo = iPAddressTo
}

// WithName adds the name to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) WithName(name *string) *PutIPAMIpnatParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) SetName(name *string) {
	o.Name = name
}

// WithNotes adds the notes to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) WithNotes(notes *string) *PutIPAMIpnatParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithTwoWayRelation adds the twoWayRelation to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) WithTwoWayRelation(twoWayRelation *string) *PutIPAMIpnatParams {
	o.SetTwoWayRelation(twoWayRelation)
	return o
}

// SetTwoWayRelation adds the twoWayRelation to the put IP a m ipnat params
func (o *PutIPAMIpnatParams) SetTwoWayRelation(twoWayRelation *string) {
	o.TwoWayRelation = twoWayRelation
}

// WriteToRequest writes these params to a swagger request
func (o *PutIPAMIpnatParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param id
	frID := o.ID
	fID := frID
	if fID != "" {
		if err := r.SetFormParam("id", fID); err != nil {
			return err
		}
	}

	if o.IPAddressFrom != nil {

		// form param ip_address_from
		var frIPAddressFrom string
		if o.IPAddressFrom != nil {
			frIPAddressFrom = *o.IPAddressFrom
		}
		fIPAddressFrom := frIPAddressFrom
		if fIPAddressFrom != "" {
			if err := r.SetFormParam("ip_address_from", fIPAddressFrom); err != nil {
				return err
			}
		}

	}

	if o.IPAddressTo != nil {

		// form param ip_address_to
		var frIPAddressTo string
		if o.IPAddressTo != nil {
			frIPAddressTo = *o.IPAddressTo
		}
		fIPAddressTo := frIPAddressTo
		if fIPAddressTo != "" {
			if err := r.SetFormParam("ip_address_to", fIPAddressTo); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}

	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if o.TwoWayRelation != nil {

		// form param two_way_relation
		var frTwoWayRelation string
		if o.TwoWayRelation != nil {
			frTwoWayRelation = *o.TwoWayRelation
		}
		fTwoWayRelation := frTwoWayRelation
		if fTwoWayRelation != "" {
			if err := r.SetFormParam("two_way_relation", fTwoWayRelation); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
