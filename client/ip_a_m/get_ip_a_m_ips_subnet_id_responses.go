// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetIPAMIpsSubnetIDReader is a Reader for the GetIPAMIpsSubnetID structure.
type GetIPAMIpsSubnetIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIPAMIpsSubnetIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIPAMIpsSubnetIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetIPAMIpsSubnetIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetIPAMIpsSubnetIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIPAMIpsSubnetIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetIPAMIpsSubnetIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetIPAMIpsSubnetIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetIPAMIpsSubnetIDGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetIPAMIpsSubnetIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetIPAMIpsSubnetIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIPAMIpsSubnetIDOK creates a GetIPAMIpsSubnetIDOK with default headers values
func NewGetIPAMIpsSubnetIDOK() *GetIPAMIpsSubnetIDOK {
	return &GetIPAMIpsSubnetIDOK{}
}

/*GetIPAMIpsSubnetIDOK handles this case with default header values.

The above command returns results like this:
*/
type GetIPAMIpsSubnetIDOK struct {
	Payload *GetIPAMIpsSubnetIDOKBody
}

func (o *GetIPAMIpsSubnetIDOK) Error() string {
	return fmt.Sprintf("[GET /api/1.0/ips/subnet_id/{subnet_id}/][%d] getIpAMIpsSubnetIdOK  %+v", 200, o.Payload)
}

func (o *GetIPAMIpsSubnetIDOK) GetPayload() *GetIPAMIpsSubnetIDOKBody {
	return o.Payload
}

func (o *GetIPAMIpsSubnetIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetIPAMIpsSubnetIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIPAMIpsSubnetIDBadRequest creates a GetIPAMIpsSubnetIDBadRequest with default headers values
func NewGetIPAMIpsSubnetIDBadRequest() *GetIPAMIpsSubnetIDBadRequest {
	return &GetIPAMIpsSubnetIDBadRequest{}
}

/*GetIPAMIpsSubnetIDBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type GetIPAMIpsSubnetIDBadRequest struct {
}

func (o *GetIPAMIpsSubnetIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/1.0/ips/subnet_id/{subnet_id}/][%d] getIpAMIpsSubnetIdBadRequest ", 400)
}

func (o *GetIPAMIpsSubnetIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMIpsSubnetIDUnauthorized creates a GetIPAMIpsSubnetIDUnauthorized with default headers values
func NewGetIPAMIpsSubnetIDUnauthorized() *GetIPAMIpsSubnetIDUnauthorized {
	return &GetIPAMIpsSubnetIDUnauthorized{}
}

/*GetIPAMIpsSubnetIDUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type GetIPAMIpsSubnetIDUnauthorized struct {
}

func (o *GetIPAMIpsSubnetIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/1.0/ips/subnet_id/{subnet_id}/][%d] getIpAMIpsSubnetIdUnauthorized ", 401)
}

func (o *GetIPAMIpsSubnetIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMIpsSubnetIDForbidden creates a GetIPAMIpsSubnetIDForbidden with default headers values
func NewGetIPAMIpsSubnetIDForbidden() *GetIPAMIpsSubnetIDForbidden {
	return &GetIPAMIpsSubnetIDForbidden{}
}

/*GetIPAMIpsSubnetIDForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type GetIPAMIpsSubnetIDForbidden struct {
}

func (o *GetIPAMIpsSubnetIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/1.0/ips/subnet_id/{subnet_id}/][%d] getIpAMIpsSubnetIdForbidden ", 403)
}

func (o *GetIPAMIpsSubnetIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMIpsSubnetIDNotFound creates a GetIPAMIpsSubnetIDNotFound with default headers values
func NewGetIPAMIpsSubnetIDNotFound() *GetIPAMIpsSubnetIDNotFound {
	return &GetIPAMIpsSubnetIDNotFound{}
}

/*GetIPAMIpsSubnetIDNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type GetIPAMIpsSubnetIDNotFound struct {
}

func (o *GetIPAMIpsSubnetIDNotFound) Error() string {
	return fmt.Sprintf("[GET /api/1.0/ips/subnet_id/{subnet_id}/][%d] getIpAMIpsSubnetIdNotFound ", 404)
}

func (o *GetIPAMIpsSubnetIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMIpsSubnetIDMethodNotAllowed creates a GetIPAMIpsSubnetIDMethodNotAllowed with default headers values
func NewGetIPAMIpsSubnetIDMethodNotAllowed() *GetIPAMIpsSubnetIDMethodNotAllowed {
	return &GetIPAMIpsSubnetIDMethodNotAllowed{}
}

/*GetIPAMIpsSubnetIDMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type GetIPAMIpsSubnetIDMethodNotAllowed struct {
}

func (o *GetIPAMIpsSubnetIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/1.0/ips/subnet_id/{subnet_id}/][%d] getIpAMIpsSubnetIdMethodNotAllowed ", 405)
}

func (o *GetIPAMIpsSubnetIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMIpsSubnetIDGone creates a GetIPAMIpsSubnetIDGone with default headers values
func NewGetIPAMIpsSubnetIDGone() *GetIPAMIpsSubnetIDGone {
	return &GetIPAMIpsSubnetIDGone{}
}

/*GetIPAMIpsSubnetIDGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type GetIPAMIpsSubnetIDGone struct {
}

func (o *GetIPAMIpsSubnetIDGone) Error() string {
	return fmt.Sprintf("[GET /api/1.0/ips/subnet_id/{subnet_id}/][%d] getIpAMIpsSubnetIdGone ", 410)
}

func (o *GetIPAMIpsSubnetIDGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMIpsSubnetIDInternalServerError creates a GetIPAMIpsSubnetIDInternalServerError with default headers values
func NewGetIPAMIpsSubnetIDInternalServerError() *GetIPAMIpsSubnetIDInternalServerError {
	return &GetIPAMIpsSubnetIDInternalServerError{}
}

/*GetIPAMIpsSubnetIDInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type GetIPAMIpsSubnetIDInternalServerError struct {
}

func (o *GetIPAMIpsSubnetIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/1.0/ips/subnet_id/{subnet_id}/][%d] getIpAMIpsSubnetIdInternalServerError ", 500)
}

func (o *GetIPAMIpsSubnetIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMIpsSubnetIDServiceUnavailable creates a GetIPAMIpsSubnetIDServiceUnavailable with default headers values
func NewGetIPAMIpsSubnetIDServiceUnavailable() *GetIPAMIpsSubnetIDServiceUnavailable {
	return &GetIPAMIpsSubnetIDServiceUnavailable{}
}

/*GetIPAMIpsSubnetIDServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type GetIPAMIpsSubnetIDServiceUnavailable struct {
}

func (o *GetIPAMIpsSubnetIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/1.0/ips/subnet_id/{subnet_id}/][%d] getIpAMIpsSubnetIdServiceUnavailable ", 503)
}

func (o *GetIPAMIpsSubnetIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetIPAMIpsSubnetIDOKBody get IP a m ips subnet ID o k body
swagger:model GetIPAMIpsSubnetIDOKBody
*/
type GetIPAMIpsSubnetIDOKBody struct {

	// ips
	Ips []*IpsItems0 `json:"ips"`
}

// Validate validates this get IP a m ips subnet ID o k body
func (o *GetIPAMIpsSubnetIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIPAMIpsSubnetIDOKBody) validateIps(formats strfmt.Registry) error {

	if swag.IsZero(o.Ips) { // not required
		return nil
	}

	for i := 0; i < len(o.Ips); i++ {
		if swag.IsZero(o.Ips[i]) { // not required
			continue
		}

		if o.Ips[i] != nil {
			if err := o.Ips[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getIpAMIpsSubnetIdOK" + "." + "ips" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIPAMIpsSubnetIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIPAMIpsSubnetIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetIPAMIpsSubnetIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IpsItems0 ips items0
swagger:model IpsItems0
*/
type IpsItems0 struct {

	// available
	Available interface{} `json:"available,omitempty"`

	// device
	Device interface{} `json:"device,omitempty"`

	// ip
	IP interface{} `json:"ip,omitempty"`

	// label
	Label interface{} `json:"label,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`
}

// Validate validates this ips items0
func (o *IpsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *IpsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IpsItems0) UnmarshalBinary(b []byte) error {
	var res IpsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
