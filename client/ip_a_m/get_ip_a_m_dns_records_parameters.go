// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetIPAMDNSRecordsParams creates a new GetIPAMDNSRecordsParams object
// with the default values initialized.
func NewGetIPAMDNSRecordsParams() *GetIPAMDNSRecordsParams {
	var ()
	return &GetIPAMDNSRecordsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIPAMDNSRecordsParamsWithTimeout creates a new GetIPAMDNSRecordsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIPAMDNSRecordsParamsWithTimeout(timeout time.Duration) *GetIPAMDNSRecordsParams {
	var ()
	return &GetIPAMDNSRecordsParams{

		timeout: timeout,
	}
}

// NewGetIPAMDNSRecordsParamsWithContext creates a new GetIPAMDNSRecordsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIPAMDNSRecordsParamsWithContext(ctx context.Context) *GetIPAMDNSRecordsParams {
	var ()
	return &GetIPAMDNSRecordsParams{

		Context: ctx,
	}
}

// NewGetIPAMDNSRecordsParamsWithHTTPClient creates a new GetIPAMDNSRecordsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIPAMDNSRecordsParamsWithHTTPClient(client *http.Client) *GetIPAMDNSRecordsParams {
	var ()
	return &GetIPAMDNSRecordsParams{
		HTTPClient: client,
	}
}

/*GetIPAMDNSRecordsParams contains all the parameters to send to the API endpoint
for the get IP a m dns records operation typically these are written to a http.Request
*/
type GetIPAMDNSRecordsParams struct {

	/*ChangeDate*/
	ChangeDate *string
	/*Content
	  Content (e.g. IP address for type A)

	*/
	Content *string
	/*DNSZone*/
	DNSZone *string
	/*Domain
	  name of the domain

	*/
	Domain *string
	/*Name
	  filter by name (Added in v6.0.0)

	*/
	Name *string
	/*Nameserver
	  Nameserver

	*/
	Nameserver *string
	/*Tags
	  filter by tags. comma separated for multiple tags (This is an OR filter, gets all the devices for all comma separated tags)

	*/
	Tags *string
	/*TagsAnd
	  filter by all the tags, separated by comma. (This is an AND filter and all tags have to match for filter, this was added in v6.3.1)

	*/
	TagsAnd *string
	/*TTL
	  TTL value.

	*/
	TTL *string
	/*Type
	  type of the record. e.g. AAAA

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithTimeout(timeout time.Duration) *GetIPAMDNSRecordsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithContext(ctx context.Context) *GetIPAMDNSRecordsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithHTTPClient(client *http.Client) *GetIPAMDNSRecordsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChangeDate adds the changeDate to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithChangeDate(changeDate *string) *GetIPAMDNSRecordsParams {
	o.SetChangeDate(changeDate)
	return o
}

// SetChangeDate adds the changeDate to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetChangeDate(changeDate *string) {
	o.ChangeDate = changeDate
}

// WithContent adds the content to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithContent(content *string) *GetIPAMDNSRecordsParams {
	o.SetContent(content)
	return o
}

// SetContent adds the content to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetContent(content *string) {
	o.Content = content
}

// WithDNSZone adds the dNSZone to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithDNSZone(dNSZone *string) *GetIPAMDNSRecordsParams {
	o.SetDNSZone(dNSZone)
	return o
}

// SetDNSZone adds the dnsZone to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetDNSZone(dNSZone *string) {
	o.DNSZone = dNSZone
}

// WithDomain adds the domain to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithDomain(domain *string) *GetIPAMDNSRecordsParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithName adds the name to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithName(name *string) *GetIPAMDNSRecordsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetName(name *string) {
	o.Name = name
}

// WithNameserver adds the nameserver to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithNameserver(nameserver *string) *GetIPAMDNSRecordsParams {
	o.SetNameserver(nameserver)
	return o
}

// SetNameserver adds the nameserver to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetNameserver(nameserver *string) {
	o.Nameserver = nameserver
}

// WithTags adds the tags to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithTags(tags *string) *GetIPAMDNSRecordsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithTagsAnd adds the tagsAnd to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithTagsAnd(tagsAnd *string) *GetIPAMDNSRecordsParams {
	o.SetTagsAnd(tagsAnd)
	return o
}

// SetTagsAnd adds the tagsAnd to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetTagsAnd(tagsAnd *string) {
	o.TagsAnd = tagsAnd
}

// WithTTL adds the ttl to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithTTL(ttl *string) *GetIPAMDNSRecordsParams {
	o.SetTTL(ttl)
	return o
}

// SetTTL adds the ttl to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetTTL(ttl *string) {
	o.TTL = ttl
}

// WithType adds the typeVar to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) WithType(typeVar *string) *GetIPAMDNSRecordsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get IP a m dns records params
func (o *GetIPAMDNSRecordsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetIPAMDNSRecordsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ChangeDate != nil {

		// query param change_date
		var qrChangeDate string
		if o.ChangeDate != nil {
			qrChangeDate = *o.ChangeDate
		}
		qChangeDate := qrChangeDate
		if qChangeDate != "" {
			if err := r.SetQueryParam("change_date", qChangeDate); err != nil {
				return err
			}
		}

	}

	if o.Content != nil {

		// query param content
		var qrContent string
		if o.Content != nil {
			qrContent = *o.Content
		}
		qContent := qrContent
		if qContent != "" {
			if err := r.SetQueryParam("content", qContent); err != nil {
				return err
			}
		}

	}

	if o.DNSZone != nil {

		// query param dns_zone
		var qrDNSZone string
		if o.DNSZone != nil {
			qrDNSZone = *o.DNSZone
		}
		qDNSZone := qrDNSZone
		if qDNSZone != "" {
			if err := r.SetQueryParam("dns_zone", qDNSZone); err != nil {
				return err
			}
		}

	}

	if o.Domain != nil {

		// query param domain
		var qrDomain string
		if o.Domain != nil {
			qrDomain = *o.Domain
		}
		qDomain := qrDomain
		if qDomain != "" {
			if err := r.SetQueryParam("domain", qDomain); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Nameserver != nil {

		// query param nameserver
		var qrNameserver string
		if o.Nameserver != nil {
			qrNameserver = *o.Nameserver
		}
		qNameserver := qrNameserver
		if qNameserver != "" {
			if err := r.SetQueryParam("nameserver", qNameserver); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// query param tags
		var qrTags string
		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {
			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}

	}

	if o.TagsAnd != nil {

		// query param tags_and
		var qrTagsAnd string
		if o.TagsAnd != nil {
			qrTagsAnd = *o.TagsAnd
		}
		qTagsAnd := qrTagsAnd
		if qTagsAnd != "" {
			if err := r.SetQueryParam("tags_and", qTagsAnd); err != nil {
				return err
			}
		}

	}

	if o.TTL != nil {

		// query param ttl
		var qrTTL string
		if o.TTL != nil {
			qrTTL = *o.TTL
		}
		qTTL := qrTTL
		if qTTL != "" {
			if err := r.SetQueryParam("ttl", qTTL); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
