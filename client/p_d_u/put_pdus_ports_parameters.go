// Code generated by go-swagger; DO NOT EDIT.

package p_d_u

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutPdusPortsParams creates a new PutPdusPortsParams object
// with the default values initialized.
func NewPutPdusPortsParams() *PutPdusPortsParams {
	var ()
	return &PutPdusPortsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutPdusPortsParamsWithTimeout creates a new PutPdusPortsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutPdusPortsParamsWithTimeout(timeout time.Duration) *PutPdusPortsParams {
	var ()
	return &PutPdusPortsParams{

		timeout: timeout,
	}
}

// NewPutPdusPortsParamsWithContext creates a new PutPdusPortsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutPdusPortsParamsWithContext(ctx context.Context) *PutPdusPortsParams {
	var ()
	return &PutPdusPortsParams{

		Context: ctx,
	}
}

// NewPutPdusPortsParamsWithHTTPClient creates a new PutPdusPortsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutPdusPortsParamsWithHTTPClient(client *http.Client) *PutPdusPortsParams {
	var ()
	return &PutPdusPortsParams{
		HTTPClient: client,
	}
}

/*PutPdusPortsParams contains all the parameters to send to the API endpoint
for the put pdus ports operation typically these are written to a http.Request
*/
type PutPdusPortsParams struct {

	/*AssetID
	  ID of the asset the port points to

	*/
	AssetID *string
	/*Device
	  Name of the device the port points to.

	*/
	Device *string
	/*DeviceID
	  ID of the device the port points to

	*/
	DeviceID *string
	/*Name
	  name of the existing PDU port

	*/
	Name string
	/*OutletName
	  outlet name

	*/
	OutletName *string
	/*ParentPdu
	  name of the parent PDU. Must be unique name. Added in v5.8.2

	*/
	ParentPdu *string
	/*ParentPduID
	  Available from /api/api/1.0/pdus/ or Tools

	*/
	ParentPduID *string
	/*PduID
	  ID of the PDU the port points to

	*/
	PduID *string
	/*PsuLabel
	  typically used when device has multiple power supplies, e.g.: power supply 1, power supply 2, etc.

	*/
	PsuLabel *string
	/*Watts
	  per power supply

	*/
	Watts *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put pdus ports params
func (o *PutPdusPortsParams) WithTimeout(timeout time.Duration) *PutPdusPortsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put pdus ports params
func (o *PutPdusPortsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put pdus ports params
func (o *PutPdusPortsParams) WithContext(ctx context.Context) *PutPdusPortsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put pdus ports params
func (o *PutPdusPortsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put pdus ports params
func (o *PutPdusPortsParams) WithHTTPClient(client *http.Client) *PutPdusPortsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put pdus ports params
func (o *PutPdusPortsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssetID adds the assetID to the put pdus ports params
func (o *PutPdusPortsParams) WithAssetID(assetID *string) *PutPdusPortsParams {
	o.SetAssetID(assetID)
	return o
}

// SetAssetID adds the assetId to the put pdus ports params
func (o *PutPdusPortsParams) SetAssetID(assetID *string) {
	o.AssetID = assetID
}

// WithDevice adds the device to the put pdus ports params
func (o *PutPdusPortsParams) WithDevice(device *string) *PutPdusPortsParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the put pdus ports params
func (o *PutPdusPortsParams) SetDevice(device *string) {
	o.Device = device
}

// WithDeviceID adds the deviceID to the put pdus ports params
func (o *PutPdusPortsParams) WithDeviceID(deviceID *string) *PutPdusPortsParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the put pdus ports params
func (o *PutPdusPortsParams) SetDeviceID(deviceID *string) {
	o.DeviceID = deviceID
}

// WithName adds the name to the put pdus ports params
func (o *PutPdusPortsParams) WithName(name string) *PutPdusPortsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the put pdus ports params
func (o *PutPdusPortsParams) SetName(name string) {
	o.Name = name
}

// WithOutletName adds the outletName to the put pdus ports params
func (o *PutPdusPortsParams) WithOutletName(outletName *string) *PutPdusPortsParams {
	o.SetOutletName(outletName)
	return o
}

// SetOutletName adds the outletName to the put pdus ports params
func (o *PutPdusPortsParams) SetOutletName(outletName *string) {
	o.OutletName = outletName
}

// WithParentPdu adds the parentPdu to the put pdus ports params
func (o *PutPdusPortsParams) WithParentPdu(parentPdu *string) *PutPdusPortsParams {
	o.SetParentPdu(parentPdu)
	return o
}

// SetParentPdu adds the parentPdu to the put pdus ports params
func (o *PutPdusPortsParams) SetParentPdu(parentPdu *string) {
	o.ParentPdu = parentPdu
}

// WithParentPduID adds the parentPduID to the put pdus ports params
func (o *PutPdusPortsParams) WithParentPduID(parentPduID *string) *PutPdusPortsParams {
	o.SetParentPduID(parentPduID)
	return o
}

// SetParentPduID adds the parentPduId to the put pdus ports params
func (o *PutPdusPortsParams) SetParentPduID(parentPduID *string) {
	o.ParentPduID = parentPduID
}

// WithPduID adds the pduID to the put pdus ports params
func (o *PutPdusPortsParams) WithPduID(pduID *string) *PutPdusPortsParams {
	o.SetPduID(pduID)
	return o
}

// SetPduID adds the pduId to the put pdus ports params
func (o *PutPdusPortsParams) SetPduID(pduID *string) {
	o.PduID = pduID
}

// WithPsuLabel adds the psuLabel to the put pdus ports params
func (o *PutPdusPortsParams) WithPsuLabel(psuLabel *string) *PutPdusPortsParams {
	o.SetPsuLabel(psuLabel)
	return o
}

// SetPsuLabel adds the psuLabel to the put pdus ports params
func (o *PutPdusPortsParams) SetPsuLabel(psuLabel *string) {
	o.PsuLabel = psuLabel
}

// WithWatts adds the watts to the put pdus ports params
func (o *PutPdusPortsParams) WithWatts(watts *string) *PutPdusPortsParams {
	o.SetWatts(watts)
	return o
}

// SetWatts adds the watts to the put pdus ports params
func (o *PutPdusPortsParams) SetWatts(watts *string) {
	o.Watts = watts
}

// WriteToRequest writes these params to a swagger request
func (o *PutPdusPortsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AssetID != nil {

		// form param asset_id
		var frAssetID string
		if o.AssetID != nil {
			frAssetID = *o.AssetID
		}
		fAssetID := frAssetID
		if fAssetID != "" {
			if err := r.SetFormParam("asset_id", fAssetID); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// form param device
		var frDevice string
		if o.Device != nil {
			frDevice = *o.Device
		}
		fDevice := frDevice
		if fDevice != "" {
			if err := r.SetFormParam("device", fDevice); err != nil {
				return err
			}
		}

	}

	if o.DeviceID != nil {

		// form param device_id
		var frDeviceID string
		if o.DeviceID != nil {
			frDeviceID = *o.DeviceID
		}
		fDeviceID := frDeviceID
		if fDeviceID != "" {
			if err := r.SetFormParam("device_id", fDeviceID); err != nil {
				return err
			}
		}

	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.OutletName != nil {

		// form param outlet_name
		var frOutletName string
		if o.OutletName != nil {
			frOutletName = *o.OutletName
		}
		fOutletName := frOutletName
		if fOutletName != "" {
			if err := r.SetFormParam("outlet_name", fOutletName); err != nil {
				return err
			}
		}

	}

	if o.ParentPdu != nil {

		// form param parent_pdu
		var frParentPdu string
		if o.ParentPdu != nil {
			frParentPdu = *o.ParentPdu
		}
		fParentPdu := frParentPdu
		if fParentPdu != "" {
			if err := r.SetFormParam("parent_pdu", fParentPdu); err != nil {
				return err
			}
		}

	}

	if o.ParentPduID != nil {

		// form param parent_pdu_id
		var frParentPduID string
		if o.ParentPduID != nil {
			frParentPduID = *o.ParentPduID
		}
		fParentPduID := frParentPduID
		if fParentPduID != "" {
			if err := r.SetFormParam("parent_pdu_id", fParentPduID); err != nil {
				return err
			}
		}

	}

	if o.PduID != nil {

		// form param pdu_id
		var frPduID string
		if o.PduID != nil {
			frPduID = *o.PduID
		}
		fPduID := frPduID
		if fPduID != "" {
			if err := r.SetFormParam("pdu_id", fPduID); err != nil {
				return err
			}
		}

	}

	if o.PsuLabel != nil {

		// form param psu_label
		var frPsuLabel string
		if o.PsuLabel != nil {
			frPsuLabel = *o.PsuLabel
		}
		fPsuLabel := frPsuLabel
		if fPsuLabel != "" {
			if err := r.SetFormParam("psu_label", fPsuLabel); err != nil {
				return err
			}
		}

	}

	if o.Watts != nil {

		// form param watts
		var frWatts string
		if o.Watts != nil {
			frWatts = *o.Watts
		}
		fWatts := frWatts
		if fWatts != "" {
			if err := r.SetFormParam("watts", fWatts); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
