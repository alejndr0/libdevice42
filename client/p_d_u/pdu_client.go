// Code generated by go-swagger; DO NOT EDIT.

package p_d_u

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new p d u API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for p d u API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePdus(params *DeletePdusParams) (*DeletePdusOK, error)

	DeletePdusRack(params *DeletePdusRackParams) (*DeletePdusRackOK, error)

	GetPduModels(params *GetPduModelsParams) (*GetPduModelsOK, error)

	GetPdus(params *GetPdusParams) (*GetPdusOK, error)

	GetPdusID(params *GetPdusIDParams) (*GetPdusIDOK, error)

	PostPduModels(params *PostPduModelsParams) (*PostPduModelsOK, error)

	PostPduModelsPorts(params *PostPduModelsPortsParams) (*PostPduModelsPortsOK, error)

	PostPdus(params *PostPdusParams) (*PostPdusOK, error)

	PostPdusPorts(params *PostPdusPortsParams) (*PostPdusPortsOK, error)

	PostPdusRack(params *PostPdusRackParams) (*PostPdusRackOK, error)

	PutPdus(params *PutPdusParams) (*PutPdusOK, error)

	PutPdusPorts(params *PutPdusPortsParams) (*PutPdusPortsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeletePdus deletes p d u

  This API is used to delete the pdu with the pdu id supplied as the required argument.
*/
func (a *Client) DeletePdus(params *DeletePdusParams) (*DeletePdusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePdusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePdus",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/pdus/{ID}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePdusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePdusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePdus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePdusRack deletes p d u from a rack

  This API is used to delete from its rack the device with the device id supplied as the required argument. (The device itself is not deleted).
*/
func (a *Client) DeletePdusRack(params *DeletePdusRackParams) (*DeletePdusRackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePdusRackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePdusRack",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/pdus/rack/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePdusRackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePdusRackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePdusRack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPduModels gs e t method retrieves all p d u models

  Get all PDU Models
*/
func (a *Client) GetPduModels(params *GetPduModelsParams) (*GetPduModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPduModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPdu_models",
		Method:             "GET",
		PathPattern:        "/api/1.0/pdu_models/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPduModelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPduModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPdu_models: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPdus gs e t method retrieves all p d us

  Get all PDUs
*/
func (a *Client) GetPdus(params *GetPdusParams) (*GetPdusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPdusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPdus",
		Method:             "GET",
		PathPattern:        "/api/1.0/pdus/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPdusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPdusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPdus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPdusID gets p d u by ID

  Retrieve detailed information about a specific PDU by PDU ID. This also includes end point connections.
*/
func (a *Client) GetPdusID(params *GetPdusIDParams) (*GetPdusIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPdusIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPdusID",
		Method:             "GET",
		PathPattern:        "/api/1.0/pdus/{ID}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPdusIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPdusIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPdusID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPduModels creates update p d u models

  Create / Update PDU Models
*/
func (a *Client) PostPduModels(params *PostPduModelsParams) (*PostPduModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPduModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPdu_models",
		Method:             "POST",
		PathPattern:        "/api/1.0/pdu_models/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPduModelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPduModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postPdu_models: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPduModelsPorts creates p d u model ports

  Create PDU Model Ports. Required parameters: <ul><li>pdu_model_id <b>OR</b> pdu_model_name</li> <li>count</li> <li>type</li></ul>
*/
func (a *Client) PostPduModelsPorts(params *PostPduModelsPortsParams) (*PostPduModelsPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPduModelsPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPdu_modelsPorts",
		Method:             "POST",
		PathPattern:        "/api/1.0/pdu_models/ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPduModelsPortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPduModelsPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postPdu_modelsPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPdus this call will create p d us

  Create PDUs
*/
func (a *Client) PostPdus(params *PostPdusParams) (*PostPdusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPdusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPdus",
		Method:             "POST",
		PathPattern:        "/api/1.0/pdus/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPdusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPdusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postPdus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPdusPorts updates p d u ports w no names

  Assign a name and/or an object (see below) objects to a pdu port. It will pick the lowest port id # available (or first available port in order created).
*/
func (a *Client) PostPdusPorts(params *PostPdusPortsParams) (*PostPdusPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPdusPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPdusPorts",
		Method:             "POST",
		PathPattern:        "/api/1.0/pdus/ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPdusPortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPdusPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postPdusPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPdusRack this call will add update p d us in or around a rack

  Add / Update PDUs in Racks
*/
func (a *Client) PostPdusRack(params *PostPdusRackParams) (*PostPdusRackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPdusRackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPdusRack",
		Method:             "POST",
		PathPattern:        "/api/1.0/pdus/rack/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPdusRackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPdusRackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postPdusRack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutPdus updates p d us

  This call will update existing PDUs. PDU ID or name required.
*/
func (a *Client) PutPdus(params *PutPdusParams) (*PutPdusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPdusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPdus",
		Method:             "PUT",
		PathPattern:        "/api/1.0/pdus/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutPdusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPdusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putPdus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutPdusPorts updates p d u ports w names

  This call requires the name of an existing pdu port and enables you to add new or edit existing values for that particular PDU port. Requires parent_pdu_id or parent_pdu
*/
func (a *Client) PutPdusPorts(params *PutPdusPortsParams) (*PutPdusPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPdusPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPdusPorts",
		Method:             "PUT",
		PathPattern:        "/api/1.0/pdus/ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutPdusPortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPdusPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putPdusPorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
