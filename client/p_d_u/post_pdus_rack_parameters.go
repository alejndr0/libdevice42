// Code generated by go-swagger; DO NOT EDIT.

package p_d_u

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostPdusRackParams creates a new PostPdusRackParams object
// with the default values initialized.
func NewPostPdusRackParams() *PostPdusRackParams {
	var ()
	return &PostPdusRackParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostPdusRackParamsWithTimeout creates a new PostPdusRackParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostPdusRackParamsWithTimeout(timeout time.Duration) *PostPdusRackParams {
	var ()
	return &PostPdusRackParams{

		timeout: timeout,
	}
}

// NewPostPdusRackParamsWithContext creates a new PostPdusRackParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostPdusRackParamsWithContext(ctx context.Context) *PostPdusRackParams {
	var ()
	return &PostPdusRackParams{

		Context: ctx,
	}
}

// NewPostPdusRackParamsWithHTTPClient creates a new PostPdusRackParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostPdusRackParamsWithHTTPClient(client *http.Client) *PostPdusRackParams {
	var ()
	return &PostPdusRackParams{
		HTTPClient: client,
	}
}

/*PostPdusRackParams contains all the parameters to send to the API endpoint
for the post pdus rack operation typically these are written to a http.Request
*/
type PostPdusRackParams struct {

	/*Building*/
	Building *string
	/*Orientation
	  orientation of the PDU in rack. back for rear facing, otherwise front is default.

	*/
	Orientation *string
	/*Pdu
	  name of the PDU. only works if the name is unique in the system

	*/
	Pdu *string
	/*PduID
	  ID of the PDU to be edited

	*/
	PduID *string
	/*RackID
	  This is the ID of the rack. It can be obtained from Tools > Import > Import Racked Devices or /api/api/1.0/racks/

	*/
	RackID *string
	/*StartAt
	  Required if adding to rack. U Start location.

	*/
	StartAt *string
	/*Where
	  Location in a rack. Note: If mounted a size must be provided or available from the hardware model.

	*/
	Where *string
	/*XPos
	  A number between 0 and 2520 representing the position within the u slot in increments of 252, which is equal to 1/10th of the width of the rack. 0 will place a device flush left, 1260 will place the left side of a device in center.

	*/
	XPos *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post pdus rack params
func (o *PostPdusRackParams) WithTimeout(timeout time.Duration) *PostPdusRackParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post pdus rack params
func (o *PostPdusRackParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post pdus rack params
func (o *PostPdusRackParams) WithContext(ctx context.Context) *PostPdusRackParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post pdus rack params
func (o *PostPdusRackParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post pdus rack params
func (o *PostPdusRackParams) WithHTTPClient(client *http.Client) *PostPdusRackParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post pdus rack params
func (o *PostPdusRackParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBuilding adds the building to the post pdus rack params
func (o *PostPdusRackParams) WithBuilding(building *string) *PostPdusRackParams {
	o.SetBuilding(building)
	return o
}

// SetBuilding adds the building to the post pdus rack params
func (o *PostPdusRackParams) SetBuilding(building *string) {
	o.Building = building
}

// WithOrientation adds the orientation to the post pdus rack params
func (o *PostPdusRackParams) WithOrientation(orientation *string) *PostPdusRackParams {
	o.SetOrientation(orientation)
	return o
}

// SetOrientation adds the orientation to the post pdus rack params
func (o *PostPdusRackParams) SetOrientation(orientation *string) {
	o.Orientation = orientation
}

// WithPdu adds the pdu to the post pdus rack params
func (o *PostPdusRackParams) WithPdu(pdu *string) *PostPdusRackParams {
	o.SetPdu(pdu)
	return o
}

// SetPdu adds the pdu to the post pdus rack params
func (o *PostPdusRackParams) SetPdu(pdu *string) {
	o.Pdu = pdu
}

// WithPduID adds the pduID to the post pdus rack params
func (o *PostPdusRackParams) WithPduID(pduID *string) *PostPdusRackParams {
	o.SetPduID(pduID)
	return o
}

// SetPduID adds the pduId to the post pdus rack params
func (o *PostPdusRackParams) SetPduID(pduID *string) {
	o.PduID = pduID
}

// WithRackID adds the rackID to the post pdus rack params
func (o *PostPdusRackParams) WithRackID(rackID *string) *PostPdusRackParams {
	o.SetRackID(rackID)
	return o
}

// SetRackID adds the rackId to the post pdus rack params
func (o *PostPdusRackParams) SetRackID(rackID *string) {
	o.RackID = rackID
}

// WithStartAt adds the startAt to the post pdus rack params
func (o *PostPdusRackParams) WithStartAt(startAt *string) *PostPdusRackParams {
	o.SetStartAt(startAt)
	return o
}

// SetStartAt adds the startAt to the post pdus rack params
func (o *PostPdusRackParams) SetStartAt(startAt *string) {
	o.StartAt = startAt
}

// WithWhere adds the where to the post pdus rack params
func (o *PostPdusRackParams) WithWhere(where *string) *PostPdusRackParams {
	o.SetWhere(where)
	return o
}

// SetWhere adds the where to the post pdus rack params
func (o *PostPdusRackParams) SetWhere(where *string) {
	o.Where = where
}

// WithXPos adds the xPos to the post pdus rack params
func (o *PostPdusRackParams) WithXPos(xPos *int64) *PostPdusRackParams {
	o.SetXPos(xPos)
	return o
}

// SetXPos adds the xPos to the post pdus rack params
func (o *PostPdusRackParams) SetXPos(xPos *int64) {
	o.XPos = xPos
}

// WriteToRequest writes these params to a swagger request
func (o *PostPdusRackParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Building != nil {

		// form param building
		var frBuilding string
		if o.Building != nil {
			frBuilding = *o.Building
		}
		fBuilding := frBuilding
		if fBuilding != "" {
			if err := r.SetFormParam("building", fBuilding); err != nil {
				return err
			}
		}

	}

	if o.Orientation != nil {

		// form param orientation
		var frOrientation string
		if o.Orientation != nil {
			frOrientation = *o.Orientation
		}
		fOrientation := frOrientation
		if fOrientation != "" {
			if err := r.SetFormParam("orientation", fOrientation); err != nil {
				return err
			}
		}

	}

	if o.Pdu != nil {

		// form param pdu
		var frPdu string
		if o.Pdu != nil {
			frPdu = *o.Pdu
		}
		fPdu := frPdu
		if fPdu != "" {
			if err := r.SetFormParam("pdu", fPdu); err != nil {
				return err
			}
		}

	}

	if o.PduID != nil {

		// form param pdu_id
		var frPduID string
		if o.PduID != nil {
			frPduID = *o.PduID
		}
		fPduID := frPduID
		if fPduID != "" {
			if err := r.SetFormParam("pdu_id", fPduID); err != nil {
				return err
			}
		}

	}

	if o.RackID != nil {

		// form param rack_id
		var frRackID string
		if o.RackID != nil {
			frRackID = *o.RackID
		}
		fRackID := frRackID
		if fRackID != "" {
			if err := r.SetFormParam("rack_id", fRackID); err != nil {
				return err
			}
		}

	}

	if o.StartAt != nil {

		// form param start_at
		var frStartAt string
		if o.StartAt != nil {
			frStartAt = *o.StartAt
		}
		fStartAt := frStartAt
		if fStartAt != "" {
			if err := r.SetFormParam("start_at", fStartAt); err != nil {
				return err
			}
		}

	}

	if o.Where != nil {

		// form param where
		var frWhere string
		if o.Where != nil {
			frWhere = *o.Where
		}
		fWhere := frWhere
		if fWhere != "" {
			if err := r.SetFormParam("where", fWhere); err != nil {
				return err
			}
		}

	}

	if o.XPos != nil {

		// form param x_pos
		var frXPos int64
		if o.XPos != nil {
			frXPos = *o.XPos
		}
		fXPos := swag.FormatInt64(frXPos)
		if fXPos != "" {
			if err := r.SetFormParam("x_pos", fXPos); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
