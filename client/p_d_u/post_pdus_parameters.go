// Code generated by go-swagger; DO NOT EDIT.

package p_d_u

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostPdusParams creates a new PostPdusParams object
// with the default values initialized.
func NewPostPdusParams() *PostPdusParams {
	var ()
	return &PostPdusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostPdusParamsWithTimeout creates a new PostPdusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostPdusParamsWithTimeout(timeout time.Duration) *PostPdusParams {
	var ()
	return &PostPdusParams{

		timeout: timeout,
	}
}

// NewPostPdusParamsWithContext creates a new PostPdusParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostPdusParamsWithContext(ctx context.Context) *PostPdusParams {
	var ()
	return &PostPdusParams{

		Context: ctx,
	}
}

// NewPostPdusParamsWithHTTPClient creates a new PostPdusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostPdusParamsWithHTTPClient(client *http.Client) *PostPdusParams {
	var ()
	return &PostPdusParams{
		HTTPClient: client,
	}
}

/*PostPdusParams contains all the parameters to send to the API endpoint
for the post pdus operation typically these are written to a http.Request
*/
type PostPdusParams struct {

	/*Category
	  If multitenancy is on, admin groups that have access to this object are specified here, e.g. Prod_East:no,Corp:yes specifies that the admin groups for this object are Prod_East with view only permission and Corp with change permission.

	*/
	Category *string
	/*Device
	  If you want to associate asset information with this PDU, use device type 'other'

	*/
	Device *string
	/*Name
	  PDU name

	*/
	Name string
	/*Notes
	  Any additional notes

	*/
	Notes *string
	/*PduModel
	  Name of the PDU model. You can use this instead of the ID above. (Added in v5.8.2)

	*/
	PduModel *string
	/*PduModelID
	  ID of the PDU model you want to update

	*/
	PduModelID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post pdus params
func (o *PostPdusParams) WithTimeout(timeout time.Duration) *PostPdusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post pdus params
func (o *PostPdusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post pdus params
func (o *PostPdusParams) WithContext(ctx context.Context) *PostPdusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post pdus params
func (o *PostPdusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post pdus params
func (o *PostPdusParams) WithHTTPClient(client *http.Client) *PostPdusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post pdus params
func (o *PostPdusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the post pdus params
func (o *PostPdusParams) WithCategory(category *string) *PostPdusParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the post pdus params
func (o *PostPdusParams) SetCategory(category *string) {
	o.Category = category
}

// WithDevice adds the device to the post pdus params
func (o *PostPdusParams) WithDevice(device *string) *PostPdusParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the post pdus params
func (o *PostPdusParams) SetDevice(device *string) {
	o.Device = device
}

// WithName adds the name to the post pdus params
func (o *PostPdusParams) WithName(name string) *PostPdusParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post pdus params
func (o *PostPdusParams) SetName(name string) {
	o.Name = name
}

// WithNotes adds the notes to the post pdus params
func (o *PostPdusParams) WithNotes(notes *string) *PostPdusParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the post pdus params
func (o *PostPdusParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithPduModel adds the pduModel to the post pdus params
func (o *PostPdusParams) WithPduModel(pduModel *string) *PostPdusParams {
	o.SetPduModel(pduModel)
	return o
}

// SetPduModel adds the pduModel to the post pdus params
func (o *PostPdusParams) SetPduModel(pduModel *string) {
	o.PduModel = pduModel
}

// WithPduModelID adds the pduModelID to the post pdus params
func (o *PostPdusParams) WithPduModelID(pduModelID *string) *PostPdusParams {
	o.SetPduModelID(pduModelID)
	return o
}

// SetPduModelID adds the pduModelId to the post pdus params
func (o *PostPdusParams) SetPduModelID(pduModelID *string) {
	o.PduModelID = pduModelID
}

// WriteToRequest writes these params to a swagger request
func (o *PostPdusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// form param category
		var frCategory string
		if o.Category != nil {
			frCategory = *o.Category
		}
		fCategory := frCategory
		if fCategory != "" {
			if err := r.SetFormParam("category", fCategory); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// form param device
		var frDevice string
		if o.Device != nil {
			frDevice = *o.Device
		}
		fDevice := frDevice
		if fDevice != "" {
			if err := r.SetFormParam("device", fDevice); err != nil {
				return err
			}
		}

	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if o.PduModel != nil {

		// form param pdu_model
		var frPduModel string
		if o.PduModel != nil {
			frPduModel = *o.PduModel
		}
		fPduModel := frPduModel
		if fPduModel != "" {
			if err := r.SetFormParam("pdu_model", fPduModel); err != nil {
				return err
			}
		}

	}

	if o.PduModelID != nil {

		// form param pdu_model_id
		var frPduModelID string
		if o.PduModelID != nil {
			frPduModelID = *o.PduModelID
		}
		fPduModelID := frPduModelID
		if fPduModelID != "" {
			if err := r.SetFormParam("pdu_model_id", fPduModelID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
