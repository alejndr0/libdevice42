// Code generated by go-swagger; DO NOT EDIT.

package p_d_u

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutPdusParams creates a new PutPdusParams object
// with the default values initialized.
func NewPutPdusParams() *PutPdusParams {
	var ()
	return &PutPdusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutPdusParamsWithTimeout creates a new PutPdusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutPdusParamsWithTimeout(timeout time.Duration) *PutPdusParams {
	var ()
	return &PutPdusParams{

		timeout: timeout,
	}
}

// NewPutPdusParamsWithContext creates a new PutPdusParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutPdusParamsWithContext(ctx context.Context) *PutPdusParams {
	var ()
	return &PutPdusParams{

		Context: ctx,
	}
}

// NewPutPdusParamsWithHTTPClient creates a new PutPdusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutPdusParamsWithHTTPClient(client *http.Client) *PutPdusParams {
	var ()
	return &PutPdusParams{
		HTTPClient: client,
	}
}

/*PutPdusParams contains all the parameters to send to the API endpoint
for the put pdus operation typically these are written to a http.Request
*/
type PutPdusParams struct {

	/*Category
	  If multitenancy is on, admin groups that have access to this category, will have access to the power unit. If this parameter is present with no value, all categories are deleted.

	*/
	Category *string
	/*Device
	  If you want to associate asset information with this PDU, use device type 'other'

	*/
	Device *string
	/*Name
	  Use instead of PDU ID. Must be unique

	*/
	Name string
	/*NewName
	  Use to change name of object.

	*/
	NewName *string
	/*Notes
	  Any additional notes

	*/
	Notes *string
	/*ObjectCategory*/
	ObjectCategory *string
	/*OutletName
	  outlet name

	*/
	OutletName *string
	/*PduID
	  ID of the PDU to be edited

	*/
	PduID *string
	/*PduModel
	  Name of the PDU model. You can use this instead of the ID above. (Added in v5.8.2)

	*/
	PduModel *string
	/*PduModelID
	  ID of the PDU model you want to update

	*/
	PduModelID *string
	/*PortNumber
	  port number

	*/
	PortNumber *string
	/*RatedPower*/
	RatedPower *string
	/*StorageRoom
	  Name of storage room to apply power unit to

	*/
	StorageRoom *string
	/*StorageRoomID
	  ID of storage room to assign power unit to

	*/
	StorageRoomID *string
	/*Type
	  Type of power unit (pdu, ups, ats)

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put pdus params
func (o *PutPdusParams) WithTimeout(timeout time.Duration) *PutPdusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put pdus params
func (o *PutPdusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put pdus params
func (o *PutPdusParams) WithContext(ctx context.Context) *PutPdusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put pdus params
func (o *PutPdusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put pdus params
func (o *PutPdusParams) WithHTTPClient(client *http.Client) *PutPdusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put pdus params
func (o *PutPdusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the put pdus params
func (o *PutPdusParams) WithCategory(category *string) *PutPdusParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the put pdus params
func (o *PutPdusParams) SetCategory(category *string) {
	o.Category = category
}

// WithDevice adds the device to the put pdus params
func (o *PutPdusParams) WithDevice(device *string) *PutPdusParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the put pdus params
func (o *PutPdusParams) SetDevice(device *string) {
	o.Device = device
}

// WithName adds the name to the put pdus params
func (o *PutPdusParams) WithName(name string) *PutPdusParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the put pdus params
func (o *PutPdusParams) SetName(name string) {
	o.Name = name
}

// WithNewName adds the newName to the put pdus params
func (o *PutPdusParams) WithNewName(newName *string) *PutPdusParams {
	o.SetNewName(newName)
	return o
}

// SetNewName adds the newName to the put pdus params
func (o *PutPdusParams) SetNewName(newName *string) {
	o.NewName = newName
}

// WithNotes adds the notes to the put pdus params
func (o *PutPdusParams) WithNotes(notes *string) *PutPdusParams {
	o.SetNotes(notes)
	return o
}

// SetNotes adds the notes to the put pdus params
func (o *PutPdusParams) SetNotes(notes *string) {
	o.Notes = notes
}

// WithObjectCategory adds the objectCategory to the put pdus params
func (o *PutPdusParams) WithObjectCategory(objectCategory *string) *PutPdusParams {
	o.SetObjectCategory(objectCategory)
	return o
}

// SetObjectCategory adds the objectCategory to the put pdus params
func (o *PutPdusParams) SetObjectCategory(objectCategory *string) {
	o.ObjectCategory = objectCategory
}

// WithOutletName adds the outletName to the put pdus params
func (o *PutPdusParams) WithOutletName(outletName *string) *PutPdusParams {
	o.SetOutletName(outletName)
	return o
}

// SetOutletName adds the outletName to the put pdus params
func (o *PutPdusParams) SetOutletName(outletName *string) {
	o.OutletName = outletName
}

// WithPduID adds the pduID to the put pdus params
func (o *PutPdusParams) WithPduID(pduID *string) *PutPdusParams {
	o.SetPduID(pduID)
	return o
}

// SetPduID adds the pduId to the put pdus params
func (o *PutPdusParams) SetPduID(pduID *string) {
	o.PduID = pduID
}

// WithPduModel adds the pduModel to the put pdus params
func (o *PutPdusParams) WithPduModel(pduModel *string) *PutPdusParams {
	o.SetPduModel(pduModel)
	return o
}

// SetPduModel adds the pduModel to the put pdus params
func (o *PutPdusParams) SetPduModel(pduModel *string) {
	o.PduModel = pduModel
}

// WithPduModelID adds the pduModelID to the put pdus params
func (o *PutPdusParams) WithPduModelID(pduModelID *string) *PutPdusParams {
	o.SetPduModelID(pduModelID)
	return o
}

// SetPduModelID adds the pduModelId to the put pdus params
func (o *PutPdusParams) SetPduModelID(pduModelID *string) {
	o.PduModelID = pduModelID
}

// WithPortNumber adds the portNumber to the put pdus params
func (o *PutPdusParams) WithPortNumber(portNumber *string) *PutPdusParams {
	o.SetPortNumber(portNumber)
	return o
}

// SetPortNumber adds the portNumber to the put pdus params
func (o *PutPdusParams) SetPortNumber(portNumber *string) {
	o.PortNumber = portNumber
}

// WithRatedPower adds the ratedPower to the put pdus params
func (o *PutPdusParams) WithRatedPower(ratedPower *string) *PutPdusParams {
	o.SetRatedPower(ratedPower)
	return o
}

// SetRatedPower adds the ratedPower to the put pdus params
func (o *PutPdusParams) SetRatedPower(ratedPower *string) {
	o.RatedPower = ratedPower
}

// WithStorageRoom adds the storageRoom to the put pdus params
func (o *PutPdusParams) WithStorageRoom(storageRoom *string) *PutPdusParams {
	o.SetStorageRoom(storageRoom)
	return o
}

// SetStorageRoom adds the storageRoom to the put pdus params
func (o *PutPdusParams) SetStorageRoom(storageRoom *string) {
	o.StorageRoom = storageRoom
}

// WithStorageRoomID adds the storageRoomID to the put pdus params
func (o *PutPdusParams) WithStorageRoomID(storageRoomID *string) *PutPdusParams {
	o.SetStorageRoomID(storageRoomID)
	return o
}

// SetStorageRoomID adds the storageRoomId to the put pdus params
func (o *PutPdusParams) SetStorageRoomID(storageRoomID *string) {
	o.StorageRoomID = storageRoomID
}

// WithType adds the typeVar to the put pdus params
func (o *PutPdusParams) WithType(typeVar *string) *PutPdusParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the put pdus params
func (o *PutPdusParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *PutPdusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// form param category
		var frCategory string
		if o.Category != nil {
			frCategory = *o.Category
		}
		fCategory := frCategory
		if fCategory != "" {
			if err := r.SetFormParam("category", fCategory); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// form param device
		var frDevice string
		if o.Device != nil {
			frDevice = *o.Device
		}
		fDevice := frDevice
		if fDevice != "" {
			if err := r.SetFormParam("device", fDevice); err != nil {
				return err
			}
		}

	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.NewName != nil {

		// form param new_name
		var frNewName string
		if o.NewName != nil {
			frNewName = *o.NewName
		}
		fNewName := frNewName
		if fNewName != "" {
			if err := r.SetFormParam("new_name", fNewName); err != nil {
				return err
			}
		}

	}

	if o.Notes != nil {

		// form param notes
		var frNotes string
		if o.Notes != nil {
			frNotes = *o.Notes
		}
		fNotes := frNotes
		if fNotes != "" {
			if err := r.SetFormParam("notes", fNotes); err != nil {
				return err
			}
		}

	}

	if o.ObjectCategory != nil {

		// form param object_category
		var frObjectCategory string
		if o.ObjectCategory != nil {
			frObjectCategory = *o.ObjectCategory
		}
		fObjectCategory := frObjectCategory
		if fObjectCategory != "" {
			if err := r.SetFormParam("object_category", fObjectCategory); err != nil {
				return err
			}
		}

	}

	if o.OutletName != nil {

		// form param outlet_name
		var frOutletName string
		if o.OutletName != nil {
			frOutletName = *o.OutletName
		}
		fOutletName := frOutletName
		if fOutletName != "" {
			if err := r.SetFormParam("outlet_name", fOutletName); err != nil {
				return err
			}
		}

	}

	if o.PduID != nil {

		// form param pdu_id
		var frPduID string
		if o.PduID != nil {
			frPduID = *o.PduID
		}
		fPduID := frPduID
		if fPduID != "" {
			if err := r.SetFormParam("pdu_id", fPduID); err != nil {
				return err
			}
		}

	}

	if o.PduModel != nil {

		// form param pdu_model
		var frPduModel string
		if o.PduModel != nil {
			frPduModel = *o.PduModel
		}
		fPduModel := frPduModel
		if fPduModel != "" {
			if err := r.SetFormParam("pdu_model", fPduModel); err != nil {
				return err
			}
		}

	}

	if o.PduModelID != nil {

		// form param pdu_model_id
		var frPduModelID string
		if o.PduModelID != nil {
			frPduModelID = *o.PduModelID
		}
		fPduModelID := frPduModelID
		if fPduModelID != "" {
			if err := r.SetFormParam("pdu_model_id", fPduModelID); err != nil {
				return err
			}
		}

	}

	if o.PortNumber != nil {

		// form param port_number
		var frPortNumber string
		if o.PortNumber != nil {
			frPortNumber = *o.PortNumber
		}
		fPortNumber := frPortNumber
		if fPortNumber != "" {
			if err := r.SetFormParam("port_number", fPortNumber); err != nil {
				return err
			}
		}

	}

	if o.RatedPower != nil {

		// form param rated_power
		var frRatedPower string
		if o.RatedPower != nil {
			frRatedPower = *o.RatedPower
		}
		fRatedPower := frRatedPower
		if fRatedPower != "" {
			if err := r.SetFormParam("rated_power", fRatedPower); err != nil {
				return err
			}
		}

	}

	if o.StorageRoom != nil {

		// form param storage_room
		var frStorageRoom string
		if o.StorageRoom != nil {
			frStorageRoom = *o.StorageRoom
		}
		fStorageRoom := frStorageRoom
		if fStorageRoom != "" {
			if err := r.SetFormParam("storage_room", fStorageRoom); err != nil {
				return err
			}
		}

	}

	if o.StorageRoomID != nil {

		// form param storage_room_id
		var frStorageRoomID string
		if o.StorageRoomID != nil {
			frStorageRoomID = *o.StorageRoomID
		}
		fStorageRoomID := frStorageRoomID
		if fStorageRoomID != "" {
			if err := r.SetFormParam("storage_room_id", fStorageRoomID); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// form param type
		var frType string
		if o.Type != nil {
			frType = *o.Type
		}
		fType := frType
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
