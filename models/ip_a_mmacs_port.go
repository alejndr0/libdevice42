// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IPAMmacsPort IP a mmacs port
//
// swagger:model IPAMmacs_port
type IPAMmacsPort struct {

	// description
	Description interface{} `json:"description,omitempty"`

	// devices
	Devices interface{} `json:"devices,omitempty"`

	// is connected
	IsConnected interface{} `json:"is_connected,omitempty"`

	// mac ids
	MacIds interface{} `json:"mac_ids,omitempty"`

	// macs
	Macs interface{} `json:"macs,omitempty"`

	// normalized port
	NormalizedPort interface{} `json:"normalized_port,omitempty"`

	// obj label
	ObjLabel interface{} `json:"obj_label,omitempty"`

	// port
	Port interface{} `json:"port,omitempty"`

	// switch
	Switch *IPAMmacsPortSwitch `json:"switch,omitempty"`

	// switchport id
	SwitchportID interface{} `json:"switchport_id,omitempty"`

	// tags
	Tags interface{} `json:"tags,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`

	// vlan ids
	VlanIds interface{} `json:"vlan_ids,omitempty"`

	// vlans
	Vlans interface{} `json:"vlans,omitempty"`
}

// Validate validates this IP a mmacs port
func (m *IPAMmacsPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSwitch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAMmacsPort) validateSwitch(formats strfmt.Registry) error {

	if swag.IsZero(m.Switch) { // not required
		return nil
	}

	if m.Switch != nil {
		if err := m.Switch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("switch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPAMmacsPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAMmacsPort) UnmarshalBinary(b []byte) error {
	var res IPAMmacsPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IPAMmacsPortSwitch IP a mmacs port switch
//
// swagger:model IPAMmacsPortSwitch
type IPAMmacsPortSwitch struct {

	// asset no
	AssetNo interface{} `json:"asset_no,omitempty"`

	// device id
	DeviceID interface{} `json:"device_id,omitempty"`

	// device url
	DeviceURL interface{} `json:"device_url,omitempty"`

	// name
	Name interface{} `json:"name,omitempty"`

	// serial no
	SerialNo interface{} `json:"serial_no,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`

	// uuid
	UUID interface{} `json:"uuid,omitempty"`
}

// Validate validates this IP a mmacs port switch
func (m *IPAMmacsPortSwitch) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IPAMmacsPortSwitch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAMmacsPortSwitch) UnmarshalBinary(b []byte) error {
	var res IPAMmacsPortSwitch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
