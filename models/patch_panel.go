// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PatchPanel patch panel
//
// swagger:model Patch_panel
type PatchPanel struct {

	// asset contracts
	AssetContracts interface{} `json:"asset_contracts,omitempty"`

	// asset id
	AssetID interface{} `json:"asset_id,omitempty"`

	// asset no
	AssetNo interface{} `json:"asset_no,omitempty"`

	// asset purchases
	AssetPurchases interface{} `json:"asset_purchases,omitempty"`

	// building
	Building interface{} `json:"building,omitempty"`

	// custom fields
	CustomFields interface{} `json:"custom_fields,omitempty"`

	// customer id
	CustomerID interface{} `json:"customer_id,omitempty"`

	// depth
	Depth interface{} `json:"depth,omitempty"`

	// imagefile id
	ImagefileID interface{} `json:"imagefile_id,omitempty"`

	// name
	Name interface{} `json:"name,omitempty"`

	// no ports
	NoPorts interface{} `json:"no_ports,omitempty"`

	// no ports in row
	NoPortsInRow interface{} `json:"no_ports_in_row,omitempty"`

	// notes
	Notes interface{} `json:"notes,omitempty"`

	// numbering direction
	NumberingDirection interface{} `json:"numbering_direction,omitempty"`

	// numbering start location
	NumberingStartLocation interface{} `json:"numbering_start_location,omitempty"`

	// orientation
	Orientation interface{} `json:"orientation,omitempty"`

	// patch panel model id
	PatchPanelModelID interface{} `json:"patch_panel_model_id,omitempty"`

	// ports
	Ports []*PatchPanelPortsItems0 `json:"ports"`

	// rack
	Rack interface{} `json:"rack,omitempty"`

	// rack id
	RackID interface{} `json:"rack_id,omitempty"`

	// room
	Room interface{} `json:"room,omitempty"`

	// row
	Row interface{} `json:"row,omitempty"`

	// serial no
	SerialNo interface{} `json:"serial_no,omitempty"`

	// service level
	ServiceLevel interface{} `json:"service_level,omitempty"`

	// size
	Size interface{} `json:"size,omitempty"`

	// start at
	StartAt interface{} `json:"start_at,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`

	// vendor
	Vendor interface{} `json:"vendor,omitempty"`

	// vendor id
	VendorID interface{} `json:"vendor_id,omitempty"`

	// where
	Where interface{} `json:"where,omitempty"`
}

// Validate validates this patch panel
func (m *PatchPanel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchPanel) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchPanel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchPanel) UnmarshalBinary(b []byte) error {
	var res PatchPanel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PatchPanelPortsItems0 patch panel ports items0
//
// swagger:model PatchPanelPortsItems0
type PatchPanelPortsItems0 struct {

	// back connection id
	BackConnectionID interface{} `json:"back_connection_id,omitempty"`

	// back pp id
	BackPpID interface{} `json:"back_pp_id,omitempty"`

	// cable color
	CableColor interface{} `json:"cable_color,omitempty"`

	// color
	Color interface{} `json:"color,omitempty"`

	// content type
	ContentType interface{} `json:"content_type,omitempty"`

	// device id
	DeviceID interface{} `json:"device_id,omitempty"`

	// device name
	DeviceName interface{} `json:"device_name,omitempty"`

	// full path
	FullPath interface{} `json:"full_path,omitempty"`

	// number
	Number interface{} `json:"number,omitempty"`

	// obj label
	ObjLabel interface{} `json:"obj_label,omitempty"`

	// object id
	ObjectID interface{} `json:"object_id,omitempty"`

	// panel id
	PanelID interface{} `json:"panel_id,omitempty"`

	// panel name
	PanelName interface{} `json:"panel_name,omitempty"`
}

// Validate validates this patch panel ports items0
func (m *PatchPanelPortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchPanelPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchPanelPortsItems0) UnmarshalBinary(b []byte) error {
	var res PatchPanelPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
