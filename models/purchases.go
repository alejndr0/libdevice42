// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Purchases purchases
//
// swagger:model Purchases
type Purchases struct {

	// limit
	Limit interface{} `json:"limit,omitempty"`

	// offset
	Offset interface{} `json:"offset,omitempty"`

	// purchases
	Purchases []*PurchasesPurchasesItems0 `json:"purchases"`

	// total count
	TotalCount interface{} `json:"total_count,omitempty"`
}

// Validate validates this purchases
func (m *Purchases) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePurchases(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Purchases) validatePurchases(formats strfmt.Registry) error {

	if swag.IsZero(m.Purchases) { // not required
		return nil
	}

	for i := 0; i < len(m.Purchases); i++ {
		if swag.IsZero(m.Purchases[i]) { // not required
			continue
		}

		if m.Purchases[i] != nil {
			if err := m.Purchases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("purchases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Purchases) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Purchases) UnmarshalBinary(b []byte) error {
	var res Purchases
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PurchasesPurchasesItems0 purchases purchases items0
//
// swagger:model PurchasesPurchasesItems0
type PurchasesPurchasesItems0 struct {

	// completed
	Completed interface{} `json:"completed,omitempty"`

	// cost
	Cost interface{} `json:"cost,omitempty"`

	// custom fields
	CustomFields []*PurchasesPurchasesItems0CustomFieldsItems0 `json:"custom_fields"`

	// customer
	Customer interface{} `json:"customer,omitempty"`

	// groups
	Groups interface{} `json:"groups,omitempty"`

	// line items
	LineItems []*PurchasesPurchasesItems0LineItemsItems0 `json:"line_items"`

	// line items one time cost
	LineItemsOneTimeCost interface{} `json:"line_items_one_time_cost,omitempty"`

	// notes
	Notes interface{} `json:"notes,omitempty"`

	// order no
	OrderNo interface{} `json:"order_no,omitempty"`

	// po date
	PoDate interface{} `json:"po_date,omitempty"`

	// purchase id
	PurchaseID interface{} `json:"purchase_id,omitempty"`

	// vendor
	Vendor interface{} `json:"vendor,omitempty"`
}

// Validate validates this purchases purchases items0
func (m *PurchasesPurchasesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PurchasesPurchasesItems0) validateCustomFields(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomFields) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomFields); i++ {
		if swag.IsZero(m.CustomFields[i]) { // not required
			continue
		}

		if m.CustomFields[i] != nil {
			if err := m.CustomFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PurchasesPurchasesItems0) validateLineItems(formats strfmt.Registry) error {

	if swag.IsZero(m.LineItems) { // not required
		return nil
	}

	for i := 0; i < len(m.LineItems); i++ {
		if swag.IsZero(m.LineItems[i]) { // not required
			continue
		}

		if m.LineItems[i] != nil {
			if err := m.LineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("line_items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PurchasesPurchasesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PurchasesPurchasesItems0) UnmarshalBinary(b []byte) error {
	var res PurchasesPurchasesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PurchasesPurchasesItems0CustomFieldsItems0 purchases purchases items0 custom fields items0
//
// swagger:model PurchasesPurchasesItems0CustomFieldsItems0
type PurchasesPurchasesItems0CustomFieldsItems0 struct {

	// key
	Key interface{} `json:"key,omitempty"`

	// notes
	Notes interface{} `json:"notes,omitempty"`

	// value
	Value interface{} `json:"value,omitempty"`
}

// Validate validates this purchases purchases items0 custom fields items0
func (m *PurchasesPurchasesItems0CustomFieldsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PurchasesPurchasesItems0CustomFieldsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PurchasesPurchasesItems0CustomFieldsItems0) UnmarshalBinary(b []byte) error {
	var res PurchasesPurchasesItems0CustomFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PurchasesPurchasesItems0LineItemsItems0 purchases purchases items0 line items items0
//
// swagger:model PurchasesPurchasesItems0LineItemsItems0
type PurchasesPurchasesItems0LineItemsItems0 struct {

	// devices
	Devices []*PurchasesPurchasesItems0LineItemsItems0DevicesItems0 `json:"devices"`

	// line completed
	LineCompleted interface{} `json:"line_completed,omitempty"`

	// line cost
	LineCost interface{} `json:"line_cost,omitempty"`

	// line cost center
	LineCostCenter interface{} `json:"line_cost_center,omitempty"`

	// line customer
	LineCustomer interface{} `json:"line_customer,omitempty"`

	// line item type
	LineItemType interface{} `json:"line_item_type,omitempty"`

	// line no
	LineNo interface{} `json:"line_no,omitempty"`

	// line notes
	LineNotes interface{} `json:"line_notes,omitempty"`

	// line quantity
	LineQuantity interface{} `json:"line_quantity,omitempty"`

	// line type
	LineType interface{} `json:"line_type,omitempty"`
}

// Validate validates this purchases purchases items0 line items items0
func (m *PurchasesPurchasesItems0LineItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PurchasesPurchasesItems0LineItemsItems0) validateDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	for i := 0; i < len(m.Devices); i++ {
		if swag.IsZero(m.Devices[i]) { // not required
			continue
		}

		if m.Devices[i] != nil {
			if err := m.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PurchasesPurchasesItems0LineItemsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PurchasesPurchasesItems0LineItemsItems0) UnmarshalBinary(b []byte) error {
	var res PurchasesPurchasesItems0LineItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PurchasesPurchasesItems0LineItemsItems0DevicesItems0 purchases purchases items0 line items items0 devices items0
//
// swagger:model PurchasesPurchasesItems0LineItemsItems0DevicesItems0
type PurchasesPurchasesItems0LineItemsItems0DevicesItems0 struct {

	// asset no
	AssetNo interface{} `json:"asset_no,omitempty"`

	// device id
	DeviceID interface{} `json:"device_id,omitempty"`

	// device url
	DeviceURL interface{} `json:"device_url,omitempty"`

	// name
	Name interface{} `json:"name,omitempty"`

	// serial no
	SerialNo interface{} `json:"serial_no,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`

	// uuid
	UUID interface{} `json:"uuid,omitempty"`
}

// Validate validates this purchases purchases items0 line items items0 devices items0
func (m *PurchasesPurchasesItems0LineItemsItems0DevicesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PurchasesPurchasesItems0LineItemsItems0DevicesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PurchasesPurchasesItems0LineItemsItems0DevicesItems0) UnmarshalBinary(b []byte) error {
	var res PurchasesPurchasesItems0LineItemsItems0DevicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
