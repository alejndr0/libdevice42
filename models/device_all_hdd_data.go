// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceAllHddData device all hdd data
//
// swagger:model deviceAllHddData
type DeviceAllHddData struct {

	// description
	Description interface{} `json:"description,omitempty"`

	// hdd
	Hdd *DeviceAllHddDataHdd `json:"hdd,omitempty"`

	// hddcount
	Hddcount interface{} `json:"hddcount,omitempty"`

	// raid group
	RaidGroup interface{} `json:"raid_group,omitempty"`

	// raid type
	RaidType interface{} `json:"raid_type,omitempty"`
}

// Validate validates this device all hdd data
func (m *DeviceAllHddData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHdd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceAllHddData) validateHdd(formats strfmt.Registry) error {

	if swag.IsZero(m.Hdd) { // not required
		return nil
	}

	if m.Hdd != nil {
		if err := m.Hdd.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdd")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceAllHddData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceAllHddData) UnmarshalBinary(b []byte) error {
	var res DeviceAllHddData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceAllHddDataHdd device all hdd data hdd
//
// swagger:model DeviceAllHddDataHdd
type DeviceAllHddDataHdd struct {

	// bytes
	Bytes interface{} `json:"bytes,omitempty"`

	// description
	Description interface{} `json:"description,omitempty"`

	// hd id
	HdID interface{} `json:"hd_id,omitempty"`

	// location
	Location interface{} `json:"location,omitempty"`

	// manufacturer id
	ManufacturerID interface{} `json:"manufacturer_id,omitempty"`

	// notes
	Notes interface{} `json:"notes,omitempty"`

	// partno
	Partno interface{} `json:"partno,omitempty"`

	// rpm
	Rpm *DeviceAllHddDataHddRpm `json:"rpm,omitempty"`

	// size
	Size interface{} `json:"size,omitempty"`

	// type
	Type *DeviceAllHddDataHddType `json:"type,omitempty"`
}

// Validate validates this device all hdd data hdd
func (m *DeviceAllHddDataHdd) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRpm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceAllHddDataHdd) validateRpm(formats strfmt.Registry) error {

	if swag.IsZero(m.Rpm) { // not required
		return nil
	}

	if m.Rpm != nil {
		if err := m.Rpm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdd" + "." + "rpm")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceAllHddDataHdd) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdd" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceAllHddDataHdd) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceAllHddDataHdd) UnmarshalBinary(b []byte) error {
	var res DeviceAllHddDataHdd
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceAllHddDataHddRpm device all hdd data hdd rpm
//
// swagger:model DeviceAllHddDataHddRpm
type DeviceAllHddDataHddRpm struct {

	// id
	ID interface{} `json:"id,omitempty"`

	// name
	Name interface{} `json:"name,omitempty"`
}

// Validate validates this device all hdd data hdd rpm
func (m *DeviceAllHddDataHddRpm) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceAllHddDataHddRpm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceAllHddDataHddRpm) UnmarshalBinary(b []byte) error {
	var res DeviceAllHddDataHddRpm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceAllHddDataHddType device all hdd data hdd type
//
// swagger:model DeviceAllHddDataHddType
type DeviceAllHddDataHddType struct {

	// id
	ID interface{} `json:"id,omitempty"`

	// name
	Name interface{} `json:"name,omitempty"`
}

// Validate validates this device all hdd data hdd type
func (m *DeviceAllHddDataHddType) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceAllHddDataHddType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceAllHddDataHddType) UnmarshalBinary(b []byte) error {
	var res DeviceAllHddDataHddType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
