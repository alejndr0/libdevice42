// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DevicesAll devices all
//
// swagger:model devicesAll
type DevicesAll struct {

	// aliases
	Aliases DeviceAllAliase `json:"aliases,omitempty"`

	// asset no
	AssetNo interface{} `json:"asset_no,omitempty"`

	// building
	Building interface{} `json:"building,omitempty"`

	// category
	Category interface{} `json:"category,omitempty"`

	// cpucore
	Cpucore interface{} `json:"cpucore,omitempty"`

	// cpucount
	Cpucount interface{} `json:"cpucount,omitempty"`

	// cpuspeed
	Cpuspeed interface{} `json:"cpuspeed,omitempty"`

	// custom fields
	CustomFields DeviceAllCustomField `json:"custom_fields,omitempty"`

	// customer
	Customer interface{} `json:"customer,omitempty"`

	// customer id
	CustomerID interface{} `json:"customer_id,omitempty"`

	// device external links
	DeviceExternalLinks DeviceAllExternalLink `json:"device_external_links,omitempty"`

	// device id
	DeviceID interface{} `json:"device_id,omitempty"`

	// device purchase line items
	DevicePurchaseLineItems DeviceAllpurchaseLine `json:"device_purchase_line_items,omitempty"`

	// groups
	Groups interface{} `json:"groups,omitempty"`

	// hdd details
	HddDetails DeviceAllHdd `json:"hdd_details,omitempty"`

	// hddcount
	Hddcount interface{} `json:"hddcount,omitempty"`

	// hddraid
	Hddraid interface{} `json:"hddraid,omitempty"`

	// hddraid type
	HddraidType interface{} `json:"hddraid_type,omitempty"`

	// hddsize
	Hddsize interface{} `json:"hddsize,omitempty"`

	// hw depth
	HwDepth interface{} `json:"hw_depth,omitempty"`

	// hw model
	HwModel interface{} `json:"hw_model,omitempty"`

	// hw size
	HwSize interface{} `json:"hw_size,omitempty"`

	// id
	ID interface{} `json:"id,omitempty"`

	// in service
	InService interface{} `json:"in_service,omitempty"`

	// ip addresses
	IPAddresses []*DeviceAllIPAddresses `json:"ip_addresses"`

	// last updated
	LastUpdated interface{} `json:"last_updated,omitempty"`

	// limit
	Limit interface{} `json:"limit,omitempty"`

	// mac addresses
	MacAddresses []*DeviceAllMacAddresses `json:"mac_addresses"`

	// manufacturer
	Manufacturer interface{} `json:"manufacturer,omitempty"`

	// name
	Name interface{} `json:"name,omitempty"`

	// notes
	Notes interface{} `json:"notes,omitempty"`

	// orientation
	Orientation interface{} `json:"orientation,omitempty"`

	// os
	Os interface{} `json:"os,omitempty"`

	// osarch
	Osarch interface{} `json:"osarch,omitempty"`

	// osver
	Osver interface{} `json:"osver,omitempty"`

	// osverno
	Osverno interface{} `json:"osverno,omitempty"`

	// rack
	Rack interface{} `json:"rack,omitempty"`

	// rack id
	RackID interface{} `json:"rack_id,omitempty"`

	// ram
	RAM interface{} `json:"ram,omitempty"`

	// room
	Room interface{} `json:"room,omitempty"`

	// row
	Row interface{} `json:"row,omitempty"`

	// serial no
	SerialNo interface{} `json:"serial_no,omitempty"`

	// service level
	ServiceLevel interface{} `json:"service_level,omitempty"`

	// start at
	StartAt interface{} `json:"start_at,omitempty"`

	// tags
	Tags interface{} `json:"tags,omitempty"`

	// total count
	TotalCount interface{} `json:"total_count,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`

	// ucs manager
	UcsManager interface{} `json:"ucs_manager,omitempty"`

	// uuid
	UUID interface{} `json:"uuid,omitempty"`

	// virtual host name
	VirtualHostName interface{} `json:"virtual_host_name,omitempty"`

	// virtual subtype
	VirtualSubtype interface{} `json:"virtual_subtype,omitempty"`

	// where
	Where interface{} `json:"where,omitempty"`

	// xpos
	Xpos interface{} `json:"xpos,omitempty"`
}

// Validate validates this devices all
func (m *DevicesAll) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAliases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceExternalLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevicePurchaseLineItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHddDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacAddresses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicesAll) validateAliases(formats strfmt.Registry) error {

	if swag.IsZero(m.Aliases) { // not required
		return nil
	}

	if err := m.Aliases.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("aliases")
		}
		return err
	}

	return nil
}

func (m *DevicesAll) validateCustomFields(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomFields) { // not required
		return nil
	}

	if err := m.CustomFields.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("custom_fields")
		}
		return err
	}

	return nil
}

func (m *DevicesAll) validateDeviceExternalLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceExternalLinks) { // not required
		return nil
	}

	if err := m.DeviceExternalLinks.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("device_external_links")
		}
		return err
	}

	return nil
}

func (m *DevicesAll) validateDevicePurchaseLineItems(formats strfmt.Registry) error {

	if swag.IsZero(m.DevicePurchaseLineItems) { // not required
		return nil
	}

	if err := m.DevicePurchaseLineItems.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("device_purchase_line_items")
		}
		return err
	}

	return nil
}

func (m *DevicesAll) validateHddDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.HddDetails) { // not required
		return nil
	}

	if err := m.HddDetails.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hdd_details")
		}
		return err
	}

	return nil
}

func (m *DevicesAll) validateIPAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.IPAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.IPAddresses); i++ {
		if swag.IsZero(m.IPAddresses[i]) { // not required
			continue
		}

		if m.IPAddresses[i] != nil {
			if err := m.IPAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip_addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DevicesAll) validateMacAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.MacAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.MacAddresses); i++ {
		if swag.IsZero(m.MacAddresses[i]) { // not required
			continue
		}

		if m.MacAddresses[i] != nil {
			if err := m.MacAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mac_addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicesAll) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicesAll) UnmarshalBinary(b []byte) error {
	var res DevicesAll
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
