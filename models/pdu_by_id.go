// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PduByID pdu by Id
//
// swagger:model Pdu_by_Id
type PduByID struct {

	// building
	Building interface{} `json:"building,omitempty"`

	// building id
	BuildingID interface{} `json:"building_id,omitempty"`

	// device mapping
	DeviceMapping *PduByIDDeviceMapping `json:"device mapping,omitempty"`

	// name
	Name interface{} `json:"name,omitempty"`

	// notes
	Notes interface{} `json:"notes,omitempty"`

	// pdu id
	PduID interface{} `json:"pdu_id,omitempty"`

	// pdu model
	PduModel interface{} `json:"pdu_model,omitempty"`

	// rack
	Rack interface{} `json:"rack,omitempty"`

	// rack id
	RackID interface{} `json:"rack_id,omitempty"`

	// room
	Room interface{} `json:"room,omitempty"`

	// room id
	RoomID interface{} `json:"room_id,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`
}

// Validate validates this pdu by Id
func (m *PduByID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceMapping(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PduByID) validateDeviceMapping(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceMapping) { // not required
		return nil
	}

	if m.DeviceMapping != nil {
		if err := m.DeviceMapping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device mapping")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PduByID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PduByID) UnmarshalBinary(b []byte) error {
	var res PduByID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PduByIDDeviceMapping pdu by ID device mapping
//
// swagger:model PduByIDDeviceMapping
type PduByIDDeviceMapping struct {

	// aliases
	Aliases interface{} `json:"aliases,omitempty"`

	// asset no
	AssetNo interface{} `json:"asset_no,omitempty"`

	// building
	Building interface{} `json:"building,omitempty"`

	// cpucore
	Cpucore interface{} `json:"cpucore,omitempty"`

	// cpucount
	Cpucount interface{} `json:"cpucount,omitempty"`

	// cpuspeed
	Cpuspeed interface{} `json:"cpuspeed,omitempty"`

	// custom fields
	CustomFields []*PduByIDDeviceMappingCustomFieldsItems0 `json:"custom_fields"`

	// customer
	Customer interface{} `json:"customer,omitempty"`

	// device external links
	DeviceExternalLinks interface{} `json:"device_external_links,omitempty"`

	// device id
	DeviceID interface{} `json:"device_id,omitempty"`

	// device purchase line items
	DevicePurchaseLineItems interface{} `json:"device_purchase_line_items,omitempty"`

	// device sub type
	DeviceSubType interface{} `json:"device_sub_type,omitempty"`

	// hdd details
	HddDetails interface{} `json:"hdd_details,omitempty"`

	// hddcount
	Hddcount interface{} `json:"hddcount,omitempty"`

	// hddraid
	Hddraid interface{} `json:"hddraid,omitempty"`

	// hddraid type
	HddraidType interface{} `json:"hddraid_type,omitempty"`

	// hddsize
	Hddsize interface{} `json:"hddsize,omitempty"`

	// hw depth
	HwDepth interface{} `json:"hw_depth,omitempty"`

	// hw model
	HwModel interface{} `json:"hw_model,omitempty"`

	// hw size
	HwSize interface{} `json:"hw_size,omitempty"`

	// id
	ID interface{} `json:"id,omitempty"`

	// in service
	InService interface{} `json:"in_service,omitempty"`

	// ip addresses
	IPAddresses interface{} `json:"ip_addresses,omitempty"`

	// last updated
	LastUpdated interface{} `json:"last_updated,omitempty"`

	// mac addresses
	MacAddresses interface{} `json:"mac_addresses,omitempty"`

	// manufacturer
	Manufacturer interface{} `json:"manufacturer,omitempty"`

	// name
	Name interface{} `json:"name,omitempty"`

	// notes
	Notes interface{} `json:"notes,omitempty"`

	// os
	Os interface{} `json:"os,omitempty"`

	// pdu mapping url
	PduMappingURL interface{} `json:"pdu_mapping_url,omitempty"`

	// ram
	RAM interface{} `json:"ram,omitempty"`

	// room
	Room interface{} `json:"room,omitempty"`

	// serial no
	SerialNo interface{} `json:"serial_no,omitempty"`

	// service level
	ServiceLevel interface{} `json:"service_level,omitempty"`

	// tags
	Tags interface{} `json:"tags,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`

	// ucs manager
	UcsManager interface{} `json:"ucs_manager,omitempty"`

	// uuid
	UUID interface{} `json:"uuid,omitempty"`

	// virtual host name
	VirtualHostName interface{} `json:"virtual_host_name,omitempty"`
}

// Validate validates this pdu by ID device mapping
func (m *PduByIDDeviceMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PduByIDDeviceMapping) validateCustomFields(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomFields) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomFields); i++ {
		if swag.IsZero(m.CustomFields[i]) { // not required
			continue
		}

		if m.CustomFields[i] != nil {
			if err := m.CustomFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("device mapping" + "." + "custom_fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PduByIDDeviceMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PduByIDDeviceMapping) UnmarshalBinary(b []byte) error {
	var res PduByIDDeviceMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PduByIDDeviceMappingCustomFieldsItems0 pdu by ID device mapping custom fields items0
//
// swagger:model PduByIDDeviceMappingCustomFieldsItems0
type PduByIDDeviceMappingCustomFieldsItems0 struct {

	// key
	Key interface{} `json:"key,omitempty"`

	// notes
	Notes interface{} `json:"notes,omitempty"`

	// value
	Value interface{} `json:"value,omitempty"`
}

// Validate validates this pdu by ID device mapping custom fields items0
func (m *PduByIDDeviceMappingCustomFieldsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PduByIDDeviceMappingCustomFieldsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PduByIDDeviceMappingCustomFieldsItems0) UnmarshalBinary(b []byte) error {
	var res PduByIDDeviceMappingCustomFieldsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
