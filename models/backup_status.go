// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupStatus backup status
//
// swagger:model Backup_status
type BackupStatus struct {

	// backup status
	BackupStatus []*BackupStatusBackupStatusItems0 `json:"backup_status"`

	// cpu used percent
	CPUUsedPercent interface{} `json:"cpu_used_percent,omitempty"`

	// dbsize
	Dbsize interface{} `json:"dbsize,omitempty"`

	// disk used percent
	DiskUsedPercent interface{} `json:"disk_used_percent,omitempty"`

	// memory in m b
	MemoryInMB *BackupStatusMemoryInMB `json:"memory_in_MB,omitempty"`
}

// Validate validates this backup status
func (m *BackupStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryInMB(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStatus) validateBackupStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.BackupStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupStatus); i++ {
		if swag.IsZero(m.BackupStatus[i]) { // not required
			continue
		}

		if m.BackupStatus[i] != nil {
			if err := m.BackupStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("backup_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStatus) validateMemoryInMB(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoryInMB) { // not required
		return nil
	}

	if m.MemoryInMB != nil {
		if err := m.MemoryInMB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memory_in_MB")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStatus) UnmarshalBinary(b []byte) error {
	var res BackupStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BackupStatusBackupStatusItems0 backup status backup status items0
//
// swagger:model BackupStatusBackupStatusItems0
type BackupStatusBackupStatusItems0 struct {

	// id
	ID interface{} `json:"id,omitempty"`

	// job name
	JobName interface{} `json:"job_name,omitempty"`

	// status
	Status interface{} `json:"status,omitempty"`
}

// Validate validates this backup status backup status items0
func (m *BackupStatusBackupStatusItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupStatusBackupStatusItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStatusBackupStatusItems0) UnmarshalBinary(b []byte) error {
	var res BackupStatusBackupStatusItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BackupStatusMemoryInMB backup status memory in m b
//
// swagger:model BackupStatusMemoryInMB
type BackupStatusMemoryInMB struct {

	// buffers
	Buffers interface{} `json:"buffers,omitempty"`

	// cached
	Cached interface{} `json:"cached,omitempty"`

	// memfree
	Memfree interface{} `json:"memfree,omitempty"`

	// memtotal
	Memtotal interface{} `json:"memtotal,omitempty"`

	// swapfree
	Swapfree interface{} `json:"swapfree,omitempty"`

	// swaptotal
	Swaptotal interface{} `json:"swaptotal,omitempty"`
}

// Validate validates this backup status memory in m b
func (m *BackupStatusMemoryInMB) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupStatusMemoryInMB) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStatusMemoryInMB) UnmarshalBinary(b []byte) error {
	var res BackupStatusMemoryInMB
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
