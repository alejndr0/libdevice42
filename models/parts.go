// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Parts parts
//
// swagger:model Parts
type Parts struct {

	// asset no
	AssetNo interface{} `json:"asset_no,omitempty"`

	// assignment
	Assignment interface{} `json:"assignment,omitempty"`

	// change perm
	ChangePerm interface{} `json:"change_perm,omitempty"`

	// count
	Count interface{} `json:"count,omitempty"`

	// custom fields
	CustomFields interface{} `json:"custom_fields,omitempty"`

	// date changed
	DateChanged interface{} `json:"date_changed,omitempty"`

	// description
	Description interface{} `json:"description,omitempty"`

	// device
	Device interface{} `json:"device,omitempty"`

	// device id
	DeviceID interface{} `json:"device_id,omitempty"`

	// firmware
	Firmware interface{} `json:"firmware,omitempty"`

	// first added
	FirstAdded interface{} `json:"first_added,omitempty"`

	// last updated
	LastUpdated interface{} `json:"last_updated,omitempty"`

	// part id
	PartID interface{} `json:"part_id,omitempty"`

	// partmodel
	Partmodel *PartsPartmodel `json:"partmodel,omitempty"`

	// serial no
	SerialNo interface{} `json:"serial_no,omitempty"`

	// tags
	Tags interface{} `json:"tags,omitempty"`
}

// Validate validates this parts
func (m *Parts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePartmodel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Parts) validatePartmodel(formats strfmt.Registry) error {

	if swag.IsZero(m.Partmodel) { // not required
		return nil
	}

	if m.Partmodel != nil {
		if err := m.Partmodel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partmodel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Parts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Parts) UnmarshalBinary(b []byte) error {
	var res Parts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PartsPartmodel parts partmodel
//
// swagger:model PartsPartmodel
type PartsPartmodel struct {

	// available
	Available interface{} `json:"available,omitempty"`

	// description
	Description interface{} `json:"description,omitempty"`

	// in devices
	InDevices interface{} `json:"in_devices,omitempty"`

	// in rma
	InRma interface{} `json:"in_rma,omitempty"`

	// in storage racks
	InStorageRacks interface{} `json:"in_storage_racks,omitempty"`

	// in storage rooms
	InStorageRooms interface{} `json:"in_storage_rooms,omitempty"`

	// in transit
	InTransit interface{} `json:"in_transit,omitempty"`

	// length
	Length interface{} `json:"length,omitempty"`

	// location
	Location interface{} `json:"location,omitempty"`

	// manufacturer
	Manufacturer interface{} `json:"manufacturer,omitempty"`

	// modelno
	Modelno interface{} `json:"modelno,omitempty"`

	// name
	Name interface{} `json:"name,omitempty"`

	// notes
	Notes interface{} `json:"notes,omitempty"`

	// partmodel id
	PartmodelID interface{} `json:"partmodel_id,omitempty"`

	// partno
	Partno interface{} `json:"partno,omitempty"`

	// ramsize
	Ramsize interface{} `json:"ramsize,omitempty"`

	// ramspeed
	Ramspeed interface{} `json:"ramspeed,omitempty"`

	// ramtype
	Ramtype interface{} `json:"ramtype,omitempty"`

	// total count
	TotalCount interface{} `json:"total_count,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`

	// used
	Used interface{} `json:"used,omitempty"`
}

// Validate validates this parts partmodel
func (m *PartsPartmodel) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PartsPartmodel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartsPartmodel) UnmarshalBinary(b []byte) error {
	var res PartsPartmodel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
